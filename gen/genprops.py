# Generate methods for supported stellarium actions
import sys
from StellariumBase import Stellarium

def methodName(actionName):
    # Transform action method name to legal camel case
    #   Remove leading 'action' and 'Script/'
    #   Remove '_' from e.g. This_Action_Name
    #   Strip script name suffix ('.scc')
    #   Replace '.' and '-' with '_'
    #   Convert first character to lower case to give us camel case names
    if actionName.startswith('action'):
        actionName = actionName[6:]
    if actionName.startswith('Script/'):
        actionName = actionName[7:]
    if actionName.endswith('.ssc'):
        actionName = actionName[:-4]
    actionName = actionName.replace('_', '')
    actionName = actionName.replace('.', '_')
    actionName = actionName.replace('-', '_')
    actionName = actionName[0].lower() + actionName[1:]
    return actionName

stel = Stellarium()

# Write to implementation file
sys.stdout = open('_StellariumProperties.py', 'wt')
print("""
# Automatically generated by generate.py -- do not edit.
class StellariumProperties:
    def _updateProperties(self):
        s = self.getStatus(propId=self._propId)
        pc = s['propertyChanges']
        self._propId = pc['id']
        ch = pc['changes']
        for change in ch.items():
            self._propertyValues[change[0]] = change[1]
    def _getProperty(self, id):
        self._updateProperties()
        return self._propertyValues[id]
    def _setProperty(self, prop, value):
        params = {'id': prop, 'value': str(value)}
        return self._postParams('stelproperty/set', params)
""")

for prop in stel.getProperties().items():
    id = prop[0]
    method = methodName(id)
    print(f"    @property")
    print(f"    def {method}(self):")
    docstring = f"{id} ({prop[1]['typeString']})"
    print(f'        """{docstring}"""')
    print(f"        return self._getProperty('{id}')")
    print(f"    @{method}.setter")
    print(f"    def {method}(self, value):")
    print(f"        self._setProperty('{id}', value)")
    #value = prop[1]['value']
    #variantType = prop[1]['variantType']
    #typeString = prop[1]['typeString']
    #typeEnum = prop[1]['typeEnum']
