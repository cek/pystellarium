
# Automatically generated by generate.py -- do not edit.
class StellariumProperties:
    def _updateProperties(self):
        s = self.getStatus(propId=self._propId)
        pc = s['propertyChanges']
        self._propId = pc['id']
        ch = pc['changes']
        for change in ch.items():
            self._propertyValues[change[0]] = change[1]
    def _getProperty(self, id):
        self._updateProperties()
        return self._propertyValues[id]
    def _setProperty(self, prop, value):
        params = {'id': prop, 'value': str(value)}
        return self._postParams('stelproperty/set', params)

    @property
    def asterismMgr_asterismLineThickness(self):
        """AsterismMgr.asterismLineThickness (int)"""
        return self._getProperty('AsterismMgr.asterismLineThickness')
    @asterismMgr_asterismLineThickness.setter
    def asterismMgr_asterismLineThickness(self, value):
        self._setProperty('AsterismMgr.asterismLineThickness', value)
    @property
    def asterismMgr_fontSize(self):
        """AsterismMgr.fontSize (float)"""
        return self._getProperty('AsterismMgr.fontSize')
    @asterismMgr_fontSize.setter
    def asterismMgr_fontSize(self, value):
        self._setProperty('AsterismMgr.fontSize', value)
    @property
    def asterismMgr_isolateAsterismSelected(self):
        """AsterismMgr.isolateAsterismSelected (bool)"""
        return self._getProperty('AsterismMgr.isolateAsterismSelected')
    @asterismMgr_isolateAsterismSelected.setter
    def asterismMgr_isolateAsterismSelected(self, value):
        self._setProperty('AsterismMgr.isolateAsterismSelected', value)
    @property
    def asterismMgr_linesColor(self):
        """AsterismMgr.linesColor (Vector3<float>)"""
        return self._getProperty('AsterismMgr.linesColor')
    @asterismMgr_linesColor.setter
    def asterismMgr_linesColor(self, value):
        self._setProperty('AsterismMgr.linesColor', value)
    @property
    def asterismMgr_linesDisplayed(self):
        """AsterismMgr.linesDisplayed (bool)"""
        return self._getProperty('AsterismMgr.linesDisplayed')
    @asterismMgr_linesDisplayed.setter
    def asterismMgr_linesDisplayed(self, value):
        self._setProperty('AsterismMgr.linesDisplayed', value)
    @property
    def asterismMgr_namesColor(self):
        """AsterismMgr.namesColor (Vector3<float>)"""
        return self._getProperty('AsterismMgr.namesColor')
    @asterismMgr_namesColor.setter
    def asterismMgr_namesColor(self, value):
        self._setProperty('AsterismMgr.namesColor', value)
    @property
    def asterismMgr_namesDisplayed(self):
        """AsterismMgr.namesDisplayed (bool)"""
        return self._getProperty('AsterismMgr.namesDisplayed')
    @asterismMgr_namesDisplayed.setter
    def asterismMgr_namesDisplayed(self, value):
        self._setProperty('AsterismMgr.namesDisplayed', value)
    @property
    def asterismMgr_rayHelperThickness(self):
        """AsterismMgr.rayHelperThickness (int)"""
        return self._getProperty('AsterismMgr.rayHelperThickness')
    @asterismMgr_rayHelperThickness.setter
    def asterismMgr_rayHelperThickness(self, value):
        self._setProperty('AsterismMgr.rayHelperThickness', value)
    @property
    def asterismMgr_rayHelpersColor(self):
        """AsterismMgr.rayHelpersColor (Vector3<float>)"""
        return self._getProperty('AsterismMgr.rayHelpersColor')
    @asterismMgr_rayHelpersColor.setter
    def asterismMgr_rayHelpersColor(self, value):
        self._setProperty('AsterismMgr.rayHelpersColor', value)
    @property
    def asterismMgr_rayHelpersDisplayed(self):
        """AsterismMgr.rayHelpersDisplayed (bool)"""
        return self._getProperty('AsterismMgr.rayHelpersDisplayed')
    @asterismMgr_rayHelpersDisplayed.setter
    def asterismMgr_rayHelpersDisplayed(self, value):
        self._setProperty('AsterismMgr.rayHelpersDisplayed', value)
    @property
    def constellationMgr_artDisplayed(self):
        """ConstellationMgr.artDisplayed (bool)"""
        return self._getProperty('ConstellationMgr.artDisplayed')
    @constellationMgr_artDisplayed.setter
    def constellationMgr_artDisplayed(self, value):
        self._setProperty('ConstellationMgr.artDisplayed', value)
    @property
    def constellationMgr_artFadeDuration(self):
        """ConstellationMgr.artFadeDuration (float)"""
        return self._getProperty('ConstellationMgr.artFadeDuration')
    @constellationMgr_artFadeDuration.setter
    def constellationMgr_artFadeDuration(self, value):
        self._setProperty('ConstellationMgr.artFadeDuration', value)
    @property
    def constellationMgr_artIntensity(self):
        """ConstellationMgr.artIntensity (float)"""
        return self._getProperty('ConstellationMgr.artIntensity')
    @constellationMgr_artIntensity.setter
    def constellationMgr_artIntensity(self, value):
        self._setProperty('ConstellationMgr.artIntensity', value)
    @property
    def constellationMgr_boundariesColor(self):
        """ConstellationMgr.boundariesColor (Vector3<float>)"""
        return self._getProperty('ConstellationMgr.boundariesColor')
    @constellationMgr_boundariesColor.setter
    def constellationMgr_boundariesColor(self, value):
        self._setProperty('ConstellationMgr.boundariesColor', value)
    @property
    def constellationMgr_boundariesDisplayed(self):
        """ConstellationMgr.boundariesDisplayed (bool)"""
        return self._getProperty('ConstellationMgr.boundariesDisplayed')
    @constellationMgr_boundariesDisplayed.setter
    def constellationMgr_boundariesDisplayed(self, value):
        self._setProperty('ConstellationMgr.boundariesDisplayed', value)
    @property
    def constellationMgr_constellationBoundariesThickness(self):
        """ConstellationMgr.constellationBoundariesThickness (int)"""
        return self._getProperty('ConstellationMgr.constellationBoundariesThickness')
    @constellationMgr_constellationBoundariesThickness.setter
    def constellationMgr_constellationBoundariesThickness(self, value):
        self._setProperty('ConstellationMgr.constellationBoundariesThickness', value)
    @property
    def constellationMgr_constellationDisplayStyle(self):
        """ConstellationMgr.constellationDisplayStyle (ConstellationMgr::ConstellationDisplayStyle)"""
        return self._getProperty('ConstellationMgr.constellationDisplayStyle')
    @constellationMgr_constellationDisplayStyle.setter
    def constellationMgr_constellationDisplayStyle(self, value):
        self._setProperty('ConstellationMgr.constellationDisplayStyle', value)
    @property
    def constellationMgr_constellationLineThickness(self):
        """ConstellationMgr.constellationLineThickness (int)"""
        return self._getProperty('ConstellationMgr.constellationLineThickness')
    @constellationMgr_constellationLineThickness.setter
    def constellationMgr_constellationLineThickness(self, value):
        self._setProperty('ConstellationMgr.constellationLineThickness', value)
    @property
    def constellationMgr_fontSize(self):
        """ConstellationMgr.fontSize (float)"""
        return self._getProperty('ConstellationMgr.fontSize')
    @constellationMgr_fontSize.setter
    def constellationMgr_fontSize(self, value):
        self._setProperty('ConstellationMgr.fontSize', value)
    @property
    def constellationMgr_isolateSelected(self):
        """ConstellationMgr.isolateSelected (bool)"""
        return self._getProperty('ConstellationMgr.isolateSelected')
    @constellationMgr_isolateSelected.setter
    def constellationMgr_isolateSelected(self, value):
        self._setProperty('ConstellationMgr.isolateSelected', value)
    @property
    def constellationMgr_linesColor(self):
        """ConstellationMgr.linesColor (Vector3<float>)"""
        return self._getProperty('ConstellationMgr.linesColor')
    @constellationMgr_linesColor.setter
    def constellationMgr_linesColor(self, value):
        self._setProperty('ConstellationMgr.linesColor', value)
    @property
    def constellationMgr_linesDisplayed(self):
        """ConstellationMgr.linesDisplayed (bool)"""
        return self._getProperty('ConstellationMgr.linesDisplayed')
    @constellationMgr_linesDisplayed.setter
    def constellationMgr_linesDisplayed(self, value):
        self._setProperty('ConstellationMgr.linesDisplayed', value)
    @property
    def constellationMgr_namesColor(self):
        """ConstellationMgr.namesColor (Vector3<float>)"""
        return self._getProperty('ConstellationMgr.namesColor')
    @constellationMgr_namesColor.setter
    def constellationMgr_namesColor(self, value):
        self._setProperty('ConstellationMgr.namesColor', value)
    @property
    def constellationMgr_namesDisplayed(self):
        """ConstellationMgr.namesDisplayed (bool)"""
        return self._getProperty('ConstellationMgr.namesDisplayed')
    @constellationMgr_namesDisplayed.setter
    def constellationMgr_namesDisplayed(self, value):
        self._setProperty('ConstellationMgr.namesDisplayed', value)
    @property
    def exoplanets_flagDisplayMode(self):
        """Exoplanets.flagDisplayMode (bool)"""
        return self._getProperty('Exoplanets.flagDisplayMode')
    @exoplanets_flagDisplayMode.setter
    def exoplanets_flagDisplayMode(self, value):
        self._setProperty('Exoplanets.flagDisplayMode', value)
    @property
    def exoplanets_flagHabitableMode(self):
        """Exoplanets.flagHabitableMode (bool)"""
        return self._getProperty('Exoplanets.flagHabitableMode')
    @exoplanets_flagHabitableMode.setter
    def exoplanets_flagHabitableMode(self, value):
        self._setProperty('Exoplanets.flagHabitableMode', value)
    @property
    def exoplanets_flagShowExoplanetsDesignations(self):
        """Exoplanets.flagShowExoplanetsDesignations (bool)"""
        return self._getProperty('Exoplanets.flagShowExoplanetsDesignations')
    @exoplanets_flagShowExoplanetsDesignations.setter
    def exoplanets_flagShowExoplanetsDesignations(self, value):
        self._setProperty('Exoplanets.flagShowExoplanetsDesignations', value)
    @property
    def exoplanets_flagShowExoplanetsNumbers(self):
        """Exoplanets.flagShowExoplanetsNumbers (bool)"""
        return self._getProperty('Exoplanets.flagShowExoplanetsNumbers')
    @exoplanets_flagShowExoplanetsNumbers.setter
    def exoplanets_flagShowExoplanetsNumbers(self, value):
        self._setProperty('Exoplanets.flagShowExoplanetsNumbers', value)
    @property
    def exoplanets_flagTimelineMode(self):
        """Exoplanets.flagTimelineMode (bool)"""
        return self._getProperty('Exoplanets.flagTimelineMode')
    @exoplanets_flagTimelineMode.setter
    def exoplanets_flagTimelineMode(self, value):
        self._setProperty('Exoplanets.flagTimelineMode', value)
    @property
    def exoplanets_habitableColor(self):
        """Exoplanets.habitableColor (Vector3<float>)"""
        return self._getProperty('Exoplanets.habitableColor')
    @exoplanets_habitableColor.setter
    def exoplanets_habitableColor(self, value):
        self._setProperty('Exoplanets.habitableColor', value)
    @property
    def exoplanets_markerColor(self):
        """Exoplanets.markerColor (Vector3<float>)"""
        return self._getProperty('Exoplanets.markerColor')
    @exoplanets_markerColor.setter
    def exoplanets_markerColor(self, value):
        self._setProperty('Exoplanets.markerColor', value)
    @property
    def exoplanets_showExoplanets(self):
        """Exoplanets.showExoplanets (bool)"""
        return self._getProperty('Exoplanets.showExoplanets')
    @exoplanets_showExoplanets.setter
    def exoplanets_showExoplanets(self, value):
        self._setProperty('Exoplanets.showExoplanets', value)
    @property
    def gridLinesMgr_antisolarPointColor(self):
        """GridLinesMgr.antisolarPointColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.antisolarPointColor')
    @gridLinesMgr_antisolarPointColor.setter
    def gridLinesMgr_antisolarPointColor(self, value):
        self._setProperty('GridLinesMgr.antisolarPointColor', value)
    @property
    def gridLinesMgr_antisolarPointDisplayed(self):
        """GridLinesMgr.antisolarPointDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.antisolarPointDisplayed')
    @gridLinesMgr_antisolarPointDisplayed.setter
    def gridLinesMgr_antisolarPointDisplayed(self, value):
        self._setProperty('GridLinesMgr.antisolarPointDisplayed', value)
    @property
    def gridLinesMgr_apexPointsColor(self):
        """GridLinesMgr.apexPointsColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.apexPointsColor')
    @gridLinesMgr_apexPointsColor.setter
    def gridLinesMgr_apexPointsColor(self, value):
        self._setProperty('GridLinesMgr.apexPointsColor', value)
    @property
    def gridLinesMgr_apexPointsDisplayed(self):
        """GridLinesMgr.apexPointsDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.apexPointsDisplayed')
    @gridLinesMgr_apexPointsDisplayed.setter
    def gridLinesMgr_apexPointsDisplayed(self, value):
        self._setProperty('GridLinesMgr.apexPointsDisplayed', value)
    @property
    def gridLinesMgr_azimuthalGridColor(self):
        """GridLinesMgr.azimuthalGridColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.azimuthalGridColor')
    @gridLinesMgr_azimuthalGridColor.setter
    def gridLinesMgr_azimuthalGridColor(self, value):
        self._setProperty('GridLinesMgr.azimuthalGridColor', value)
    @property
    def gridLinesMgr_azimuthalGridDisplayed(self):
        """GridLinesMgr.azimuthalGridDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.azimuthalGridDisplayed')
    @gridLinesMgr_azimuthalGridDisplayed.setter
    def gridLinesMgr_azimuthalGridDisplayed(self, value):
        self._setProperty('GridLinesMgr.azimuthalGridDisplayed', value)
    @property
    def gridLinesMgr_celestialJ2000PolesColor(self):
        """GridLinesMgr.celestialJ2000PolesColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.celestialJ2000PolesColor')
    @gridLinesMgr_celestialJ2000PolesColor.setter
    def gridLinesMgr_celestialJ2000PolesColor(self, value):
        self._setProperty('GridLinesMgr.celestialJ2000PolesColor', value)
    @property
    def gridLinesMgr_celestialJ2000PolesDisplayed(self):
        """GridLinesMgr.celestialJ2000PolesDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.celestialJ2000PolesDisplayed')
    @gridLinesMgr_celestialJ2000PolesDisplayed.setter
    def gridLinesMgr_celestialJ2000PolesDisplayed(self, value):
        self._setProperty('GridLinesMgr.celestialJ2000PolesDisplayed', value)
    @property
    def gridLinesMgr_celestialPolesColor(self):
        """GridLinesMgr.celestialPolesColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.celestialPolesColor')
    @gridLinesMgr_celestialPolesColor.setter
    def gridLinesMgr_celestialPolesColor(self, value):
        self._setProperty('GridLinesMgr.celestialPolesColor', value)
    @property
    def gridLinesMgr_celestialPolesDisplayed(self):
        """GridLinesMgr.celestialPolesDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.celestialPolesDisplayed')
    @gridLinesMgr_celestialPolesDisplayed.setter
    def gridLinesMgr_celestialPolesDisplayed(self, value):
        self._setProperty('GridLinesMgr.celestialPolesDisplayed', value)
    @property
    def gridLinesMgr_circumpolarCirclesColor(self):
        """GridLinesMgr.circumpolarCirclesColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.circumpolarCirclesColor')
    @gridLinesMgr_circumpolarCirclesColor.setter
    def gridLinesMgr_circumpolarCirclesColor(self, value):
        self._setProperty('GridLinesMgr.circumpolarCirclesColor', value)
    @property
    def gridLinesMgr_circumpolarCirclesDisplayed(self):
        """GridLinesMgr.circumpolarCirclesDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.circumpolarCirclesDisplayed')
    @gridLinesMgr_circumpolarCirclesDisplayed.setter
    def gridLinesMgr_circumpolarCirclesDisplayed(self, value):
        self._setProperty('GridLinesMgr.circumpolarCirclesDisplayed', value)
    @property
    def gridLinesMgr_colureLinesColor(self):
        """GridLinesMgr.colureLinesColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.colureLinesColor')
    @gridLinesMgr_colureLinesColor.setter
    def gridLinesMgr_colureLinesColor(self, value):
        self._setProperty('GridLinesMgr.colureLinesColor', value)
    @property
    def gridLinesMgr_colureLinesDisplayed(self):
        """GridLinesMgr.colureLinesDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.colureLinesDisplayed')
    @gridLinesMgr_colureLinesDisplayed.setter
    def gridLinesMgr_colureLinesDisplayed(self, value):
        self._setProperty('GridLinesMgr.colureLinesDisplayed', value)
    @property
    def gridLinesMgr_colurePartsDisplayed(self):
        """GridLinesMgr.colurePartsDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.colurePartsDisplayed')
    @gridLinesMgr_colurePartsDisplayed.setter
    def gridLinesMgr_colurePartsDisplayed(self, value):
        self._setProperty('GridLinesMgr.colurePartsDisplayed', value)
    @property
    def gridLinesMgr_colurePartsLabeled(self):
        """GridLinesMgr.colurePartsLabeled (bool)"""
        return self._getProperty('GridLinesMgr.colurePartsLabeled')
    @gridLinesMgr_colurePartsLabeled.setter
    def gridLinesMgr_colurePartsLabeled(self, value):
        self._setProperty('GridLinesMgr.colurePartsLabeled', value)
    @property
    def gridLinesMgr_currentVerticalLineColor(self):
        """GridLinesMgr.currentVerticalLineColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.currentVerticalLineColor')
    @gridLinesMgr_currentVerticalLineColor.setter
    def gridLinesMgr_currentVerticalLineColor(self, value):
        self._setProperty('GridLinesMgr.currentVerticalLineColor', value)
    @property
    def gridLinesMgr_currentVerticalLineDisplayed(self):
        """GridLinesMgr.currentVerticalLineDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.currentVerticalLineDisplayed')
    @gridLinesMgr_currentVerticalLineDisplayed.setter
    def gridLinesMgr_currentVerticalLineDisplayed(self, value):
        self._setProperty('GridLinesMgr.currentVerticalLineDisplayed', value)
    @property
    def gridLinesMgr_currentVerticalPartsDisplayed(self):
        """GridLinesMgr.currentVerticalPartsDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.currentVerticalPartsDisplayed')
    @gridLinesMgr_currentVerticalPartsDisplayed.setter
    def gridLinesMgr_currentVerticalPartsDisplayed(self, value):
        self._setProperty('GridLinesMgr.currentVerticalPartsDisplayed', value)
    @property
    def gridLinesMgr_currentVerticalPartsLabeled(self):
        """GridLinesMgr.currentVerticalPartsLabeled (bool)"""
        return self._getProperty('GridLinesMgr.currentVerticalPartsLabeled')
    @gridLinesMgr_currentVerticalPartsLabeled.setter
    def gridLinesMgr_currentVerticalPartsLabeled(self, value):
        self._setProperty('GridLinesMgr.currentVerticalPartsLabeled', value)
    @property
    def gridLinesMgr_eclipticGridColor(self):
        """GridLinesMgr.eclipticGridColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.eclipticGridColor')
    @gridLinesMgr_eclipticGridColor.setter
    def gridLinesMgr_eclipticGridColor(self, value):
        self._setProperty('GridLinesMgr.eclipticGridColor', value)
    @property
    def gridLinesMgr_eclipticGridDisplayed(self):
        """GridLinesMgr.eclipticGridDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.eclipticGridDisplayed')
    @gridLinesMgr_eclipticGridDisplayed.setter
    def gridLinesMgr_eclipticGridDisplayed(self, value):
        self._setProperty('GridLinesMgr.eclipticGridDisplayed', value)
    @property
    def gridLinesMgr_eclipticJ2000GridColor(self):
        """GridLinesMgr.eclipticJ2000GridColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.eclipticJ2000GridColor')
    @gridLinesMgr_eclipticJ2000GridColor.setter
    def gridLinesMgr_eclipticJ2000GridColor(self, value):
        self._setProperty('GridLinesMgr.eclipticJ2000GridColor', value)
    @property
    def gridLinesMgr_eclipticJ2000GridDisplayed(self):
        """GridLinesMgr.eclipticJ2000GridDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.eclipticJ2000GridDisplayed')
    @gridLinesMgr_eclipticJ2000GridDisplayed.setter
    def gridLinesMgr_eclipticJ2000GridDisplayed(self, value):
        self._setProperty('GridLinesMgr.eclipticJ2000GridDisplayed', value)
    @property
    def gridLinesMgr_eclipticJ2000LineColor(self):
        """GridLinesMgr.eclipticJ2000LineColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.eclipticJ2000LineColor')
    @gridLinesMgr_eclipticJ2000LineColor.setter
    def gridLinesMgr_eclipticJ2000LineColor(self, value):
        self._setProperty('GridLinesMgr.eclipticJ2000LineColor', value)
    @property
    def gridLinesMgr_eclipticJ2000LineDisplayed(self):
        """GridLinesMgr.eclipticJ2000LineDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.eclipticJ2000LineDisplayed')
    @gridLinesMgr_eclipticJ2000LineDisplayed.setter
    def gridLinesMgr_eclipticJ2000LineDisplayed(self, value):
        self._setProperty('GridLinesMgr.eclipticJ2000LineDisplayed', value)
    @property
    def gridLinesMgr_eclipticJ2000PartsDisplayed(self):
        """GridLinesMgr.eclipticJ2000PartsDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.eclipticJ2000PartsDisplayed')
    @gridLinesMgr_eclipticJ2000PartsDisplayed.setter
    def gridLinesMgr_eclipticJ2000PartsDisplayed(self, value):
        self._setProperty('GridLinesMgr.eclipticJ2000PartsDisplayed', value)
    @property
    def gridLinesMgr_eclipticJ2000PartsLabeled(self):
        """GridLinesMgr.eclipticJ2000PartsLabeled (bool)"""
        return self._getProperty('GridLinesMgr.eclipticJ2000PartsLabeled')
    @gridLinesMgr_eclipticJ2000PartsLabeled.setter
    def gridLinesMgr_eclipticJ2000PartsLabeled(self, value):
        self._setProperty('GridLinesMgr.eclipticJ2000PartsLabeled', value)
    @property
    def gridLinesMgr_eclipticJ2000PolesColor(self):
        """GridLinesMgr.eclipticJ2000PolesColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.eclipticJ2000PolesColor')
    @gridLinesMgr_eclipticJ2000PolesColor.setter
    def gridLinesMgr_eclipticJ2000PolesColor(self, value):
        self._setProperty('GridLinesMgr.eclipticJ2000PolesColor', value)
    @property
    def gridLinesMgr_eclipticJ2000PolesDisplayed(self):
        """GridLinesMgr.eclipticJ2000PolesDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.eclipticJ2000PolesDisplayed')
    @gridLinesMgr_eclipticJ2000PolesDisplayed.setter
    def gridLinesMgr_eclipticJ2000PolesDisplayed(self, value):
        self._setProperty('GridLinesMgr.eclipticJ2000PolesDisplayed', value)
    @property
    def gridLinesMgr_eclipticLineColor(self):
        """GridLinesMgr.eclipticLineColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.eclipticLineColor')
    @gridLinesMgr_eclipticLineColor.setter
    def gridLinesMgr_eclipticLineColor(self, value):
        self._setProperty('GridLinesMgr.eclipticLineColor', value)
    @property
    def gridLinesMgr_eclipticLineDisplayed(self):
        """GridLinesMgr.eclipticLineDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.eclipticLineDisplayed')
    @gridLinesMgr_eclipticLineDisplayed.setter
    def gridLinesMgr_eclipticLineDisplayed(self, value):
        self._setProperty('GridLinesMgr.eclipticLineDisplayed', value)
    @property
    def gridLinesMgr_eclipticPartsDisplayed(self):
        """GridLinesMgr.eclipticPartsDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.eclipticPartsDisplayed')
    @gridLinesMgr_eclipticPartsDisplayed.setter
    def gridLinesMgr_eclipticPartsDisplayed(self, value):
        self._setProperty('GridLinesMgr.eclipticPartsDisplayed', value)
    @property
    def gridLinesMgr_eclipticPartsLabeled(self):
        """GridLinesMgr.eclipticPartsLabeled (bool)"""
        return self._getProperty('GridLinesMgr.eclipticPartsLabeled')
    @gridLinesMgr_eclipticPartsLabeled.setter
    def gridLinesMgr_eclipticPartsLabeled(self, value):
        self._setProperty('GridLinesMgr.eclipticPartsLabeled', value)
    @property
    def gridLinesMgr_eclipticPolesColor(self):
        """GridLinesMgr.eclipticPolesColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.eclipticPolesColor')
    @gridLinesMgr_eclipticPolesColor.setter
    def gridLinesMgr_eclipticPolesColor(self, value):
        self._setProperty('GridLinesMgr.eclipticPolesColor', value)
    @property
    def gridLinesMgr_eclipticPolesDisplayed(self):
        """GridLinesMgr.eclipticPolesDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.eclipticPolesDisplayed')
    @gridLinesMgr_eclipticPolesDisplayed.setter
    def gridLinesMgr_eclipticPolesDisplayed(self, value):
        self._setProperty('GridLinesMgr.eclipticPolesDisplayed', value)
    @property
    def gridLinesMgr_equatorGridColor(self):
        """GridLinesMgr.equatorGridColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.equatorGridColor')
    @gridLinesMgr_equatorGridColor.setter
    def gridLinesMgr_equatorGridColor(self, value):
        self._setProperty('GridLinesMgr.equatorGridColor', value)
    @property
    def gridLinesMgr_equatorGridDisplayed(self):
        """GridLinesMgr.equatorGridDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.equatorGridDisplayed')
    @gridLinesMgr_equatorGridDisplayed.setter
    def gridLinesMgr_equatorGridDisplayed(self, value):
        self._setProperty('GridLinesMgr.equatorGridDisplayed', value)
    @property
    def gridLinesMgr_equatorJ2000GridColor(self):
        """GridLinesMgr.equatorJ2000GridColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.equatorJ2000GridColor')
    @gridLinesMgr_equatorJ2000GridColor.setter
    def gridLinesMgr_equatorJ2000GridColor(self, value):
        self._setProperty('GridLinesMgr.equatorJ2000GridColor', value)
    @property
    def gridLinesMgr_equatorJ2000GridDisplayed(self):
        """GridLinesMgr.equatorJ2000GridDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.equatorJ2000GridDisplayed')
    @gridLinesMgr_equatorJ2000GridDisplayed.setter
    def gridLinesMgr_equatorJ2000GridDisplayed(self, value):
        self._setProperty('GridLinesMgr.equatorJ2000GridDisplayed', value)
    @property
    def gridLinesMgr_equatorJ2000LineColor(self):
        """GridLinesMgr.equatorJ2000LineColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.equatorJ2000LineColor')
    @gridLinesMgr_equatorJ2000LineColor.setter
    def gridLinesMgr_equatorJ2000LineColor(self, value):
        self._setProperty('GridLinesMgr.equatorJ2000LineColor', value)
    @property
    def gridLinesMgr_equatorJ2000LineDisplayed(self):
        """GridLinesMgr.equatorJ2000LineDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.equatorJ2000LineDisplayed')
    @gridLinesMgr_equatorJ2000LineDisplayed.setter
    def gridLinesMgr_equatorJ2000LineDisplayed(self, value):
        self._setProperty('GridLinesMgr.equatorJ2000LineDisplayed', value)
    @property
    def gridLinesMgr_equatorJ2000PartsDisplayed(self):
        """GridLinesMgr.equatorJ2000PartsDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.equatorJ2000PartsDisplayed')
    @gridLinesMgr_equatorJ2000PartsDisplayed.setter
    def gridLinesMgr_equatorJ2000PartsDisplayed(self, value):
        self._setProperty('GridLinesMgr.equatorJ2000PartsDisplayed', value)
    @property
    def gridLinesMgr_equatorJ2000PartsLabeled(self):
        """GridLinesMgr.equatorJ2000PartsLabeled (bool)"""
        return self._getProperty('GridLinesMgr.equatorJ2000PartsLabeled')
    @gridLinesMgr_equatorJ2000PartsLabeled.setter
    def gridLinesMgr_equatorJ2000PartsLabeled(self, value):
        self._setProperty('GridLinesMgr.equatorJ2000PartsLabeled', value)
    @property
    def gridLinesMgr_equatorLineColor(self):
        """GridLinesMgr.equatorLineColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.equatorLineColor')
    @gridLinesMgr_equatorLineColor.setter
    def gridLinesMgr_equatorLineColor(self, value):
        self._setProperty('GridLinesMgr.equatorLineColor', value)
    @property
    def gridLinesMgr_equatorLineDisplayed(self):
        """GridLinesMgr.equatorLineDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.equatorLineDisplayed')
    @gridLinesMgr_equatorLineDisplayed.setter
    def gridLinesMgr_equatorLineDisplayed(self, value):
        self._setProperty('GridLinesMgr.equatorLineDisplayed', value)
    @property
    def gridLinesMgr_equatorPartsDisplayed(self):
        """GridLinesMgr.equatorPartsDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.equatorPartsDisplayed')
    @gridLinesMgr_equatorPartsDisplayed.setter
    def gridLinesMgr_equatorPartsDisplayed(self, value):
        self._setProperty('GridLinesMgr.equatorPartsDisplayed', value)
    @property
    def gridLinesMgr_equatorPartsLabeled(self):
        """GridLinesMgr.equatorPartsLabeled (bool)"""
        return self._getProperty('GridLinesMgr.equatorPartsLabeled')
    @gridLinesMgr_equatorPartsLabeled.setter
    def gridLinesMgr_equatorPartsLabeled(self, value):
        self._setProperty('GridLinesMgr.equatorPartsLabeled', value)
    @property
    def gridLinesMgr_equinoxJ2000PointsColor(self):
        """GridLinesMgr.equinoxJ2000PointsColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.equinoxJ2000PointsColor')
    @gridLinesMgr_equinoxJ2000PointsColor.setter
    def gridLinesMgr_equinoxJ2000PointsColor(self, value):
        self._setProperty('GridLinesMgr.equinoxJ2000PointsColor', value)
    @property
    def gridLinesMgr_equinoxJ2000PointsDisplayed(self):
        """GridLinesMgr.equinoxJ2000PointsDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.equinoxJ2000PointsDisplayed')
    @gridLinesMgr_equinoxJ2000PointsDisplayed.setter
    def gridLinesMgr_equinoxJ2000PointsDisplayed(self, value):
        self._setProperty('GridLinesMgr.equinoxJ2000PointsDisplayed', value)
    @property
    def gridLinesMgr_equinoxPointsColor(self):
        """GridLinesMgr.equinoxPointsColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.equinoxPointsColor')
    @gridLinesMgr_equinoxPointsColor.setter
    def gridLinesMgr_equinoxPointsColor(self, value):
        self._setProperty('GridLinesMgr.equinoxPointsColor', value)
    @property
    def gridLinesMgr_equinoxPointsDisplayed(self):
        """GridLinesMgr.equinoxPointsDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.equinoxPointsDisplayed')
    @gridLinesMgr_equinoxPointsDisplayed.setter
    def gridLinesMgr_equinoxPointsDisplayed(self, value):
        self._setProperty('GridLinesMgr.equinoxPointsDisplayed', value)
    @property
    def gridLinesMgr_fixedEquatorGridColor(self):
        """GridLinesMgr.fixedEquatorGridColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.fixedEquatorGridColor')
    @gridLinesMgr_fixedEquatorGridColor.setter
    def gridLinesMgr_fixedEquatorGridColor(self, value):
        self._setProperty('GridLinesMgr.fixedEquatorGridColor', value)
    @property
    def gridLinesMgr_fixedEquatorGridDisplayed(self):
        """GridLinesMgr.fixedEquatorGridDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.fixedEquatorGridDisplayed')
    @gridLinesMgr_fixedEquatorGridDisplayed.setter
    def gridLinesMgr_fixedEquatorGridDisplayed(self, value):
        self._setProperty('GridLinesMgr.fixedEquatorGridDisplayed', value)
    @property
    def gridLinesMgr_fixedEquatorLineColor(self):
        """GridLinesMgr.fixedEquatorLineColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.fixedEquatorLineColor')
    @gridLinesMgr_fixedEquatorLineColor.setter
    def gridLinesMgr_fixedEquatorLineColor(self, value):
        self._setProperty('GridLinesMgr.fixedEquatorLineColor', value)
    @property
    def gridLinesMgr_fixedEquatorLineDisplayed(self):
        """GridLinesMgr.fixedEquatorLineDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.fixedEquatorLineDisplayed')
    @gridLinesMgr_fixedEquatorLineDisplayed.setter
    def gridLinesMgr_fixedEquatorLineDisplayed(self, value):
        self._setProperty('GridLinesMgr.fixedEquatorLineDisplayed', value)
    @property
    def gridLinesMgr_fixedEquatorPartsDisplayed(self):
        """GridLinesMgr.fixedEquatorPartsDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.fixedEquatorPartsDisplayed')
    @gridLinesMgr_fixedEquatorPartsDisplayed.setter
    def gridLinesMgr_fixedEquatorPartsDisplayed(self, value):
        self._setProperty('GridLinesMgr.fixedEquatorPartsDisplayed', value)
    @property
    def gridLinesMgr_fixedEquatorPartsLabeled(self):
        """GridLinesMgr.fixedEquatorPartsLabeled (bool)"""
        return self._getProperty('GridLinesMgr.fixedEquatorPartsLabeled')
    @gridLinesMgr_fixedEquatorPartsLabeled.setter
    def gridLinesMgr_fixedEquatorPartsLabeled(self, value):
        self._setProperty('GridLinesMgr.fixedEquatorPartsLabeled', value)
    @property
    def gridLinesMgr_galacticCenterColor(self):
        """GridLinesMgr.galacticCenterColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.galacticCenterColor')
    @gridLinesMgr_galacticCenterColor.setter
    def gridLinesMgr_galacticCenterColor(self, value):
        self._setProperty('GridLinesMgr.galacticCenterColor', value)
    @property
    def gridLinesMgr_galacticCenterDisplayed(self):
        """GridLinesMgr.galacticCenterDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.galacticCenterDisplayed')
    @gridLinesMgr_galacticCenterDisplayed.setter
    def gridLinesMgr_galacticCenterDisplayed(self, value):
        self._setProperty('GridLinesMgr.galacticCenterDisplayed', value)
    @property
    def gridLinesMgr_galacticEquatorLineColor(self):
        """GridLinesMgr.galacticEquatorLineColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.galacticEquatorLineColor')
    @gridLinesMgr_galacticEquatorLineColor.setter
    def gridLinesMgr_galacticEquatorLineColor(self, value):
        self._setProperty('GridLinesMgr.galacticEquatorLineColor', value)
    @property
    def gridLinesMgr_galacticEquatorLineDisplayed(self):
        """GridLinesMgr.galacticEquatorLineDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.galacticEquatorLineDisplayed')
    @gridLinesMgr_galacticEquatorLineDisplayed.setter
    def gridLinesMgr_galacticEquatorLineDisplayed(self, value):
        self._setProperty('GridLinesMgr.galacticEquatorLineDisplayed', value)
    @property
    def gridLinesMgr_galacticEquatorPartsDisplayed(self):
        """GridLinesMgr.galacticEquatorPartsDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.galacticEquatorPartsDisplayed')
    @gridLinesMgr_galacticEquatorPartsDisplayed.setter
    def gridLinesMgr_galacticEquatorPartsDisplayed(self, value):
        self._setProperty('GridLinesMgr.galacticEquatorPartsDisplayed', value)
    @property
    def gridLinesMgr_galacticEquatorPartsLabeled(self):
        """GridLinesMgr.galacticEquatorPartsLabeled (bool)"""
        return self._getProperty('GridLinesMgr.galacticEquatorPartsLabeled')
    @gridLinesMgr_galacticEquatorPartsLabeled.setter
    def gridLinesMgr_galacticEquatorPartsLabeled(self, value):
        self._setProperty('GridLinesMgr.galacticEquatorPartsLabeled', value)
    @property
    def gridLinesMgr_galacticGridColor(self):
        """GridLinesMgr.galacticGridColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.galacticGridColor')
    @gridLinesMgr_galacticGridColor.setter
    def gridLinesMgr_galacticGridColor(self, value):
        self._setProperty('GridLinesMgr.galacticGridColor', value)
    @property
    def gridLinesMgr_galacticGridDisplayed(self):
        """GridLinesMgr.galacticGridDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.galacticGridDisplayed')
    @gridLinesMgr_galacticGridDisplayed.setter
    def gridLinesMgr_galacticGridDisplayed(self, value):
        self._setProperty('GridLinesMgr.galacticGridDisplayed', value)
    @property
    def gridLinesMgr_galacticPolesColor(self):
        """GridLinesMgr.galacticPolesColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.galacticPolesColor')
    @gridLinesMgr_galacticPolesColor.setter
    def gridLinesMgr_galacticPolesColor(self, value):
        self._setProperty('GridLinesMgr.galacticPolesColor', value)
    @property
    def gridLinesMgr_galacticPolesDisplayed(self):
        """GridLinesMgr.galacticPolesDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.galacticPolesDisplayed')
    @gridLinesMgr_galacticPolesDisplayed.setter
    def gridLinesMgr_galacticPolesDisplayed(self, value):
        self._setProperty('GridLinesMgr.galacticPolesDisplayed', value)
    @property
    def gridLinesMgr_gridlinesDisplayed(self):
        """GridLinesMgr.gridlinesDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.gridlinesDisplayed')
    @gridLinesMgr_gridlinesDisplayed.setter
    def gridLinesMgr_gridlinesDisplayed(self, value):
        self._setProperty('GridLinesMgr.gridlinesDisplayed', value)
    @property
    def gridLinesMgr_horizonLineColor(self):
        """GridLinesMgr.horizonLineColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.horizonLineColor')
    @gridLinesMgr_horizonLineColor.setter
    def gridLinesMgr_horizonLineColor(self, value):
        self._setProperty('GridLinesMgr.horizonLineColor', value)
    @property
    def gridLinesMgr_horizonLineDisplayed(self):
        """GridLinesMgr.horizonLineDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.horizonLineDisplayed')
    @gridLinesMgr_horizonLineDisplayed.setter
    def gridLinesMgr_horizonLineDisplayed(self, value):
        self._setProperty('GridLinesMgr.horizonLineDisplayed', value)
    @property
    def gridLinesMgr_horizonPartsDisplayed(self):
        """GridLinesMgr.horizonPartsDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.horizonPartsDisplayed')
    @gridLinesMgr_horizonPartsDisplayed.setter
    def gridLinesMgr_horizonPartsDisplayed(self, value):
        self._setProperty('GridLinesMgr.horizonPartsDisplayed', value)
    @property
    def gridLinesMgr_horizonPartsLabeled(self):
        """GridLinesMgr.horizonPartsLabeled (bool)"""
        return self._getProperty('GridLinesMgr.horizonPartsLabeled')
    @gridLinesMgr_horizonPartsLabeled.setter
    def gridLinesMgr_horizonPartsLabeled(self, value):
        self._setProperty('GridLinesMgr.horizonPartsLabeled', value)
    @property
    def gridLinesMgr_invariablePlaneLineColor(self):
        """GridLinesMgr.invariablePlaneLineColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.invariablePlaneLineColor')
    @gridLinesMgr_invariablePlaneLineColor.setter
    def gridLinesMgr_invariablePlaneLineColor(self, value):
        self._setProperty('GridLinesMgr.invariablePlaneLineColor', value)
    @property
    def gridLinesMgr_invariablePlaneLineDisplayed(self):
        """GridLinesMgr.invariablePlaneLineDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.invariablePlaneLineDisplayed')
    @gridLinesMgr_invariablePlaneLineDisplayed.setter
    def gridLinesMgr_invariablePlaneLineDisplayed(self, value):
        self._setProperty('GridLinesMgr.invariablePlaneLineDisplayed', value)
    @property
    def gridLinesMgr_lineThickness(self):
        """GridLinesMgr.lineThickness (float)"""
        return self._getProperty('GridLinesMgr.lineThickness')
    @gridLinesMgr_lineThickness.setter
    def gridLinesMgr_lineThickness(self, value):
        self._setProperty('GridLinesMgr.lineThickness', value)
    @property
    def gridLinesMgr_longitudeLineColor(self):
        """GridLinesMgr.longitudeLineColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.longitudeLineColor')
    @gridLinesMgr_longitudeLineColor.setter
    def gridLinesMgr_longitudeLineColor(self, value):
        self._setProperty('GridLinesMgr.longitudeLineColor', value)
    @property
    def gridLinesMgr_longitudeLineDisplayed(self):
        """GridLinesMgr.longitudeLineDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.longitudeLineDisplayed')
    @gridLinesMgr_longitudeLineDisplayed.setter
    def gridLinesMgr_longitudeLineDisplayed(self, value):
        self._setProperty('GridLinesMgr.longitudeLineDisplayed', value)
    @property
    def gridLinesMgr_longitudePartsDisplayed(self):
        """GridLinesMgr.longitudePartsDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.longitudePartsDisplayed')
    @gridLinesMgr_longitudePartsDisplayed.setter
    def gridLinesMgr_longitudePartsDisplayed(self, value):
        self._setProperty('GridLinesMgr.longitudePartsDisplayed', value)
    @property
    def gridLinesMgr_longitudePartsLabeled(self):
        """GridLinesMgr.longitudePartsLabeled (bool)"""
        return self._getProperty('GridLinesMgr.longitudePartsLabeled')
    @gridLinesMgr_longitudePartsLabeled.setter
    def gridLinesMgr_longitudePartsLabeled(self, value):
        self._setProperty('GridLinesMgr.longitudePartsLabeled', value)
    @property
    def gridLinesMgr_meridianLineColor(self):
        """GridLinesMgr.meridianLineColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.meridianLineColor')
    @gridLinesMgr_meridianLineColor.setter
    def gridLinesMgr_meridianLineColor(self, value):
        self._setProperty('GridLinesMgr.meridianLineColor', value)
    @property
    def gridLinesMgr_meridianLineDisplayed(self):
        """GridLinesMgr.meridianLineDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.meridianLineDisplayed')
    @gridLinesMgr_meridianLineDisplayed.setter
    def gridLinesMgr_meridianLineDisplayed(self, value):
        self._setProperty('GridLinesMgr.meridianLineDisplayed', value)
    @property
    def gridLinesMgr_meridianPartsDisplayed(self):
        """GridLinesMgr.meridianPartsDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.meridianPartsDisplayed')
    @gridLinesMgr_meridianPartsDisplayed.setter
    def gridLinesMgr_meridianPartsDisplayed(self, value):
        self._setProperty('GridLinesMgr.meridianPartsDisplayed', value)
    @property
    def gridLinesMgr_meridianPartsLabeled(self):
        """GridLinesMgr.meridianPartsLabeled (bool)"""
        return self._getProperty('GridLinesMgr.meridianPartsLabeled')
    @gridLinesMgr_meridianPartsLabeled.setter
    def gridLinesMgr_meridianPartsLabeled(self, value):
        self._setProperty('GridLinesMgr.meridianPartsLabeled', value)
    @property
    def gridLinesMgr_partThickness(self):
        """GridLinesMgr.partThickness (float)"""
        return self._getProperty('GridLinesMgr.partThickness')
    @gridLinesMgr_partThickness.setter
    def gridLinesMgr_partThickness(self, value):
        self._setProperty('GridLinesMgr.partThickness', value)
    @property
    def gridLinesMgr_penumbraCircleColor(self):
        """GridLinesMgr.penumbraCircleColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.penumbraCircleColor')
    @gridLinesMgr_penumbraCircleColor.setter
    def gridLinesMgr_penumbraCircleColor(self, value):
        self._setProperty('GridLinesMgr.penumbraCircleColor', value)
    @property
    def gridLinesMgr_penumbraCircleDisplayed(self):
        """GridLinesMgr.penumbraCircleDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.penumbraCircleDisplayed')
    @gridLinesMgr_penumbraCircleDisplayed.setter
    def gridLinesMgr_penumbraCircleDisplayed(self, value):
        self._setProperty('GridLinesMgr.penumbraCircleDisplayed', value)
    @property
    def gridLinesMgr_precessionCirclesColor(self):
        """GridLinesMgr.precessionCirclesColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.precessionCirclesColor')
    @gridLinesMgr_precessionCirclesColor.setter
    def gridLinesMgr_precessionCirclesColor(self, value):
        self._setProperty('GridLinesMgr.precessionCirclesColor', value)
    @property
    def gridLinesMgr_precessionCirclesDisplayed(self):
        """GridLinesMgr.precessionCirclesDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.precessionCirclesDisplayed')
    @gridLinesMgr_precessionCirclesDisplayed.setter
    def gridLinesMgr_precessionCirclesDisplayed(self, value):
        self._setProperty('GridLinesMgr.precessionCirclesDisplayed', value)
    @property
    def gridLinesMgr_precessionPartsDisplayed(self):
        """GridLinesMgr.precessionPartsDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.precessionPartsDisplayed')
    @gridLinesMgr_precessionPartsDisplayed.setter
    def gridLinesMgr_precessionPartsDisplayed(self, value):
        self._setProperty('GridLinesMgr.precessionPartsDisplayed', value)
    @property
    def gridLinesMgr_precessionPartsLabeled(self):
        """GridLinesMgr.precessionPartsLabeled (bool)"""
        return self._getProperty('GridLinesMgr.precessionPartsLabeled')
    @gridLinesMgr_precessionPartsLabeled.setter
    def gridLinesMgr_precessionPartsLabeled(self, value):
        self._setProperty('GridLinesMgr.precessionPartsLabeled', value)
    @property
    def gridLinesMgr_primeVerticalLineColor(self):
        """GridLinesMgr.primeVerticalLineColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.primeVerticalLineColor')
    @gridLinesMgr_primeVerticalLineColor.setter
    def gridLinesMgr_primeVerticalLineColor(self, value):
        self._setProperty('GridLinesMgr.primeVerticalLineColor', value)
    @property
    def gridLinesMgr_primeVerticalLineDisplayed(self):
        """GridLinesMgr.primeVerticalLineDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.primeVerticalLineDisplayed')
    @gridLinesMgr_primeVerticalLineDisplayed.setter
    def gridLinesMgr_primeVerticalLineDisplayed(self, value):
        self._setProperty('GridLinesMgr.primeVerticalLineDisplayed', value)
    @property
    def gridLinesMgr_primeVerticalPartsDisplayed(self):
        """GridLinesMgr.primeVerticalPartsDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.primeVerticalPartsDisplayed')
    @gridLinesMgr_primeVerticalPartsDisplayed.setter
    def gridLinesMgr_primeVerticalPartsDisplayed(self, value):
        self._setProperty('GridLinesMgr.primeVerticalPartsDisplayed', value)
    @property
    def gridLinesMgr_primeVerticalPartsLabeled(self):
        """GridLinesMgr.primeVerticalPartsLabeled (bool)"""
        return self._getProperty('GridLinesMgr.primeVerticalPartsLabeled')
    @gridLinesMgr_primeVerticalPartsLabeled.setter
    def gridLinesMgr_primeVerticalPartsLabeled(self, value):
        self._setProperty('GridLinesMgr.primeVerticalPartsLabeled', value)
    @property
    def gridLinesMgr_quadratureLineColor(self):
        """GridLinesMgr.quadratureLineColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.quadratureLineColor')
    @gridLinesMgr_quadratureLineColor.setter
    def gridLinesMgr_quadratureLineColor(self, value):
        self._setProperty('GridLinesMgr.quadratureLineColor', value)
    @property
    def gridLinesMgr_quadratureLineDisplayed(self):
        """GridLinesMgr.quadratureLineDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.quadratureLineDisplayed')
    @gridLinesMgr_quadratureLineDisplayed.setter
    def gridLinesMgr_quadratureLineDisplayed(self, value):
        self._setProperty('GridLinesMgr.quadratureLineDisplayed', value)
    @property
    def gridLinesMgr_solarEquatorLineColor(self):
        """GridLinesMgr.solarEquatorLineColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.solarEquatorLineColor')
    @gridLinesMgr_solarEquatorLineColor.setter
    def gridLinesMgr_solarEquatorLineColor(self, value):
        self._setProperty('GridLinesMgr.solarEquatorLineColor', value)
    @property
    def gridLinesMgr_solarEquatorLineDisplayed(self):
        """GridLinesMgr.solarEquatorLineDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.solarEquatorLineDisplayed')
    @gridLinesMgr_solarEquatorLineDisplayed.setter
    def gridLinesMgr_solarEquatorLineDisplayed(self, value):
        self._setProperty('GridLinesMgr.solarEquatorLineDisplayed', value)
    @property
    def gridLinesMgr_solarEquatorPartsDisplayed(self):
        """GridLinesMgr.solarEquatorPartsDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.solarEquatorPartsDisplayed')
    @gridLinesMgr_solarEquatorPartsDisplayed.setter
    def gridLinesMgr_solarEquatorPartsDisplayed(self, value):
        self._setProperty('GridLinesMgr.solarEquatorPartsDisplayed', value)
    @property
    def gridLinesMgr_solarEquatorPartsLabeled(self):
        """GridLinesMgr.solarEquatorPartsLabeled (bool)"""
        return self._getProperty('GridLinesMgr.solarEquatorPartsLabeled')
    @gridLinesMgr_solarEquatorPartsLabeled.setter
    def gridLinesMgr_solarEquatorPartsLabeled(self, value):
        self._setProperty('GridLinesMgr.solarEquatorPartsLabeled', value)
    @property
    def gridLinesMgr_solsticeJ2000PointsColor(self):
        """GridLinesMgr.solsticeJ2000PointsColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.solsticeJ2000PointsColor')
    @gridLinesMgr_solsticeJ2000PointsColor.setter
    def gridLinesMgr_solsticeJ2000PointsColor(self, value):
        self._setProperty('GridLinesMgr.solsticeJ2000PointsColor', value)
    @property
    def gridLinesMgr_solsticeJ2000PointsDisplayed(self):
        """GridLinesMgr.solsticeJ2000PointsDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.solsticeJ2000PointsDisplayed')
    @gridLinesMgr_solsticeJ2000PointsDisplayed.setter
    def gridLinesMgr_solsticeJ2000PointsDisplayed(self, value):
        self._setProperty('GridLinesMgr.solsticeJ2000PointsDisplayed', value)
    @property
    def gridLinesMgr_solsticePointsColor(self):
        """GridLinesMgr.solsticePointsColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.solsticePointsColor')
    @gridLinesMgr_solsticePointsColor.setter
    def gridLinesMgr_solsticePointsColor(self, value):
        self._setProperty('GridLinesMgr.solsticePointsColor', value)
    @property
    def gridLinesMgr_solsticePointsDisplayed(self):
        """GridLinesMgr.solsticePointsDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.solsticePointsDisplayed')
    @gridLinesMgr_solsticePointsDisplayed.setter
    def gridLinesMgr_solsticePointsDisplayed(self, value):
        self._setProperty('GridLinesMgr.solsticePointsDisplayed', value)
    @property
    def gridLinesMgr_supergalacticEquatorLineColor(self):
        """GridLinesMgr.supergalacticEquatorLineColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.supergalacticEquatorLineColor')
    @gridLinesMgr_supergalacticEquatorLineColor.setter
    def gridLinesMgr_supergalacticEquatorLineColor(self, value):
        self._setProperty('GridLinesMgr.supergalacticEquatorLineColor', value)
    @property
    def gridLinesMgr_supergalacticEquatorLineDisplayed(self):
        """GridLinesMgr.supergalacticEquatorLineDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.supergalacticEquatorLineDisplayed')
    @gridLinesMgr_supergalacticEquatorLineDisplayed.setter
    def gridLinesMgr_supergalacticEquatorLineDisplayed(self, value):
        self._setProperty('GridLinesMgr.supergalacticEquatorLineDisplayed', value)
    @property
    def gridLinesMgr_supergalacticEquatorPartsDisplayed(self):
        """GridLinesMgr.supergalacticEquatorPartsDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.supergalacticEquatorPartsDisplayed')
    @gridLinesMgr_supergalacticEquatorPartsDisplayed.setter
    def gridLinesMgr_supergalacticEquatorPartsDisplayed(self, value):
        self._setProperty('GridLinesMgr.supergalacticEquatorPartsDisplayed', value)
    @property
    def gridLinesMgr_supergalacticEquatorPartsLabeled(self):
        """GridLinesMgr.supergalacticEquatorPartsLabeled (bool)"""
        return self._getProperty('GridLinesMgr.supergalacticEquatorPartsLabeled')
    @gridLinesMgr_supergalacticEquatorPartsLabeled.setter
    def gridLinesMgr_supergalacticEquatorPartsLabeled(self, value):
        self._setProperty('GridLinesMgr.supergalacticEquatorPartsLabeled', value)
    @property
    def gridLinesMgr_supergalacticGridColor(self):
        """GridLinesMgr.supergalacticGridColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.supergalacticGridColor')
    @gridLinesMgr_supergalacticGridColor.setter
    def gridLinesMgr_supergalacticGridColor(self, value):
        self._setProperty('GridLinesMgr.supergalacticGridColor', value)
    @property
    def gridLinesMgr_supergalacticGridDisplayed(self):
        """GridLinesMgr.supergalacticGridDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.supergalacticGridDisplayed')
    @gridLinesMgr_supergalacticGridDisplayed.setter
    def gridLinesMgr_supergalacticGridDisplayed(self, value):
        self._setProperty('GridLinesMgr.supergalacticGridDisplayed', value)
    @property
    def gridLinesMgr_supergalacticPolesColor(self):
        """GridLinesMgr.supergalacticPolesColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.supergalacticPolesColor')
    @gridLinesMgr_supergalacticPolesColor.setter
    def gridLinesMgr_supergalacticPolesColor(self, value):
        self._setProperty('GridLinesMgr.supergalacticPolesColor', value)
    @property
    def gridLinesMgr_supergalacticPolesDisplayed(self):
        """GridLinesMgr.supergalacticPolesDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.supergalacticPolesDisplayed')
    @gridLinesMgr_supergalacticPolesDisplayed.setter
    def gridLinesMgr_supergalacticPolesDisplayed(self, value):
        self._setProperty('GridLinesMgr.supergalacticPolesDisplayed', value)
    @property
    def gridLinesMgr_umbraCenterPointDisplayed(self):
        """GridLinesMgr.umbraCenterPointDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.umbraCenterPointDisplayed')
    @gridLinesMgr_umbraCenterPointDisplayed.setter
    def gridLinesMgr_umbraCenterPointDisplayed(self, value):
        self._setProperty('GridLinesMgr.umbraCenterPointDisplayed', value)
    @property
    def gridLinesMgr_umbraCircleColor(self):
        """GridLinesMgr.umbraCircleColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.umbraCircleColor')
    @gridLinesMgr_umbraCircleColor.setter
    def gridLinesMgr_umbraCircleColor(self, value):
        self._setProperty('GridLinesMgr.umbraCircleColor', value)
    @property
    def gridLinesMgr_umbraCircleDisplayed(self):
        """GridLinesMgr.umbraCircleDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.umbraCircleDisplayed')
    @gridLinesMgr_umbraCircleDisplayed.setter
    def gridLinesMgr_umbraCircleDisplayed(self, value):
        self._setProperty('GridLinesMgr.umbraCircleDisplayed', value)
    @property
    def gridLinesMgr_zenithNadirColor(self):
        """GridLinesMgr.zenithNadirColor (Vector3<float>)"""
        return self._getProperty('GridLinesMgr.zenithNadirColor')
    @gridLinesMgr_zenithNadirColor.setter
    def gridLinesMgr_zenithNadirColor(self, value):
        self._setProperty('GridLinesMgr.zenithNadirColor', value)
    @property
    def gridLinesMgr_zenithNadirDisplayed(self):
        """GridLinesMgr.zenithNadirDisplayed (bool)"""
        return self._getProperty('GridLinesMgr.zenithNadirDisplayed')
    @gridLinesMgr_zenithNadirDisplayed.setter
    def gridLinesMgr_zenithNadirDisplayed(self, value):
        self._setProperty('GridLinesMgr.zenithNadirDisplayed', value)
    @property
    def hipsMgr_flagShow(self):
        """HipsMgr.flagShow (bool)"""
        return self._getProperty('HipsMgr.flagShow')
    @hipsMgr_flagShow.setter
    def hipsMgr_flagShow(self, value):
        self._setProperty('HipsMgr.flagShow', value)
    @property
    def hipsMgr_loaded(self):
        """HipsMgr.loaded (bool)"""
        return self._getProperty('HipsMgr.loaded')
    @hipsMgr_loaded.setter
    def hipsMgr_loaded(self, value):
        self._setProperty('HipsMgr.loaded', value)
    @property
    def hipsMgr_state(self):
        """HipsMgr.state (HipsMgr::State)"""
        return self._getProperty('HipsMgr.state')
    @hipsMgr_state.setter
    def hipsMgr_state(self, value):
        self._setProperty('HipsMgr.state', value)
    @property
    def hipsMgr_surveys(self):
        """HipsMgr.surveys (QList<QSharedPointer<HipsSurvey>>)"""
        return self._getProperty('HipsMgr.surveys')
    @hipsMgr_surveys.setter
    def hipsMgr_surveys(self, value):
        self._setProperty('HipsMgr.surveys', value)
    @property
    def landscapeMgr_allLandscapeNames(self):
        """LandscapeMgr.allLandscapeNames (QStringList)"""
        return self._getProperty('LandscapeMgr.allLandscapeNames')
    @landscapeMgr_allLandscapeNames.setter
    def landscapeMgr_allLandscapeNames(self, value):
        self._setProperty('LandscapeMgr.allLandscapeNames', value)
    @property
    def landscapeMgr_atmosphereDisplayed(self):
        """LandscapeMgr.atmosphereDisplayed (bool)"""
        return self._getProperty('LandscapeMgr.atmosphereDisplayed')
    @landscapeMgr_atmosphereDisplayed.setter
    def landscapeMgr_atmosphereDisplayed(self, value):
        self._setProperty('LandscapeMgr.atmosphereDisplayed', value)
    @property
    def landscapeMgr_atmosphereEclipseSimulationQuality(self):
        """LandscapeMgr.atmosphereEclipseSimulationQuality (int)"""
        return self._getProperty('LandscapeMgr.atmosphereEclipseSimulationQuality')
    @landscapeMgr_atmosphereEclipseSimulationQuality.setter
    def landscapeMgr_atmosphereEclipseSimulationQuality(self, value):
        self._setProperty('LandscapeMgr.atmosphereEclipseSimulationQuality', value)
    @property
    def landscapeMgr_atmosphereModel(self):
        """LandscapeMgr.atmosphereModel (QString)"""
        return self._getProperty('LandscapeMgr.atmosphereModel')
    @landscapeMgr_atmosphereModel.setter
    def landscapeMgr_atmosphereModel(self, value):
        self._setProperty('LandscapeMgr.atmosphereModel', value)
    @property
    def landscapeMgr_atmosphereModelPath(self):
        """LandscapeMgr.atmosphereModelPath (QString)"""
        return self._getProperty('LandscapeMgr.atmosphereModelPath')
    @landscapeMgr_atmosphereModelPath.setter
    def landscapeMgr_atmosphereModelPath(self, value):
        self._setProperty('LandscapeMgr.atmosphereModelPath', value)
    @property
    def landscapeMgr_atmosphereNoScatter(self):
        """LandscapeMgr.atmosphereNoScatter (bool)"""
        return self._getProperty('LandscapeMgr.atmosphereNoScatter')
    @landscapeMgr_atmosphereNoScatter.setter
    def landscapeMgr_atmosphereNoScatter(self, value):
        self._setProperty('LandscapeMgr.atmosphereNoScatter', value)
    @property
    def landscapeMgr_atmosphereShowMySkyStatusText(self):
        """LandscapeMgr.atmosphereShowMySkyStatusText (QString)"""
        return self._getProperty('LandscapeMgr.atmosphereShowMySkyStatusText')
    @landscapeMgr_atmosphereShowMySkyStatusText.setter
    def landscapeMgr_atmosphereShowMySkyStatusText(self, value):
        self._setProperty('LandscapeMgr.atmosphereShowMySkyStatusText', value)
    @property
    def landscapeMgr_atmosphereShowMySkyStoppedWithError(self):
        """LandscapeMgr.atmosphereShowMySkyStoppedWithError (bool)"""
        return self._getProperty('LandscapeMgr.atmosphereShowMySkyStoppedWithError')
    @landscapeMgr_atmosphereShowMySkyStoppedWithError.setter
    def landscapeMgr_atmosphereShowMySkyStoppedWithError(self, value):
        self._setProperty('LandscapeMgr.atmosphereShowMySkyStoppedWithError', value)
    @property
    def landscapeMgr_cardinalPointsColor(self):
        """LandscapeMgr.cardinalPointsColor (Vector3<float>)"""
        return self._getProperty('LandscapeMgr.cardinalPointsColor')
    @landscapeMgr_cardinalPointsColor.setter
    def landscapeMgr_cardinalPointsColor(self, value):
        self._setProperty('LandscapeMgr.cardinalPointsColor', value)
    @property
    def landscapeMgr_cardinalPointsDisplayed(self):
        """LandscapeMgr.cardinalPointsDisplayed (bool)"""
        return self._getProperty('LandscapeMgr.cardinalPointsDisplayed')
    @landscapeMgr_cardinalPointsDisplayed.setter
    def landscapeMgr_cardinalPointsDisplayed(self, value):
        self._setProperty('LandscapeMgr.cardinalPointsDisplayed', value)
    @property
    def landscapeMgr_currentLandscapeHtmlDescription(self):
        """LandscapeMgr.currentLandscapeHtmlDescription (QString)"""
        return self._getProperty('LandscapeMgr.currentLandscapeHtmlDescription')
    @landscapeMgr_currentLandscapeHtmlDescription.setter
    def landscapeMgr_currentLandscapeHtmlDescription(self, value):
        self._setProperty('LandscapeMgr.currentLandscapeHtmlDescription', value)
    @property
    def landscapeMgr_currentLandscapeID(self):
        """LandscapeMgr.currentLandscapeID (QString)"""
        return self._getProperty('LandscapeMgr.currentLandscapeID')
    @landscapeMgr_currentLandscapeID.setter
    def landscapeMgr_currentLandscapeID(self, value):
        self._setProperty('LandscapeMgr.currentLandscapeID', value)
    @property
    def landscapeMgr_currentLandscapeName(self):
        """LandscapeMgr.currentLandscapeName (QString)"""
        return self._getProperty('LandscapeMgr.currentLandscapeName')
    @landscapeMgr_currentLandscapeName.setter
    def landscapeMgr_currentLandscapeName(self, value):
        self._setProperty('LandscapeMgr.currentLandscapeName', value)
    @property
    def landscapeMgr_defaultAtmosphereModelPath(self):
        """LandscapeMgr.defaultAtmosphereModelPath (QString)"""
        return self._getProperty('LandscapeMgr.defaultAtmosphereModelPath')
    @landscapeMgr_defaultAtmosphereModelPath.setter
    def landscapeMgr_defaultAtmosphereModelPath(self, value):
        self._setProperty('LandscapeMgr.defaultAtmosphereModelPath', value)
    @property
    def landscapeMgr_defaultLandscapeID(self):
        """LandscapeMgr.defaultLandscapeID (QString)"""
        return self._getProperty('LandscapeMgr.defaultLandscapeID')
    @landscapeMgr_defaultLandscapeID.setter
    def landscapeMgr_defaultLandscapeID(self, value):
        self._setProperty('LandscapeMgr.defaultLandscapeID', value)
    @property
    def landscapeMgr_defaultMinimalBrightness(self):
        """LandscapeMgr.defaultMinimalBrightness (double)"""
        return self._getProperty('LandscapeMgr.defaultMinimalBrightness')
    @landscapeMgr_defaultMinimalBrightness.setter
    def landscapeMgr_defaultMinimalBrightness(self, value):
        self._setProperty('LandscapeMgr.defaultMinimalBrightness', value)
    @property
    def landscapeMgr_flagAtmosphereMultipleScattering(self):
        """LandscapeMgr.flagAtmosphereMultipleScattering (bool)"""
        return self._getProperty('LandscapeMgr.flagAtmosphereMultipleScattering')
    @landscapeMgr_flagAtmosphereMultipleScattering.setter
    def landscapeMgr_flagAtmosphereMultipleScattering(self, value):
        self._setProperty('LandscapeMgr.flagAtmosphereMultipleScattering', value)
    @property
    def landscapeMgr_flagAtmosphereSingleScattering(self):
        """LandscapeMgr.flagAtmosphereSingleScattering (bool)"""
        return self._getProperty('LandscapeMgr.flagAtmosphereSingleScattering')
    @landscapeMgr_flagAtmosphereSingleScattering.setter
    def landscapeMgr_flagAtmosphereSingleScattering(self, value):
        self._setProperty('LandscapeMgr.flagAtmosphereSingleScattering', value)
    @property
    def landscapeMgr_flagAtmosphereZeroOrderScattering(self):
        """LandscapeMgr.flagAtmosphereZeroOrderScattering (bool)"""
        return self._getProperty('LandscapeMgr.flagAtmosphereZeroOrderScattering')
    @landscapeMgr_flagAtmosphereZeroOrderScattering.setter
    def landscapeMgr_flagAtmosphereZeroOrderScattering(self, value):
        self._setProperty('LandscapeMgr.flagAtmosphereZeroOrderScattering', value)
    @property
    def landscapeMgr_flagEnvironmentAutoEnabling(self):
        """LandscapeMgr.flagEnvironmentAutoEnabling (bool)"""
        return self._getProperty('LandscapeMgr.flagEnvironmentAutoEnabling')
    @landscapeMgr_flagEnvironmentAutoEnabling.setter
    def landscapeMgr_flagEnvironmentAutoEnabling(self, value):
        self._setProperty('LandscapeMgr.flagEnvironmentAutoEnabling', value)
    @property
    def landscapeMgr_flagLandscapeAutoSelection(self):
        """LandscapeMgr.flagLandscapeAutoSelection (bool)"""
        return self._getProperty('LandscapeMgr.flagLandscapeAutoSelection')
    @landscapeMgr_flagLandscapeAutoSelection.setter
    def landscapeMgr_flagLandscapeAutoSelection(self, value):
        self._setProperty('LandscapeMgr.flagLandscapeAutoSelection', value)
    @property
    def landscapeMgr_flagLandscapeSetsLocation(self):
        """LandscapeMgr.flagLandscapeSetsLocation (bool)"""
        return self._getProperty('LandscapeMgr.flagLandscapeSetsLocation')
    @landscapeMgr_flagLandscapeSetsLocation.setter
    def landscapeMgr_flagLandscapeSetsLocation(self, value):
        self._setProperty('LandscapeMgr.flagLandscapeSetsLocation', value)
    @property
    def landscapeMgr_flagLandscapeSetsMinimalBrightness(self):
        """LandscapeMgr.flagLandscapeSetsMinimalBrightness (bool)"""
        return self._getProperty('LandscapeMgr.flagLandscapeSetsMinimalBrightness')
    @landscapeMgr_flagLandscapeSetsMinimalBrightness.setter
    def landscapeMgr_flagLandscapeSetsMinimalBrightness(self, value):
        self._setProperty('LandscapeMgr.flagLandscapeSetsMinimalBrightness', value)
    @property
    def landscapeMgr_flagLandscapeUseMinimalBrightness(self):
        """LandscapeMgr.flagLandscapeUseMinimalBrightness (bool)"""
        return self._getProperty('LandscapeMgr.flagLandscapeUseMinimalBrightness')
    @landscapeMgr_flagLandscapeUseMinimalBrightness.setter
    def landscapeMgr_flagLandscapeUseMinimalBrightness(self, value):
        self._setProperty('LandscapeMgr.flagLandscapeUseMinimalBrightness', value)
    @property
    def landscapeMgr_flagPolyLineDisplayedOnly(self):
        """LandscapeMgr.flagPolyLineDisplayedOnly (bool)"""
        return self._getProperty('LandscapeMgr.flagPolyLineDisplayedOnly')
    @landscapeMgr_flagPolyLineDisplayedOnly.setter
    def landscapeMgr_flagPolyLineDisplayedOnly(self, value):
        self._setProperty('LandscapeMgr.flagPolyLineDisplayedOnly', value)
    @property
    def landscapeMgr_flagUseLightPollutionFromDatabase(self):
        """LandscapeMgr.flagUseLightPollutionFromDatabase (bool)"""
        return self._getProperty('LandscapeMgr.flagUseLightPollutionFromDatabase')
    @landscapeMgr_flagUseLightPollutionFromDatabase.setter
    def landscapeMgr_flagUseLightPollutionFromDatabase(self, value):
        self._setProperty('LandscapeMgr.flagUseLightPollutionFromDatabase', value)
    @property
    def landscapeMgr_fogDisplayed(self):
        """LandscapeMgr.fogDisplayed (bool)"""
        return self._getProperty('LandscapeMgr.fogDisplayed')
    @landscapeMgr_fogDisplayed.setter
    def landscapeMgr_fogDisplayed(self, value):
        self._setProperty('LandscapeMgr.fogDisplayed', value)
    @property
    def landscapeMgr_illuminationDisplayed(self):
        """LandscapeMgr.illuminationDisplayed (bool)"""
        return self._getProperty('LandscapeMgr.illuminationDisplayed')
    @landscapeMgr_illuminationDisplayed.setter
    def landscapeMgr_illuminationDisplayed(self, value):
        self._setProperty('LandscapeMgr.illuminationDisplayed', value)
    @property
    def landscapeMgr_labelsDisplayed(self):
        """LandscapeMgr.labelsDisplayed (bool)"""
        return self._getProperty('LandscapeMgr.labelsDisplayed')
    @landscapeMgr_labelsDisplayed.setter
    def landscapeMgr_labelsDisplayed(self, value):
        self._setProperty('LandscapeMgr.labelsDisplayed', value)
    @property
    def landscapeMgr_landscapeDisplayed(self):
        """LandscapeMgr.landscapeDisplayed (bool)"""
        return self._getProperty('LandscapeMgr.landscapeDisplayed')
    @landscapeMgr_landscapeDisplayed.setter
    def landscapeMgr_landscapeDisplayed(self, value):
        self._setProperty('LandscapeMgr.landscapeDisplayed', value)
    @property
    def landscapeMgr_ordinal16WRPointsDisplayed(self):
        """LandscapeMgr.ordinal16WRPointsDisplayed (bool)"""
        return self._getProperty('LandscapeMgr.ordinal16WRPointsDisplayed')
    @landscapeMgr_ordinal16WRPointsDisplayed.setter
    def landscapeMgr_ordinal16WRPointsDisplayed(self, value):
        self._setProperty('LandscapeMgr.ordinal16WRPointsDisplayed', value)
    @property
    def landscapeMgr_ordinalPointsDisplayed(self):
        """LandscapeMgr.ordinalPointsDisplayed (bool)"""
        return self._getProperty('LandscapeMgr.ordinalPointsDisplayed')
    @landscapeMgr_ordinalPointsDisplayed.setter
    def landscapeMgr_ordinalPointsDisplayed(self, value):
        self._setProperty('LandscapeMgr.ordinalPointsDisplayed', value)
    @property
    def landscapeMgr_polyLineThickness(self):
        """LandscapeMgr.polyLineThickness (int)"""
        return self._getProperty('LandscapeMgr.polyLineThickness')
    @landscapeMgr_polyLineThickness.setter
    def landscapeMgr_polyLineThickness(self, value):
        self._setProperty('LandscapeMgr.polyLineThickness', value)
    @property
    def mainView_cursorTimeout(self):
        """MainView.cursorTimeout (double)"""
        return self._getProperty('MainView.cursorTimeout')
    @mainView_cursorTimeout.setter
    def mainView_cursorTimeout(self, value):
        self._setProperty('MainView.cursorTimeout', value)
    @property
    def mainView_customScreenshotHeight(self):
        """MainView.customScreenshotHeight (int)"""
        return self._getProperty('MainView.customScreenshotHeight')
    @mainView_customScreenshotHeight.setter
    def mainView_customScreenshotHeight(self, value):
        self._setProperty('MainView.customScreenshotHeight', value)
    @property
    def mainView_customScreenshotWidth(self):
        """MainView.customScreenshotWidth (int)"""
        return self._getProperty('MainView.customScreenshotWidth')
    @mainView_customScreenshotWidth.setter
    def mainView_customScreenshotWidth(self, value):
        self._setProperty('MainView.customScreenshotWidth', value)
    @property
    def mainView_flagCursorTimeout(self):
        """MainView.flagCursorTimeout (bool)"""
        return self._getProperty('MainView.flagCursorTimeout')
    @mainView_flagCursorTimeout.setter
    def mainView_flagCursorTimeout(self, value):
        self._setProperty('MainView.flagCursorTimeout', value)
    @property
    def mainView_flagInvertScreenShotColors(self):
        """MainView.flagInvertScreenShotColors (bool)"""
        return self._getProperty('MainView.flagInvertScreenShotColors')
    @mainView_flagInvertScreenShotColors.setter
    def mainView_flagInvertScreenShotColors(self, value):
        self._setProperty('MainView.flagInvertScreenShotColors', value)
    @property
    def mainView_flagOverwriteScreenshots(self):
        """MainView.flagOverwriteScreenshots (bool)"""
        return self._getProperty('MainView.flagOverwriteScreenshots')
    @mainView_flagOverwriteScreenshots.setter
    def mainView_flagOverwriteScreenshots(self, value):
        self._setProperty('MainView.flagOverwriteScreenshots', value)
    @property
    def mainView_flagScreenshotDateFileName(self):
        """MainView.flagScreenshotDateFileName (bool)"""
        return self._getProperty('MainView.flagScreenshotDateFileName')
    @mainView_flagScreenshotDateFileName.setter
    def mainView_flagScreenshotDateFileName(self, value):
        self._setProperty('MainView.flagScreenshotDateFileName', value)
    @property
    def mainView_flagUseCustomScreenshotSize(self):
        """MainView.flagUseCustomScreenshotSize (bool)"""
        return self._getProperty('MainView.flagUseCustomScreenshotSize')
    @mainView_flagUseCustomScreenshotSize.setter
    def mainView_flagUseCustomScreenshotSize(self, value):
        self._setProperty('MainView.flagUseCustomScreenshotSize', value)
    @property
    def mainView_fullScreen(self):
        """MainView.fullScreen (bool)"""
        return self._getProperty('MainView.fullScreen')
    @mainView_fullScreen.setter
    def mainView_fullScreen(self, value):
        self._setProperty('MainView.fullScreen', value)
    @property
    def mainView_screenShotFileMask(self):
        """MainView.screenShotFileMask (QString)"""
        return self._getProperty('MainView.screenShotFileMask')
    @mainView_screenShotFileMask.setter
    def mainView_screenShotFileMask(self, value):
        self._setProperty('MainView.screenShotFileMask', value)
    @property
    def mainView_screenShotFormat(self):
        """MainView.screenShotFormat (QString)"""
        return self._getProperty('MainView.screenShotFormat')
    @mainView_screenShotFormat.setter
    def mainView_screenShotFormat(self, value):
        self._setProperty('MainView.screenShotFormat', value)
    @property
    def mainView_screenshotDpi(self):
        """MainView.screenshotDpi (int)"""
        return self._getProperty('MainView.screenshotDpi')
    @mainView_screenshotDpi.setter
    def mainView_screenshotDpi(self, value):
        self._setProperty('MainView.screenshotDpi', value)
    @property
    def mainView_skyBackgroundColor(self):
        """MainView.skyBackgroundColor (Vector3<float>)"""
        return self._getProperty('MainView.skyBackgroundColor')
    @mainView_skyBackgroundColor.setter
    def mainView_skyBackgroundColor(self, value):
        self._setProperty('MainView.skyBackgroundColor', value)
    @property
    def meteorShowers_colorARC(self):
        """MeteorShowers.colorARC (Vector3<float>)"""
        return self._getProperty('MeteorShowers.colorARC')
    @meteorShowers_colorARC.setter
    def meteorShowers_colorARC(self, value):
        self._setProperty('MeteorShowers.colorARC', value)
    @property
    def meteorShowers_colorARG(self):
        """MeteorShowers.colorARG (Vector3<float>)"""
        return self._getProperty('MeteorShowers.colorARG')
    @meteorShowers_colorARG.setter
    def meteorShowers_colorARG(self, value):
        self._setProperty('MeteorShowers.colorARG', value)
    @property
    def meteorShowers_colorIR(self):
        """MeteorShowers.colorIR (Vector3<float>)"""
        return self._getProperty('MeteorShowers.colorIR')
    @meteorShowers_colorIR.setter
    def meteorShowers_colorIR(self, value):
        self._setProperty('MeteorShowers.colorIR', value)
    @property
    def meteorShowers_enableLabels(self):
        """MeteorShowers.enableLabels (bool)"""
        return self._getProperty('MeteorShowers.enableLabels')
    @meteorShowers_enableLabels.setter
    def meteorShowers_enableLabels(self, value):
        self._setProperty('MeteorShowers.enableLabels', value)
    @property
    def meteorShowers_enablePlugin(self):
        """MeteorShowers.enablePlugin (bool)"""
        return self._getProperty('MeteorShowers.enablePlugin')
    @meteorShowers_enablePlugin.setter
    def meteorShowers_enablePlugin(self, value):
        self._setProperty('MeteorShowers.enablePlugin', value)
    @property
    def milkyWay_color(self):
        """MilkyWay.color (Vector3<float>)"""
        return self._getProperty('MilkyWay.color')
    @milkyWay_color.setter
    def milkyWay_color(self, value):
        self._setProperty('MilkyWay.color', value)
    @property
    def milkyWay_flagMilkyWayDisplayed(self):
        """MilkyWay.flagMilkyWayDisplayed (bool)"""
        return self._getProperty('MilkyWay.flagMilkyWayDisplayed')
    @milkyWay_flagMilkyWayDisplayed.setter
    def milkyWay_flagMilkyWayDisplayed(self, value):
        self._setProperty('MilkyWay.flagMilkyWayDisplayed', value)
    @property
    def milkyWay_intensity(self):
        """MilkyWay.intensity (double)"""
        return self._getProperty('MilkyWay.intensity')
    @milkyWay_intensity.setter
    def milkyWay_intensity(self, value):
        self._setProperty('MilkyWay.intensity', value)
    @property
    def milkyWay_saturation(self):
        """MilkyWay.saturation (double)"""
        return self._getProperty('MilkyWay.saturation')
    @milkyWay_saturation.setter
    def milkyWay_saturation(self, value):
        self._setProperty('MilkyWay.saturation', value)
    @property
    def nebulaMgr_activeGalaxiesColor(self):
        """NebulaMgr.activeGalaxiesColor (Vector3<float>)"""
        return self._getProperty('NebulaMgr.activeGalaxiesColor')
    @nebulaMgr_activeGalaxiesColor.setter
    def nebulaMgr_activeGalaxiesColor(self, value):
        self._setProperty('NebulaMgr.activeGalaxiesColor', value)
    @property
    def nebulaMgr_bipolarNebulaeColor(self):
        """NebulaMgr.bipolarNebulaeColor (Vector3<float>)"""
        return self._getProperty('NebulaMgr.bipolarNebulaeColor')
    @nebulaMgr_bipolarNebulaeColor.setter
    def nebulaMgr_bipolarNebulaeColor(self, value):
        self._setProperty('NebulaMgr.bipolarNebulaeColor', value)
    @property
    def nebulaMgr_blLacObjectsColor(self):
        """NebulaMgr.blLacObjectsColor (Vector3<float>)"""
        return self._getProperty('NebulaMgr.blLacObjectsColor')
    @nebulaMgr_blLacObjectsColor.setter
    def nebulaMgr_blLacObjectsColor(self, value):
        self._setProperty('NebulaMgr.blLacObjectsColor', value)
    @property
    def nebulaMgr_blazarsColor(self):
        """NebulaMgr.blazarsColor (Vector3<float>)"""
        return self._getProperty('NebulaMgr.blazarsColor')
    @nebulaMgr_blazarsColor.setter
    def nebulaMgr_blazarsColor(self, value):
        self._setProperty('NebulaMgr.blazarsColor', value)
    @property
    def nebulaMgr_catalogFilters(self):
        """NebulaMgr.catalogFilters (int)"""
        return self._getProperty('NebulaMgr.catalogFilters')
    @nebulaMgr_catalogFilters.setter
    def nebulaMgr_catalogFilters(self, value):
        self._setProperty('NebulaMgr.catalogFilters', value)
    @property
    def nebulaMgr_circlesColor(self):
        """NebulaMgr.circlesColor (Vector3<float>)"""
        return self._getProperty('NebulaMgr.circlesColor')
    @nebulaMgr_circlesColor.setter
    def nebulaMgr_circlesColor(self, value):
        self._setProperty('NebulaMgr.circlesColor', value)
    @property
    def nebulaMgr_clusterWithNebulosityColor(self):
        """NebulaMgr.clusterWithNebulosityColor (Vector3<float>)"""
        return self._getProperty('NebulaMgr.clusterWithNebulosityColor')
    @nebulaMgr_clusterWithNebulosityColor.setter
    def nebulaMgr_clusterWithNebulosityColor(self, value):
        self._setProperty('NebulaMgr.clusterWithNebulosityColor', value)
    @property
    def nebulaMgr_clustersColor(self):
        """NebulaMgr.clustersColor (Vector3<float>)"""
        return self._getProperty('NebulaMgr.clustersColor')
    @nebulaMgr_clustersColor.setter
    def nebulaMgr_clustersColor(self, value):
        self._setProperty('NebulaMgr.clustersColor', value)
    @property
    def nebulaMgr_darkNebulaeColor(self):
        """NebulaMgr.darkNebulaeColor (Vector3<float>)"""
        return self._getProperty('NebulaMgr.darkNebulaeColor')
    @nebulaMgr_darkNebulaeColor.setter
    def nebulaMgr_darkNebulaeColor(self, value):
        self._setProperty('NebulaMgr.darkNebulaeColor', value)
    @property
    def nebulaMgr_emissionLineStarsColor(self):
        """NebulaMgr.emissionLineStarsColor (Vector3<float>)"""
        return self._getProperty('NebulaMgr.emissionLineStarsColor')
    @nebulaMgr_emissionLineStarsColor.setter
    def nebulaMgr_emissionLineStarsColor(self, value):
        self._setProperty('NebulaMgr.emissionLineStarsColor', value)
    @property
    def nebulaMgr_emissionNebulaeColor(self):
        """NebulaMgr.emissionNebulaeColor (Vector3<float>)"""
        return self._getProperty('NebulaMgr.emissionNebulaeColor')
    @nebulaMgr_emissionNebulaeColor.setter
    def nebulaMgr_emissionNebulaeColor(self, value):
        self._setProperty('NebulaMgr.emissionNebulaeColor', value)
    @property
    def nebulaMgr_emissionObjectsColor(self):
        """NebulaMgr.emissionObjectsColor (Vector3<float>)"""
        return self._getProperty('NebulaMgr.emissionObjectsColor')
    @nebulaMgr_emissionObjectsColor.setter
    def nebulaMgr_emissionObjectsColor(self, value):
        self._setProperty('NebulaMgr.emissionObjectsColor', value)
    @property
    def nebulaMgr_flagAdditionalNamesDisplayed(self):
        """NebulaMgr.flagAdditionalNamesDisplayed (bool)"""
        return self._getProperty('NebulaMgr.flagAdditionalNamesDisplayed')
    @nebulaMgr_flagAdditionalNamesDisplayed.setter
    def nebulaMgr_flagAdditionalNamesDisplayed(self, value):
        self._setProperty('NebulaMgr.flagAdditionalNamesDisplayed', value)
    @property
    def nebulaMgr_flagDesignationLabels(self):
        """NebulaMgr.flagDesignationLabels (bool)"""
        return self._getProperty('NebulaMgr.flagDesignationLabels')
    @nebulaMgr_flagDesignationLabels.setter
    def nebulaMgr_flagDesignationLabels(self, value):
        self._setProperty('NebulaMgr.flagDesignationLabels', value)
    @property
    def nebulaMgr_flagHintDisplayed(self):
        """NebulaMgr.flagHintDisplayed (bool)"""
        return self._getProperty('NebulaMgr.flagHintDisplayed')
    @nebulaMgr_flagHintDisplayed.setter
    def nebulaMgr_flagHintDisplayed(self, value):
        self._setProperty('NebulaMgr.flagHintDisplayed', value)
    @property
    def nebulaMgr_flagOutlinesDisplayed(self):
        """NebulaMgr.flagOutlinesDisplayed (bool)"""
        return self._getProperty('NebulaMgr.flagOutlinesDisplayed')
    @nebulaMgr_flagOutlinesDisplayed.setter
    def nebulaMgr_flagOutlinesDisplayed(self, value):
        self._setProperty('NebulaMgr.flagOutlinesDisplayed', value)
    @property
    def nebulaMgr_flagSurfaceBrightnessArcsecUsage(self):
        """NebulaMgr.flagSurfaceBrightnessArcsecUsage (bool)"""
        return self._getProperty('NebulaMgr.flagSurfaceBrightnessArcsecUsage')
    @nebulaMgr_flagSurfaceBrightnessArcsecUsage.setter
    def nebulaMgr_flagSurfaceBrightnessArcsecUsage(self, value):
        self._setProperty('NebulaMgr.flagSurfaceBrightnessArcsecUsage', value)
    @property
    def nebulaMgr_flagSurfaceBrightnessShortNotationUsage(self):
        """NebulaMgr.flagSurfaceBrightnessShortNotationUsage (bool)"""
        return self._getProperty('NebulaMgr.flagSurfaceBrightnessShortNotationUsage')
    @nebulaMgr_flagSurfaceBrightnessShortNotationUsage.setter
    def nebulaMgr_flagSurfaceBrightnessShortNotationUsage(self, value):
        self._setProperty('NebulaMgr.flagSurfaceBrightnessShortNotationUsage', value)
    @property
    def nebulaMgr_flagSurfaceBrightnessUsage(self):
        """NebulaMgr.flagSurfaceBrightnessUsage (bool)"""
        return self._getProperty('NebulaMgr.flagSurfaceBrightnessUsage')
    @nebulaMgr_flagSurfaceBrightnessUsage.setter
    def nebulaMgr_flagSurfaceBrightnessUsage(self, value):
        self._setProperty('NebulaMgr.flagSurfaceBrightnessUsage', value)
    @property
    def nebulaMgr_flagTypeFiltersUsage(self):
        """NebulaMgr.flagTypeFiltersUsage (bool)"""
        return self._getProperty('NebulaMgr.flagTypeFiltersUsage')
    @nebulaMgr_flagTypeFiltersUsage.setter
    def nebulaMgr_flagTypeFiltersUsage(self, value):
        self._setProperty('NebulaMgr.flagTypeFiltersUsage', value)
    @property
    def nebulaMgr_flagUseSizeLimits(self):
        """NebulaMgr.flagUseSizeLimits (bool)"""
        return self._getProperty('NebulaMgr.flagUseSizeLimits')
    @nebulaMgr_flagUseSizeLimits.setter
    def nebulaMgr_flagUseSizeLimits(self, value):
        self._setProperty('NebulaMgr.flagUseSizeLimits', value)
    @property
    def nebulaMgr_galaxiesColor(self):
        """NebulaMgr.galaxiesColor (Vector3<float>)"""
        return self._getProperty('NebulaMgr.galaxiesColor')
    @nebulaMgr_galaxiesColor.setter
    def nebulaMgr_galaxiesColor(self, value):
        self._setProperty('NebulaMgr.galaxiesColor', value)
    @property
    def nebulaMgr_galaxyClustersColor(self):
        """NebulaMgr.galaxyClustersColor (Vector3<float>)"""
        return self._getProperty('NebulaMgr.galaxyClustersColor')
    @nebulaMgr_galaxyClustersColor.setter
    def nebulaMgr_galaxyClustersColor(self, value):
        self._setProperty('NebulaMgr.galaxyClustersColor', value)
    @property
    def nebulaMgr_globularClustersColor(self):
        """NebulaMgr.globularClustersColor (Vector3<float>)"""
        return self._getProperty('NebulaMgr.globularClustersColor')
    @nebulaMgr_globularClustersColor.setter
    def nebulaMgr_globularClustersColor(self, value):
        self._setProperty('NebulaMgr.globularClustersColor', value)
    @property
    def nebulaMgr_hintsAmount(self):
        """NebulaMgr.hintsAmount (double)"""
        return self._getProperty('NebulaMgr.hintsAmount')
    @nebulaMgr_hintsAmount.setter
    def nebulaMgr_hintsAmount(self, value):
        self._setProperty('NebulaMgr.hintsAmount', value)
    @property
    def nebulaMgr_hintsProportional(self):
        """NebulaMgr.hintsProportional (bool)"""
        return self._getProperty('NebulaMgr.hintsProportional')
    @nebulaMgr_hintsProportional.setter
    def nebulaMgr_hintsProportional(self, value):
        self._setProperty('NebulaMgr.hintsProportional', value)
    @property
    def nebulaMgr_hydrogenRegionsColor(self):
        """NebulaMgr.hydrogenRegionsColor (Vector3<float>)"""
        return self._getProperty('NebulaMgr.hydrogenRegionsColor')
    @nebulaMgr_hydrogenRegionsColor.setter
    def nebulaMgr_hydrogenRegionsColor(self, value):
        self._setProperty('NebulaMgr.hydrogenRegionsColor', value)
    @property
    def nebulaMgr_interactingGalaxiesColor(self):
        """NebulaMgr.interactingGalaxiesColor (Vector3<float>)"""
        return self._getProperty('NebulaMgr.interactingGalaxiesColor')
    @nebulaMgr_interactingGalaxiesColor.setter
    def nebulaMgr_interactingGalaxiesColor(self, value):
        self._setProperty('NebulaMgr.interactingGalaxiesColor', value)
    @property
    def nebulaMgr_interstellarMatterColor(self):
        """NebulaMgr.interstellarMatterColor (Vector3<float>)"""
        return self._getProperty('NebulaMgr.interstellarMatterColor')
    @nebulaMgr_interstellarMatterColor.setter
    def nebulaMgr_interstellarMatterColor(self, value):
        self._setProperty('NebulaMgr.interstellarMatterColor', value)
    @property
    def nebulaMgr_labelsAmount(self):
        """NebulaMgr.labelsAmount (double)"""
        return self._getProperty('NebulaMgr.labelsAmount')
    @nebulaMgr_labelsAmount.setter
    def nebulaMgr_labelsAmount(self, value):
        self._setProperty('NebulaMgr.labelsAmount', value)
    @property
    def nebulaMgr_labelsColor(self):
        """NebulaMgr.labelsColor (Vector3<float>)"""
        return self._getProperty('NebulaMgr.labelsColor')
    @nebulaMgr_labelsColor.setter
    def nebulaMgr_labelsColor(self, value):
        self._setProperty('NebulaMgr.labelsColor', value)
    @property
    def nebulaMgr_maxSizeLimit(self):
        """NebulaMgr.maxSizeLimit (double)"""
        return self._getProperty('NebulaMgr.maxSizeLimit')
    @nebulaMgr_maxSizeLimit.setter
    def nebulaMgr_maxSizeLimit(self, value):
        self._setProperty('NebulaMgr.maxSizeLimit', value)
    @property
    def nebulaMgr_minSizeLimit(self):
        """NebulaMgr.minSizeLimit (double)"""
        return self._getProperty('NebulaMgr.minSizeLimit')
    @nebulaMgr_minSizeLimit.setter
    def nebulaMgr_minSizeLimit(self, value):
        self._setProperty('NebulaMgr.minSizeLimit', value)
    @property
    def nebulaMgr_molecularCloudsColor(self):
        """NebulaMgr.molecularCloudsColor (Vector3<float>)"""
        return self._getProperty('NebulaMgr.molecularCloudsColor')
    @nebulaMgr_molecularCloudsColor.setter
    def nebulaMgr_molecularCloudsColor(self, value):
        self._setProperty('NebulaMgr.molecularCloudsColor', value)
    @property
    def nebulaMgr_nebulaeColor(self):
        """NebulaMgr.nebulaeColor (Vector3<float>)"""
        return self._getProperty('NebulaMgr.nebulaeColor')
    @nebulaMgr_nebulaeColor.setter
    def nebulaMgr_nebulaeColor(self, value):
        self._setProperty('NebulaMgr.nebulaeColor', value)
    @property
    def nebulaMgr_openClustersColor(self):
        """NebulaMgr.openClustersColor (Vector3<float>)"""
        return self._getProperty('NebulaMgr.openClustersColor')
    @nebulaMgr_openClustersColor.setter
    def nebulaMgr_openClustersColor(self, value):
        self._setProperty('NebulaMgr.openClustersColor', value)
    @property
    def nebulaMgr_planetaryNebulaeColor(self):
        """NebulaMgr.planetaryNebulaeColor (Vector3<float>)"""
        return self._getProperty('NebulaMgr.planetaryNebulaeColor')
    @nebulaMgr_planetaryNebulaeColor.setter
    def nebulaMgr_planetaryNebulaeColor(self, value):
        self._setProperty('NebulaMgr.planetaryNebulaeColor', value)
    @property
    def nebulaMgr_possiblePlanetaryNebulaeColor(self):
        """NebulaMgr.possiblePlanetaryNebulaeColor (Vector3<float>)"""
        return self._getProperty('NebulaMgr.possiblePlanetaryNebulaeColor')
    @nebulaMgr_possiblePlanetaryNebulaeColor.setter
    def nebulaMgr_possiblePlanetaryNebulaeColor(self, value):
        self._setProperty('NebulaMgr.possiblePlanetaryNebulaeColor', value)
    @property
    def nebulaMgr_possibleQuasarsColor(self):
        """NebulaMgr.possibleQuasarsColor (Vector3<float>)"""
        return self._getProperty('NebulaMgr.possibleQuasarsColor')
    @nebulaMgr_possibleQuasarsColor.setter
    def nebulaMgr_possibleQuasarsColor(self, value):
        self._setProperty('NebulaMgr.possibleQuasarsColor', value)
    @property
    def nebulaMgr_protoplanetaryNebulaeColor(self):
        """NebulaMgr.protoplanetaryNebulaeColor (Vector3<float>)"""
        return self._getProperty('NebulaMgr.protoplanetaryNebulaeColor')
    @nebulaMgr_protoplanetaryNebulaeColor.setter
    def nebulaMgr_protoplanetaryNebulaeColor(self, value):
        self._setProperty('NebulaMgr.protoplanetaryNebulaeColor', value)
    @property
    def nebulaMgr_quasarsColor(self):
        """NebulaMgr.quasarsColor (Vector3<float>)"""
        return self._getProperty('NebulaMgr.quasarsColor')
    @nebulaMgr_quasarsColor.setter
    def nebulaMgr_quasarsColor(self, value):
        self._setProperty('NebulaMgr.quasarsColor', value)
    @property
    def nebulaMgr_radioGalaxiesColor(self):
        """NebulaMgr.radioGalaxiesColor (Vector3<float>)"""
        return self._getProperty('NebulaMgr.radioGalaxiesColor')
    @nebulaMgr_radioGalaxiesColor.setter
    def nebulaMgr_radioGalaxiesColor(self, value):
        self._setProperty('NebulaMgr.radioGalaxiesColor', value)
    @property
    def nebulaMgr_reflectionNebulaeColor(self):
        """NebulaMgr.reflectionNebulaeColor (Vector3<float>)"""
        return self._getProperty('NebulaMgr.reflectionNebulaeColor')
    @nebulaMgr_reflectionNebulaeColor.setter
    def nebulaMgr_reflectionNebulaeColor(self, value):
        self._setProperty('NebulaMgr.reflectionNebulaeColor', value)
    @property
    def nebulaMgr_regionsColor(self):
        """NebulaMgr.regionsColor (Vector3<float>)"""
        return self._getProperty('NebulaMgr.regionsColor')
    @nebulaMgr_regionsColor.setter
    def nebulaMgr_regionsColor(self, value):
        self._setProperty('NebulaMgr.regionsColor', value)
    @property
    def nebulaMgr_starCloudsColor(self):
        """NebulaMgr.starCloudsColor (Vector3<float>)"""
        return self._getProperty('NebulaMgr.starCloudsColor')
    @nebulaMgr_starCloudsColor.setter
    def nebulaMgr_starCloudsColor(self, value):
        self._setProperty('NebulaMgr.starCloudsColor', value)
    @property
    def nebulaMgr_starsColor(self):
        """NebulaMgr.starsColor (Vector3<float>)"""
        return self._getProperty('NebulaMgr.starsColor')
    @nebulaMgr_starsColor.setter
    def nebulaMgr_starsColor(self, value):
        self._setProperty('NebulaMgr.starsColor', value)
    @property
    def nebulaMgr_stellarAssociationsColor(self):
        """NebulaMgr.stellarAssociationsColor (Vector3<float>)"""
        return self._getProperty('NebulaMgr.stellarAssociationsColor')
    @nebulaMgr_stellarAssociationsColor.setter
    def nebulaMgr_stellarAssociationsColor(self, value):
        self._setProperty('NebulaMgr.stellarAssociationsColor', value)
    @property
    def nebulaMgr_supernovaCandidatesColor(self):
        """NebulaMgr.supernovaCandidatesColor (Vector3<float>)"""
        return self._getProperty('NebulaMgr.supernovaCandidatesColor')
    @nebulaMgr_supernovaCandidatesColor.setter
    def nebulaMgr_supernovaCandidatesColor(self, value):
        self._setProperty('NebulaMgr.supernovaCandidatesColor', value)
    @property
    def nebulaMgr_supernovaRemnantCandidatesColor(self):
        """NebulaMgr.supernovaRemnantCandidatesColor (Vector3<float>)"""
        return self._getProperty('NebulaMgr.supernovaRemnantCandidatesColor')
    @nebulaMgr_supernovaRemnantCandidatesColor.setter
    def nebulaMgr_supernovaRemnantCandidatesColor(self, value):
        self._setProperty('NebulaMgr.supernovaRemnantCandidatesColor', value)
    @property
    def nebulaMgr_supernovaRemnantsColor(self):
        """NebulaMgr.supernovaRemnantsColor (Vector3<float>)"""
        return self._getProperty('NebulaMgr.supernovaRemnantsColor')
    @nebulaMgr_supernovaRemnantsColor.setter
    def nebulaMgr_supernovaRemnantsColor(self, value):
        self._setProperty('NebulaMgr.supernovaRemnantsColor', value)
    @property
    def nebulaMgr_symbioticStarsColor(self):
        """NebulaMgr.symbioticStarsColor (Vector3<float>)"""
        return self._getProperty('NebulaMgr.symbioticStarsColor')
    @nebulaMgr_symbioticStarsColor.setter
    def nebulaMgr_symbioticStarsColor(self, value):
        self._setProperty('NebulaMgr.symbioticStarsColor', value)
    @property
    def nebulaMgr_typeFilters(self):
        """NebulaMgr.typeFilters (int)"""
        return self._getProperty('NebulaMgr.typeFilters')
    @nebulaMgr_typeFilters.setter
    def nebulaMgr_typeFilters(self, value):
        self._setProperty('NebulaMgr.typeFilters', value)
    @property
    def nebulaMgr_youngStellarObjectsColor(self):
        """NebulaMgr.youngStellarObjectsColor (Vector3<float>)"""
        return self._getProperty('NebulaMgr.youngStellarObjectsColor')
    @nebulaMgr_youngStellarObjectsColor.setter
    def nebulaMgr_youngStellarObjectsColor(self, value):
        self._setProperty('NebulaMgr.youngStellarObjectsColor', value)
    @property
    def nomenclatureMgr_flagHideLocalNomenclature(self):
        """NomenclatureMgr.flagHideLocalNomenclature (bool)"""
        return self._getProperty('NomenclatureMgr.flagHideLocalNomenclature')
    @nomenclatureMgr_flagHideLocalNomenclature.setter
    def nomenclatureMgr_flagHideLocalNomenclature(self, value):
        self._setProperty('NomenclatureMgr.flagHideLocalNomenclature', value)
    @property
    def nomenclatureMgr_flagShowNomenclature(self):
        """NomenclatureMgr.flagShowNomenclature (bool)"""
        return self._getProperty('NomenclatureMgr.flagShowNomenclature')
    @nomenclatureMgr_flagShowNomenclature.setter
    def nomenclatureMgr_flagShowNomenclature(self, value):
        self._setProperty('NomenclatureMgr.flagShowNomenclature', value)
    @property
    def nomenclatureMgr_flagShowTerminatorZoneOnly(self):
        """NomenclatureMgr.flagShowTerminatorZoneOnly (bool)"""
        return self._getProperty('NomenclatureMgr.flagShowTerminatorZoneOnly')
    @nomenclatureMgr_flagShowTerminatorZoneOnly.setter
    def nomenclatureMgr_flagShowTerminatorZoneOnly(self, value):
        self._setProperty('NomenclatureMgr.flagShowTerminatorZoneOnly', value)
    @property
    def nomenclatureMgr_nomenclatureColor(self):
        """NomenclatureMgr.nomenclatureColor (Vector3<float>)"""
        return self._getProperty('NomenclatureMgr.nomenclatureColor')
    @nomenclatureMgr_nomenclatureColor.setter
    def nomenclatureMgr_nomenclatureColor(self, value):
        self._setProperty('NomenclatureMgr.nomenclatureColor', value)
    @property
    def nomenclatureMgr_specialNomenclatureOnlyDisplayed(self):
        """NomenclatureMgr.specialNomenclatureOnlyDisplayed (bool)"""
        return self._getProperty('NomenclatureMgr.specialNomenclatureOnlyDisplayed')
    @nomenclatureMgr_specialNomenclatureOnlyDisplayed.setter
    def nomenclatureMgr_specialNomenclatureOnlyDisplayed(self, value):
        self._setProperty('NomenclatureMgr.specialNomenclatureOnlyDisplayed', value)
    @property
    def nomenclatureMgr_terminatorMaxAltitude(self):
        """NomenclatureMgr.terminatorMaxAltitude (int)"""
        return self._getProperty('NomenclatureMgr.terminatorMaxAltitude')
    @nomenclatureMgr_terminatorMaxAltitude.setter
    def nomenclatureMgr_terminatorMaxAltitude(self, value):
        self._setProperty('NomenclatureMgr.terminatorMaxAltitude', value)
    @property
    def nomenclatureMgr_terminatorMinAltitude(self):
        """NomenclatureMgr.terminatorMinAltitude (int)"""
        return self._getProperty('NomenclatureMgr.terminatorMinAltitude')
    @nomenclatureMgr_terminatorMinAltitude.setter
    def nomenclatureMgr_terminatorMinAltitude(self, value):
        self._setProperty('NomenclatureMgr.terminatorMinAltitude', value)
    @property
    def obsListDialog_flagUseFov(self):
        """ObsListDialog.flagUseFov (bool)"""
        return self._getProperty('ObsListDialog.flagUseFov')
    @obsListDialog_flagUseFov.setter
    def obsListDialog_flagUseFov(self, value):
        self._setProperty('ObsListDialog.flagUseFov', value)
    @property
    def obsListDialog_flagUseJD(self):
        """ObsListDialog.flagUseJD (bool)"""
        return self._getProperty('ObsListDialog.flagUseJD')
    @obsListDialog_flagUseJD.setter
    def obsListDialog_flagUseJD(self, value):
        self._setProperty('ObsListDialog.flagUseJD', value)
    @property
    def obsListDialog_flagUseLandscape(self):
        """ObsListDialog.flagUseLandscape (bool)"""
        return self._getProperty('ObsListDialog.flagUseLandscape')
    @obsListDialog_flagUseLandscape.setter
    def obsListDialog_flagUseLandscape(self, value):
        self._setProperty('ObsListDialog.flagUseLandscape', value)
    @property
    def obsListDialog_flagUseLocation(self):
        """ObsListDialog.flagUseLocation (bool)"""
        return self._getProperty('ObsListDialog.flagUseLocation')
    @obsListDialog_flagUseLocation.setter
    def obsListDialog_flagUseLocation(self, value):
        self._setProperty('ObsListDialog.flagUseLocation', value)
    @property
    def oculars_arrowButtonScale(self):
        """Oculars.arrowButtonScale (int)"""
        return self._getProperty('Oculars.arrowButtonScale')
    @oculars_arrowButtonScale.setter
    def oculars_arrowButtonScale(self, value):
        self._setProperty('Oculars.arrowButtonScale', value)
    @property
    def oculars_ccdCropOverlayHSize(self):
        """Oculars.ccdCropOverlayHSize (int)"""
        return self._getProperty('Oculars.ccdCropOverlayHSize')
    @oculars_ccdCropOverlayHSize.setter
    def oculars_ccdCropOverlayHSize(self, value):
        self._setProperty('Oculars.ccdCropOverlayHSize', value)
    @property
    def oculars_ccdCropOverlayVSize(self):
        """Oculars.ccdCropOverlayVSize (int)"""
        return self._getProperty('Oculars.ccdCropOverlayVSize')
    @oculars_ccdCropOverlayVSize.setter
    def oculars_ccdCropOverlayVSize(self, value):
        self._setProperty('Oculars.ccdCropOverlayVSize', value)
    @property
    def oculars_enableCCD(self):
        """Oculars.enableCCD (bool)"""
        return self._getProperty('Oculars.enableCCD')
    @oculars_enableCCD.setter
    def oculars_enableCCD(self, value):
        self._setProperty('Oculars.enableCCD', value)
    @property
    def oculars_enableCrosshairs(self):
        """Oculars.enableCrosshairs (bool)"""
        return self._getProperty('Oculars.enableCrosshairs')
    @oculars_enableCrosshairs.setter
    def oculars_enableCrosshairs(self, value):
        self._setProperty('Oculars.enableCrosshairs', value)
    @property
    def oculars_enableOcular(self):
        """Oculars.enableOcular (bool)"""
        return self._getProperty('Oculars.enableOcular')
    @oculars_enableOcular.setter
    def oculars_enableOcular(self, value):
        self._setProperty('Oculars.enableOcular', value)
    @property
    def oculars_enableTelrad(self):
        """Oculars.enableTelrad (bool)"""
        return self._getProperty('Oculars.enableTelrad')
    @oculars_enableTelrad.setter
    def oculars_enableTelrad(self, value):
        self._setProperty('Oculars.enableTelrad', value)
    @property
    def oculars_flagAlignCrosshair(self):
        """Oculars.flagAlignCrosshair (bool)"""
        return self._getProperty('Oculars.flagAlignCrosshair')
    @oculars_flagAlignCrosshair.setter
    def oculars_flagAlignCrosshair(self, value):
        self._setProperty('Oculars.flagAlignCrosshair', value)
    @property
    def oculars_flagAutoLimitMagnitude(self):
        """Oculars.flagAutoLimitMagnitude (bool)"""
        return self._getProperty('Oculars.flagAutoLimitMagnitude')
    @oculars_flagAutoLimitMagnitude.setter
    def oculars_flagAutoLimitMagnitude(self, value):
        self._setProperty('Oculars.flagAutoLimitMagnitude', value)
    @property
    def oculars_flagAutosetMountForCCD(self):
        """Oculars.flagAutosetMountForCCD (bool)"""
        return self._getProperty('Oculars.flagAutosetMountForCCD')
    @oculars_flagAutosetMountForCCD.setter
    def oculars_flagAutosetMountForCCD(self, value):
        self._setProperty('Oculars.flagAutosetMountForCCD', value)
    @property
    def oculars_flagDMSDegrees(self):
        """Oculars.flagDMSDegrees (bool)"""
        return self._getProperty('Oculars.flagDMSDegrees')
    @oculars_flagDMSDegrees.setter
    def oculars_flagDMSDegrees(self, value):
        self._setProperty('Oculars.flagDMSDegrees', value)
    @property
    def oculars_flagGuiPanelEnabled(self):
        """Oculars.flagGuiPanelEnabled (bool)"""
        return self._getProperty('Oculars.flagGuiPanelEnabled')
    @oculars_flagGuiPanelEnabled.setter
    def oculars_flagGuiPanelEnabled(self, value):
        self._setProperty('Oculars.flagGuiPanelEnabled', value)
    @property
    def oculars_flagHideGridsLines(self):
        """Oculars.flagHideGridsLines (bool)"""
        return self._getProperty('Oculars.flagHideGridsLines')
    @oculars_flagHideGridsLines.setter
    def oculars_flagHideGridsLines(self, value):
        self._setProperty('Oculars.flagHideGridsLines', value)
    @property
    def oculars_flagHorizontalCoordinates(self):
        """Oculars.flagHorizontalCoordinates (bool)"""
        return self._getProperty('Oculars.flagHorizontalCoordinates')
    @oculars_flagHorizontalCoordinates.setter
    def oculars_flagHorizontalCoordinates(self, value):
        self._setProperty('Oculars.flagHorizontalCoordinates', value)
    @property
    def oculars_flagInitDirectionUsage(self):
        """Oculars.flagInitDirectionUsage (bool)"""
        return self._getProperty('Oculars.flagInitDirectionUsage')
    @oculars_flagInitDirectionUsage.setter
    def oculars_flagInitDirectionUsage(self, value):
        self._setProperty('Oculars.flagInitDirectionUsage', value)
    @property
    def oculars_flagInitFOVUsage(self):
        """Oculars.flagInitFOVUsage (bool)"""
        return self._getProperty('Oculars.flagInitFOVUsage')
    @oculars_flagInitFOVUsage.setter
    def oculars_flagInitFOVUsage(self, value):
        self._setProperty('Oculars.flagInitFOVUsage', value)
    @property
    def oculars_flagMaxExposureTimeForCCD(self):
        """Oculars.flagMaxExposureTimeForCCD (bool)"""
        return self._getProperty('Oculars.flagMaxExposureTimeForCCD')
    @oculars_flagMaxExposureTimeForCCD.setter
    def oculars_flagMaxExposureTimeForCCD(self, value):
        self._setProperty('Oculars.flagMaxExposureTimeForCCD', value)
    @property
    def oculars_flagRequireSelection(self):
        """Oculars.flagRequireSelection (bool)"""
        return self._getProperty('Oculars.flagRequireSelection')
    @oculars_flagRequireSelection.setter
    def oculars_flagRequireSelection(self, value):
        self._setProperty('Oculars.flagRequireSelection', value)
    @property
    def oculars_flagScaleImageCircle(self):
        """Oculars.flagScaleImageCircle (bool)"""
        return self._getProperty('Oculars.flagScaleImageCircle')
    @oculars_flagScaleImageCircle.setter
    def oculars_flagScaleImageCircle(self, value):
        self._setProperty('Oculars.flagScaleImageCircle', value)
    @property
    def oculars_flagScalingFOVForCCD(self):
        """Oculars.flagScalingFOVForCCD (bool)"""
        return self._getProperty('Oculars.flagScalingFOVForCCD')
    @oculars_flagScalingFOVForCCD.setter
    def oculars_flagScalingFOVForCCD(self, value):
        self._setProperty('Oculars.flagScalingFOVForCCD', value)
    @property
    def oculars_flagScalingFOVForTelrad(self):
        """Oculars.flagScalingFOVForTelrad (bool)"""
        return self._getProperty('Oculars.flagScalingFOVForTelrad')
    @oculars_flagScalingFOVForTelrad.setter
    def oculars_flagScalingFOVForTelrad(self, value):
        self._setProperty('Oculars.flagScalingFOVForTelrad', value)
    @property
    def oculars_flagSemiTransparency(self):
        """Oculars.flagSemiTransparency (bool)"""
        return self._getProperty('Oculars.flagSemiTransparency')
    @oculars_flagSemiTransparency.setter
    def oculars_flagSemiTransparency(self, value):
        self._setProperty('Oculars.flagSemiTransparency', value)
    @property
    def oculars_flagShowCardinals(self):
        """Oculars.flagShowCardinals (bool)"""
        return self._getProperty('Oculars.flagShowCardinals')
    @oculars_flagShowCardinals.setter
    def oculars_flagShowCardinals(self, value):
        self._setProperty('Oculars.flagShowCardinals', value)
    @property
    def oculars_flagShowCcdCropOverlay(self):
        """Oculars.flagShowCcdCropOverlay (bool)"""
        return self._getProperty('Oculars.flagShowCcdCropOverlay')
    @oculars_flagShowCcdCropOverlay.setter
    def oculars_flagShowCcdCropOverlay(self, value):
        self._setProperty('Oculars.flagShowCcdCropOverlay', value)
    @property
    def oculars_flagShowCcdCropOverlayPixelGrid(self):
        """Oculars.flagShowCcdCropOverlayPixelGrid (bool)"""
        return self._getProperty('Oculars.flagShowCcdCropOverlayPixelGrid')
    @oculars_flagShowCcdCropOverlayPixelGrid.setter
    def oculars_flagShowCcdCropOverlayPixelGrid(self, value):
        self._setProperty('Oculars.flagShowCcdCropOverlayPixelGrid', value)
    @property
    def oculars_flagShowContour(self):
        """Oculars.flagShowContour (bool)"""
        return self._getProperty('Oculars.flagShowContour')
    @oculars_flagShowContour.setter
    def oculars_flagShowContour(self, value):
        self._setProperty('Oculars.flagShowContour', value)
    @property
    def oculars_flagShowFocuserOverlay(self):
        """Oculars.flagShowFocuserOverlay (bool)"""
        return self._getProperty('Oculars.flagShowFocuserOverlay')
    @oculars_flagShowFocuserOverlay.setter
    def oculars_flagShowFocuserOverlay(self, value):
        self._setProperty('Oculars.flagShowFocuserOverlay', value)
    @property
    def oculars_flagShowOcularsButton(self):
        """Oculars.flagShowOcularsButton (bool)"""
        return self._getProperty('Oculars.flagShowOcularsButton')
    @oculars_flagShowOcularsButton.setter
    def oculars_flagShowOcularsButton(self, value):
        self._setProperty('Oculars.flagShowOcularsButton', value)
    @property
    def oculars_flagShowResolutionCriteria(self):
        """Oculars.flagShowResolutionCriteria (bool)"""
        return self._getProperty('Oculars.flagShowResolutionCriteria')
    @oculars_flagShowResolutionCriteria.setter
    def oculars_flagShowResolutionCriteria(self, value):
        self._setProperty('Oculars.flagShowResolutionCriteria', value)
    @property
    def oculars_flagUseLargeFocuserOverlay(self):
        """Oculars.flagUseLargeFocuserOverlay (bool)"""
        return self._getProperty('Oculars.flagUseLargeFocuserOverlay')
    @oculars_flagUseLargeFocuserOverlay.setter
    def oculars_flagUseLargeFocuserOverlay(self, value):
        self._setProperty('Oculars.flagUseLargeFocuserOverlay', value)
    @property
    def oculars_flagUseMediumFocuserOverlay(self):
        """Oculars.flagUseMediumFocuserOverlay (bool)"""
        return self._getProperty('Oculars.flagUseMediumFocuserOverlay')
    @oculars_flagUseMediumFocuserOverlay.setter
    def oculars_flagUseMediumFocuserOverlay(self, value):
        self._setProperty('Oculars.flagUseMediumFocuserOverlay', value)
    @property
    def oculars_flagUseSmallFocuserOverlay(self):
        """Oculars.flagUseSmallFocuserOverlay (bool)"""
        return self._getProperty('Oculars.flagUseSmallFocuserOverlay')
    @oculars_flagUseSmallFocuserOverlay.setter
    def oculars_flagUseSmallFocuserOverlay(self, value):
        self._setProperty('Oculars.flagUseSmallFocuserOverlay', value)
    @property
    def oculars_focuserColor(self):
        """Oculars.focuserColor (Vector3<float>)"""
        return self._getProperty('Oculars.focuserColor')
    @oculars_focuserColor.setter
    def oculars_focuserColor(self, value):
        self._setProperty('Oculars.focuserColor', value)
    @property
    def oculars_guiPanelFontSize(self):
        """Oculars.guiPanelFontSize (int)"""
        return self._getProperty('Oculars.guiPanelFontSize')
    @oculars_guiPanelFontSize.setter
    def oculars_guiPanelFontSize(self, value):
        self._setProperty('Oculars.guiPanelFontSize', value)
    @property
    def oculars_lineColor(self):
        """Oculars.lineColor (Vector3<float>)"""
        return self._getProperty('Oculars.lineColor')
    @oculars_lineColor.setter
    def oculars_lineColor(self, value):
        self._setProperty('Oculars.lineColor', value)
    @property
    def oculars_selectedCCDIndex(self):
        """Oculars.selectedCCDIndex (int)"""
        return self._getProperty('Oculars.selectedCCDIndex')
    @oculars_selectedCCDIndex.setter
    def oculars_selectedCCDIndex(self, value):
        self._setProperty('Oculars.selectedCCDIndex', value)
    @property
    def oculars_selectedCCDPrismPositionAngle(self):
        """Oculars.selectedCCDPrismPositionAngle (double)"""
        return self._getProperty('Oculars.selectedCCDPrismPositionAngle')
    @oculars_selectedCCDPrismPositionAngle.setter
    def oculars_selectedCCDPrismPositionAngle(self, value):
        self._setProperty('Oculars.selectedCCDPrismPositionAngle', value)
    @property
    def oculars_selectedCCDRotationAngle(self):
        """Oculars.selectedCCDRotationAngle (double)"""
        return self._getProperty('Oculars.selectedCCDRotationAngle')
    @oculars_selectedCCDRotationAngle.setter
    def oculars_selectedCCDRotationAngle(self, value):
        self._setProperty('Oculars.selectedCCDRotationAngle', value)
    @property
    def oculars_selectedLensIndex(self):
        """Oculars.selectedLensIndex (int)"""
        return self._getProperty('Oculars.selectedLensIndex')
    @oculars_selectedLensIndex.setter
    def oculars_selectedLensIndex(self, value):
        self._setProperty('Oculars.selectedLensIndex', value)
    @property
    def oculars_selectedOcularIndex(self):
        """Oculars.selectedOcularIndex (int)"""
        return self._getProperty('Oculars.selectedOcularIndex')
    @oculars_selectedOcularIndex.setter
    def oculars_selectedOcularIndex(self, value):
        self._setProperty('Oculars.selectedOcularIndex', value)
    @property
    def oculars_selectedTelescopeIndex(self):
        """Oculars.selectedTelescopeIndex (int)"""
        return self._getProperty('Oculars.selectedTelescopeIndex')
    @oculars_selectedTelescopeIndex.setter
    def oculars_selectedTelescopeIndex(self, value):
        self._setProperty('Oculars.selectedTelescopeIndex', value)
    @property
    def oculars_telradFOV(self):
        """Oculars.telradFOV (Vector4<float>)"""
        return self._getProperty('Oculars.telradFOV')
    @oculars_telradFOV.setter
    def oculars_telradFOV(self, value):
        self._setProperty('Oculars.telradFOV', value)
    @property
    def oculars_textColor(self):
        """Oculars.textColor (Vector3<float>)"""
        return self._getProperty('Oculars.textColor')
    @oculars_textColor.setter
    def oculars_textColor(self, value):
        self._setProperty('Oculars.textColor', value)
    @property
    def oculars_transparencyMask(self):
        """Oculars.transparencyMask (int)"""
        return self._getProperty('Oculars.transparencyMask')
    @oculars_transparencyMask.setter
    def oculars_transparencyMask(self, value):
        self._setProperty('Oculars.transparencyMask', value)
    @property
    def remoteControl_autoStart(self):
        """RemoteControl.autoStart (bool)"""
        return self._getProperty('RemoteControl.autoStart')
    @remoteControl_autoStart.setter
    def remoteControl_autoStart(self, value):
        self._setProperty('RemoteControl.autoStart', value)
    @property
    def remoteControl_enableCors(self):
        """RemoteControl.enableCors (bool)"""
        return self._getProperty('RemoteControl.enableCors')
    @remoteControl_enableCors.setter
    def remoteControl_enableCors(self, value):
        self._setProperty('RemoteControl.enableCors', value)
    @property
    def remoteControl_enabled(self):
        """RemoteControl.enabled (bool)"""
        return self._getProperty('RemoteControl.enabled')
    @remoteControl_enabled.setter
    def remoteControl_enabled(self, value):
        self._setProperty('RemoteControl.enabled', value)
    @property
    def remoteControl_usePassword(self):
        """RemoteControl.usePassword (bool)"""
        return self._getProperty('RemoteControl.usePassword')
    @remoteControl_usePassword.setter
    def remoteControl_usePassword(self, value):
        self._setProperty('RemoteControl.usePassword', value)
    @property
    def satellites_autoAddEnabled(self):
        """Satellites.autoAddEnabled (bool)"""
        return self._getProperty('Satellites.autoAddEnabled')
    @satellites_autoAddEnabled.setter
    def satellites_autoAddEnabled(self, value):
        self._setProperty('Satellites.autoAddEnabled', value)
    @property
    def satellites_autoRemoveEnabled(self):
        """Satellites.autoRemoveEnabled (bool)"""
        return self._getProperty('Satellites.autoRemoveEnabled')
    @satellites_autoRemoveEnabled.setter
    def satellites_autoRemoveEnabled(self, value):
        self._setProperty('Satellites.autoRemoveEnabled', value)
    @property
    def satellites_flagCFApogee(self):
        """Satellites.flagCFApogee (bool)"""
        return self._getProperty('Satellites.flagCFApogee')
    @satellites_flagCFApogee.setter
    def satellites_flagCFApogee(self, value):
        self._setProperty('Satellites.flagCFApogee', value)
    @property
    def satellites_flagCFEccentricity(self):
        """Satellites.flagCFEccentricity (bool)"""
        return self._getProperty('Satellites.flagCFEccentricity')
    @satellites_flagCFEccentricity.setter
    def satellites_flagCFEccentricity(self, value):
        self._setProperty('Satellites.flagCFEccentricity', value)
    @property
    def satellites_flagCFInclination(self):
        """Satellites.flagCFInclination (bool)"""
        return self._getProperty('Satellites.flagCFInclination')
    @satellites_flagCFInclination.setter
    def satellites_flagCFInclination(self, value):
        self._setProperty('Satellites.flagCFInclination', value)
    @property
    def satellites_flagCFKnownStdMagnitude(self):
        """Satellites.flagCFKnownStdMagnitude (bool)"""
        return self._getProperty('Satellites.flagCFKnownStdMagnitude')
    @satellites_flagCFKnownStdMagnitude.setter
    def satellites_flagCFKnownStdMagnitude(self, value):
        self._setProperty('Satellites.flagCFKnownStdMagnitude', value)
    @property
    def satellites_flagCFPerigee(self):
        """Satellites.flagCFPerigee (bool)"""
        return self._getProperty('Satellites.flagCFPerigee')
    @satellites_flagCFPerigee.setter
    def satellites_flagCFPerigee(self, value):
        self._setProperty('Satellites.flagCFPerigee', value)
    @property
    def satellites_flagCFPeriod(self):
        """Satellites.flagCFPeriod (bool)"""
        return self._getProperty('Satellites.flagCFPeriod')
    @satellites_flagCFPeriod.setter
    def satellites_flagCFPeriod(self, value):
        self._setProperty('Satellites.flagCFPeriod', value)
    @property
    def satellites_flagCFRCS(self):
        """Satellites.flagCFRCS (bool)"""
        return self._getProperty('Satellites.flagCFRCS')
    @satellites_flagCFRCS.setter
    def satellites_flagCFRCS(self, value):
        self._setProperty('Satellites.flagCFRCS', value)
    @property
    def satellites_flagColoredInvisible(self):
        """Satellites.flagColoredInvisible (bool)"""
        return self._getProperty('Satellites.flagColoredInvisible')
    @satellites_flagColoredInvisible.setter
    def satellites_flagColoredInvisible(self, value):
        self._setProperty('Satellites.flagColoredInvisible', value)
    @property
    def satellites_flagHideInvisible(self):
        """Satellites.flagHideInvisible (bool)"""
        return self._getProperty('Satellites.flagHideInvisible')
    @satellites_flagHideInvisible.setter
    def satellites_flagHideInvisible(self, value):
        self._setProperty('Satellites.flagHideInvisible', value)
    @property
    def satellites_flagHintsVisible(self):
        """Satellites.flagHintsVisible (bool)"""
        return self._getProperty('Satellites.flagHintsVisible')
    @satellites_flagHintsVisible.setter
    def satellites_flagHintsVisible(self, value):
        self._setProperty('Satellites.flagHintsVisible', value)
    @property
    def satellites_flagIconicMode(self):
        """Satellites.flagIconicMode (bool)"""
        return self._getProperty('Satellites.flagIconicMode')
    @satellites_flagIconicMode.setter
    def satellites_flagIconicMode(self, value):
        self._setProperty('Satellites.flagIconicMode', value)
    @property
    def satellites_flagLabelsVisible(self):
        """Satellites.flagLabelsVisible (bool)"""
        return self._getProperty('Satellites.flagLabelsVisible')
    @satellites_flagLabelsVisible.setter
    def satellites_flagLabelsVisible(self, value):
        self._setProperty('Satellites.flagLabelsVisible', value)
    @property
    def satellites_flagOrbitLines(self):
        """Satellites.flagOrbitLines (bool)"""
        return self._getProperty('Satellites.flagOrbitLines')
    @satellites_flagOrbitLines.setter
    def satellites_flagOrbitLines(self, value):
        self._setProperty('Satellites.flagOrbitLines', value)
    @property
    def satellites_flagPenumbraVisible(self):
        """Satellites.flagPenumbraVisible (bool)"""
        return self._getProperty('Satellites.flagPenumbraVisible')
    @satellites_flagPenumbraVisible.setter
    def satellites_flagPenumbraVisible(self, value):
        self._setProperty('Satellites.flagPenumbraVisible', value)
    @property
    def satellites_flagUmbraAtFixedDistance(self):
        """Satellites.flagUmbraAtFixedDistance (bool)"""
        return self._getProperty('Satellites.flagUmbraAtFixedDistance')
    @satellites_flagUmbraAtFixedDistance.setter
    def satellites_flagUmbraAtFixedDistance(self, value):
        self._setProperty('Satellites.flagUmbraAtFixedDistance', value)
    @property
    def satellites_flagUmbraVisible(self):
        """Satellites.flagUmbraVisible (bool)"""
        return self._getProperty('Satellites.flagUmbraVisible')
    @satellites_flagUmbraVisible.setter
    def satellites_flagUmbraVisible(self, value):
        self._setProperty('Satellites.flagUmbraVisible', value)
    @property
    def satellites_flagVFAltitude(self):
        """Satellites.flagVFAltitude (bool)"""
        return self._getProperty('Satellites.flagVFAltitude')
    @satellites_flagVFAltitude.setter
    def satellites_flagVFAltitude(self, value):
        self._setProperty('Satellites.flagVFAltitude', value)
    @property
    def satellites_flagVFMagnitude(self):
        """Satellites.flagVFMagnitude (bool)"""
        return self._getProperty('Satellites.flagVFMagnitude')
    @satellites_flagVFMagnitude.setter
    def satellites_flagVFMagnitude(self, value):
        self._setProperty('Satellites.flagVFMagnitude', value)
    @property
    def satellites_invisibleSatelliteColor(self):
        """Satellites.invisibleSatelliteColor (Vector3<float>)"""
        return self._getProperty('Satellites.invisibleSatelliteColor')
    @satellites_invisibleSatelliteColor.setter
    def satellites_invisibleSatelliteColor(self, value):
        self._setProperty('Satellites.invisibleSatelliteColor', value)
    @property
    def satellites_labelFontSize(self):
        """Satellites.labelFontSize (int)"""
        return self._getProperty('Satellites.labelFontSize')
    @satellites_labelFontSize.setter
    def satellites_labelFontSize(self, value):
        self._setProperty('Satellites.labelFontSize', value)
    @property
    def satellites_maxCFApogee(self):
        """Satellites.maxCFApogee (double)"""
        return self._getProperty('Satellites.maxCFApogee')
    @satellites_maxCFApogee.setter
    def satellites_maxCFApogee(self, value):
        self._setProperty('Satellites.maxCFApogee', value)
    @property
    def satellites_maxCFEccentricity(self):
        """Satellites.maxCFEccentricity (double)"""
        return self._getProperty('Satellites.maxCFEccentricity')
    @satellites_maxCFEccentricity.setter
    def satellites_maxCFEccentricity(self, value):
        self._setProperty('Satellites.maxCFEccentricity', value)
    @property
    def satellites_maxCFInclination(self):
        """Satellites.maxCFInclination (double)"""
        return self._getProperty('Satellites.maxCFInclination')
    @satellites_maxCFInclination.setter
    def satellites_maxCFInclination(self, value):
        self._setProperty('Satellites.maxCFInclination', value)
    @property
    def satellites_maxCFPerigee(self):
        """Satellites.maxCFPerigee (double)"""
        return self._getProperty('Satellites.maxCFPerigee')
    @satellites_maxCFPerigee.setter
    def satellites_maxCFPerigee(self, value):
        self._setProperty('Satellites.maxCFPerigee', value)
    @property
    def satellites_maxCFPeriod(self):
        """Satellites.maxCFPeriod (double)"""
        return self._getProperty('Satellites.maxCFPeriod')
    @satellites_maxCFPeriod.setter
    def satellites_maxCFPeriod(self, value):
        self._setProperty('Satellites.maxCFPeriod', value)
    @property
    def satellites_maxCFRCS(self):
        """Satellites.maxCFRCS (double)"""
        return self._getProperty('Satellites.maxCFRCS')
    @satellites_maxCFRCS.setter
    def satellites_maxCFRCS(self, value):
        self._setProperty('Satellites.maxCFRCS', value)
    @property
    def satellites_maxVFAltitude(self):
        """Satellites.maxVFAltitude (double)"""
        return self._getProperty('Satellites.maxVFAltitude')
    @satellites_maxVFAltitude.setter
    def satellites_maxVFAltitude(self, value):
        self._setProperty('Satellites.maxVFAltitude', value)
    @property
    def satellites_maxVFMagnitude(self):
        """Satellites.maxVFMagnitude (double)"""
        return self._getProperty('Satellites.maxVFMagnitude')
    @satellites_maxVFMagnitude.setter
    def satellites_maxVFMagnitude(self, value):
        self._setProperty('Satellites.maxVFMagnitude', value)
    @property
    def satellites_minCFApogee(self):
        """Satellites.minCFApogee (double)"""
        return self._getProperty('Satellites.minCFApogee')
    @satellites_minCFApogee.setter
    def satellites_minCFApogee(self, value):
        self._setProperty('Satellites.minCFApogee', value)
    @property
    def satellites_minCFEccentricity(self):
        """Satellites.minCFEccentricity (double)"""
        return self._getProperty('Satellites.minCFEccentricity')
    @satellites_minCFEccentricity.setter
    def satellites_minCFEccentricity(self, value):
        self._setProperty('Satellites.minCFEccentricity', value)
    @property
    def satellites_minCFInclination(self):
        """Satellites.minCFInclination (double)"""
        return self._getProperty('Satellites.minCFInclination')
    @satellites_minCFInclination.setter
    def satellites_minCFInclination(self, value):
        self._setProperty('Satellites.minCFInclination', value)
    @property
    def satellites_minCFPerigee(self):
        """Satellites.minCFPerigee (double)"""
        return self._getProperty('Satellites.minCFPerigee')
    @satellites_minCFPerigee.setter
    def satellites_minCFPerigee(self, value):
        self._setProperty('Satellites.minCFPerigee', value)
    @property
    def satellites_minCFPeriod(self):
        """Satellites.minCFPeriod (double)"""
        return self._getProperty('Satellites.minCFPeriod')
    @satellites_minCFPeriod.setter
    def satellites_minCFPeriod(self, value):
        self._setProperty('Satellites.minCFPeriod', value)
    @property
    def satellites_minCFRCS(self):
        """Satellites.minCFRCS (double)"""
        return self._getProperty('Satellites.minCFRCS')
    @satellites_minCFRCS.setter
    def satellites_minCFRCS(self, value):
        self._setProperty('Satellites.minCFRCS', value)
    @property
    def satellites_minVFAltitude(self):
        """Satellites.minVFAltitude (double)"""
        return self._getProperty('Satellites.minVFAltitude')
    @satellites_minVFAltitude.setter
    def satellites_minVFAltitude(self, value):
        self._setProperty('Satellites.minVFAltitude', value)
    @property
    def satellites_minVFMagnitude(self):
        """Satellites.minVFMagnitude (double)"""
        return self._getProperty('Satellites.minVFMagnitude')
    @satellites_minVFMagnitude.setter
    def satellites_minVFMagnitude(self, value):
        self._setProperty('Satellites.minVFMagnitude', value)
    @property
    def satellites_orbitLineFadeSegments(self):
        """Satellites.orbitLineFadeSegments (int)"""
        return self._getProperty('Satellites.orbitLineFadeSegments')
    @satellites_orbitLineFadeSegments.setter
    def satellites_orbitLineFadeSegments(self, value):
        self._setProperty('Satellites.orbitLineFadeSegments', value)
    @property
    def satellites_orbitLineSegmentDuration(self):
        """Satellites.orbitLineSegmentDuration (int)"""
        return self._getProperty('Satellites.orbitLineSegmentDuration')
    @satellites_orbitLineSegmentDuration.setter
    def satellites_orbitLineSegmentDuration(self, value):
        self._setProperty('Satellites.orbitLineSegmentDuration', value)
    @property
    def satellites_orbitLineSegments(self):
        """Satellites.orbitLineSegments (int)"""
        return self._getProperty('Satellites.orbitLineSegments')
    @satellites_orbitLineSegments.setter
    def satellites_orbitLineSegments(self, value):
        self._setProperty('Satellites.orbitLineSegments', value)
    @property
    def satellites_orbitLineThickness(self):
        """Satellites.orbitLineThickness (int)"""
        return self._getProperty('Satellites.orbitLineThickness')
    @satellites_orbitLineThickness.setter
    def satellites_orbitLineThickness(self, value):
        self._setProperty('Satellites.orbitLineThickness', value)
    @property
    def satellites_penumbraColor(self):
        """Satellites.penumbraColor (Vector3<float>)"""
        return self._getProperty('Satellites.penumbraColor')
    @satellites_penumbraColor.setter
    def satellites_penumbraColor(self, value):
        self._setProperty('Satellites.penumbraColor', value)
    @property
    def satellites_tleEpochAgeDays(self):
        """Satellites.tleEpochAgeDays (int)"""
        return self._getProperty('Satellites.tleEpochAgeDays')
    @satellites_tleEpochAgeDays.setter
    def satellites_tleEpochAgeDays(self, value):
        self._setProperty('Satellites.tleEpochAgeDays', value)
    @property
    def satellites_transitSatelliteColor(self):
        """Satellites.transitSatelliteColor (Vector3<float>)"""
        return self._getProperty('Satellites.transitSatelliteColor')
    @satellites_transitSatelliteColor.setter
    def satellites_transitSatelliteColor(self, value):
        self._setProperty('Satellites.transitSatelliteColor', value)
    @property
    def satellites_umbraColor(self):
        """Satellites.umbraColor (Vector3<float>)"""
        return self._getProperty('Satellites.umbraColor')
    @satellites_umbraColor.setter
    def satellites_umbraColor(self, value):
        self._setProperty('Satellites.umbraColor', value)
    @property
    def satellites_umbraDistance(self):
        """Satellites.umbraDistance (double)"""
        return self._getProperty('Satellites.umbraDistance')
    @satellites_umbraDistance.setter
    def satellites_umbraDistance(self, value):
        self._setProperty('Satellites.umbraDistance', value)
    @property
    def satellites_updateFrequencyHours(self):
        """Satellites.updateFrequencyHours (int)"""
        return self._getProperty('Satellites.updateFrequencyHours')
    @satellites_updateFrequencyHours.setter
    def satellites_updateFrequencyHours(self, value):
        self._setProperty('Satellites.updateFrequencyHours', value)
    @property
    def satellites_updatesEnabled(self):
        """Satellites.updatesEnabled (bool)"""
        return self._getProperty('Satellites.updatesEnabled')
    @satellites_updatesEnabled.setter
    def satellites_updatesEnabled(self, value):
        self._setProperty('Satellites.updatesEnabled', value)
    @property
    def searchDialog_simbadCount(self):
        """SearchDialog.simbadCount (int)"""
        return self._getProperty('SearchDialog.simbadCount')
    @searchDialog_simbadCount.setter
    def searchDialog_simbadCount(self, value):
        self._setProperty('SearchDialog.simbadCount', value)
    @property
    def searchDialog_simbadDist(self):
        """SearchDialog.simbadDist (int)"""
        return self._getProperty('SearchDialog.simbadDist')
    @searchDialog_simbadDist.setter
    def searchDialog_simbadDist(self, value):
        self._setProperty('SearchDialog.simbadDist', value)
    @property
    def searchDialog_simbadGetDims(self):
        """SearchDialog.simbadGetDims (bool)"""
        return self._getProperty('SearchDialog.simbadGetDims')
    @searchDialog_simbadGetDims.setter
    def searchDialog_simbadGetDims(self, value):
        self._setProperty('SearchDialog.simbadGetDims', value)
    @property
    def searchDialog_simbadGetIds(self):
        """SearchDialog.simbadGetIds (bool)"""
        return self._getProperty('SearchDialog.simbadGetIds')
    @searchDialog_simbadGetIds.setter
    def searchDialog_simbadGetIds(self, value):
        self._setProperty('SearchDialog.simbadGetIds', value)
    @property
    def searchDialog_simbadGetMorpho(self):
        """SearchDialog.simbadGetMorpho (bool)"""
        return self._getProperty('SearchDialog.simbadGetMorpho')
    @searchDialog_simbadGetMorpho.setter
    def searchDialog_simbadGetMorpho(self, value):
        self._setProperty('SearchDialog.simbadGetMorpho', value)
    @property
    def searchDialog_simbadGetSpec(self):
        """SearchDialog.simbadGetSpec (bool)"""
        return self._getProperty('SearchDialog.simbadGetSpec')
    @searchDialog_simbadGetSpec.setter
    def searchDialog_simbadGetSpec(self, value):
        self._setProperty('SearchDialog.simbadGetSpec', value)
    @property
    def searchDialog_simbadGetTypes(self):
        """SearchDialog.simbadGetTypes (bool)"""
        return self._getProperty('SearchDialog.simbadGetTypes')
    @searchDialog_simbadGetTypes.setter
    def searchDialog_simbadGetTypes(self, value):
        self._setProperty('SearchDialog.simbadGetTypes', value)
    @property
    def searchDialog_useSimbad(self):
        """SearchDialog.useSimbad (bool)"""
        return self._getProperty('SearchDialog.useSimbad')
    @searchDialog_useSimbad.setter
    def searchDialog_useSimbad(self, value):
        self._setProperty('SearchDialog.useSimbad', value)
    @property
    def skylight_AYc(self):
        """Skylight.AYc (double)"""
        return self._getProperty('Skylight.AYc')
    @skylight_AYc.setter
    def skylight_AYc(self, value):
        self._setProperty('Skylight.AYc', value)
    @property
    def skylight_AYt(self):
        """Skylight.AYt (double)"""
        return self._getProperty('Skylight.AYt')
    @skylight_AYt.setter
    def skylight_AYt(self, value):
        self._setProperty('Skylight.AYt', value)
    @property
    def skylight_Axc(self):
        """Skylight.Axc (double)"""
        return self._getProperty('Skylight.Axc')
    @skylight_Axc.setter
    def skylight_Axc(self, value):
        self._setProperty('Skylight.Axc', value)
    @property
    def skylight_Axt(self):
        """Skylight.Axt (double)"""
        return self._getProperty('Skylight.Axt')
    @skylight_Axt.setter
    def skylight_Axt(self, value):
        self._setProperty('Skylight.Axt', value)
    @property
    def skylight_Ayc(self):
        """Skylight.Ayc (double)"""
        return self._getProperty('Skylight.Ayc')
    @skylight_Ayc.setter
    def skylight_Ayc(self, value):
        self._setProperty('Skylight.Ayc', value)
    @property
    def skylight_Ayt(self):
        """Skylight.Ayt (double)"""
        return self._getProperty('Skylight.Ayt')
    @skylight_Ayt.setter
    def skylight_Ayt(self, value):
        self._setProperty('Skylight.Ayt', value)
    @property
    def skylight_BYc(self):
        """Skylight.BYc (double)"""
        return self._getProperty('Skylight.BYc')
    @skylight_BYc.setter
    def skylight_BYc(self, value):
        self._setProperty('Skylight.BYc', value)
    @property
    def skylight_BYt(self):
        """Skylight.BYt (double)"""
        return self._getProperty('Skylight.BYt')
    @skylight_BYt.setter
    def skylight_BYt(self, value):
        self._setProperty('Skylight.BYt', value)
    @property
    def skylight_Bxc(self):
        """Skylight.Bxc (double)"""
        return self._getProperty('Skylight.Bxc')
    @skylight_Bxc.setter
    def skylight_Bxc(self, value):
        self._setProperty('Skylight.Bxc', value)
    @property
    def skylight_Bxt(self):
        """Skylight.Bxt (double)"""
        return self._getProperty('Skylight.Bxt')
    @skylight_Bxt.setter
    def skylight_Bxt(self, value):
        self._setProperty('Skylight.Bxt', value)
    @property
    def skylight_Byc(self):
        """Skylight.Byc (double)"""
        return self._getProperty('Skylight.Byc')
    @skylight_Byc.setter
    def skylight_Byc(self, value):
        self._setProperty('Skylight.Byc', value)
    @property
    def skylight_Byt(self):
        """Skylight.Byt (double)"""
        return self._getProperty('Skylight.Byt')
    @skylight_Byt.setter
    def skylight_Byt(self, value):
        self._setProperty('Skylight.Byt', value)
    @property
    def skylight_CYc(self):
        """Skylight.CYc (double)"""
        return self._getProperty('Skylight.CYc')
    @skylight_CYc.setter
    def skylight_CYc(self, value):
        self._setProperty('Skylight.CYc', value)
    @property
    def skylight_CYt(self):
        """Skylight.CYt (double)"""
        return self._getProperty('Skylight.CYt')
    @skylight_CYt.setter
    def skylight_CYt(self, value):
        self._setProperty('Skylight.CYt', value)
    @property
    def skylight_Cxc(self):
        """Skylight.Cxc (double)"""
        return self._getProperty('Skylight.Cxc')
    @skylight_Cxc.setter
    def skylight_Cxc(self, value):
        self._setProperty('Skylight.Cxc', value)
    @property
    def skylight_Cxt(self):
        """Skylight.Cxt (double)"""
        return self._getProperty('Skylight.Cxt')
    @skylight_Cxt.setter
    def skylight_Cxt(self, value):
        self._setProperty('Skylight.Cxt', value)
    @property
    def skylight_Cyc(self):
        """Skylight.Cyc (double)"""
        return self._getProperty('Skylight.Cyc')
    @skylight_Cyc.setter
    def skylight_Cyc(self, value):
        self._setProperty('Skylight.Cyc', value)
    @property
    def skylight_Cyt(self):
        """Skylight.Cyt (double)"""
        return self._getProperty('Skylight.Cyt')
    @skylight_Cyt.setter
    def skylight_Cyt(self, value):
        self._setProperty('Skylight.Cyt', value)
    @property
    def skylight_DYc(self):
        """Skylight.DYc (double)"""
        return self._getProperty('Skylight.DYc')
    @skylight_DYc.setter
    def skylight_DYc(self, value):
        self._setProperty('Skylight.DYc', value)
    @property
    def skylight_DYt(self):
        """Skylight.DYt (double)"""
        return self._getProperty('Skylight.DYt')
    @skylight_DYt.setter
    def skylight_DYt(self, value):
        self._setProperty('Skylight.DYt', value)
    @property
    def skylight_Dxc(self):
        """Skylight.Dxc (double)"""
        return self._getProperty('Skylight.Dxc')
    @skylight_Dxc.setter
    def skylight_Dxc(self, value):
        self._setProperty('Skylight.Dxc', value)
    @property
    def skylight_Dxt(self):
        """Skylight.Dxt (double)"""
        return self._getProperty('Skylight.Dxt')
    @skylight_Dxt.setter
    def skylight_Dxt(self, value):
        self._setProperty('Skylight.Dxt', value)
    @property
    def skylight_Dyc(self):
        """Skylight.Dyc (double)"""
        return self._getProperty('Skylight.Dyc')
    @skylight_Dyc.setter
    def skylight_Dyc(self, value):
        self._setProperty('Skylight.Dyc', value)
    @property
    def skylight_Dyt(self):
        """Skylight.Dyt (double)"""
        return self._getProperty('Skylight.Dyt')
    @skylight_Dyt.setter
    def skylight_Dyt(self, value):
        self._setProperty('Skylight.Dyt', value)
    @property
    def skylight_EYc(self):
        """Skylight.EYc (double)"""
        return self._getProperty('Skylight.EYc')
    @skylight_EYc.setter
    def skylight_EYc(self, value):
        self._setProperty('Skylight.EYc', value)
    @property
    def skylight_EYt(self):
        """Skylight.EYt (double)"""
        return self._getProperty('Skylight.EYt')
    @skylight_EYt.setter
    def skylight_EYt(self, value):
        self._setProperty('Skylight.EYt', value)
    @property
    def skylight_Exc(self):
        """Skylight.Exc (double)"""
        return self._getProperty('Skylight.Exc')
    @skylight_Exc.setter
    def skylight_Exc(self, value):
        self._setProperty('Skylight.Exc', value)
    @property
    def skylight_Ext(self):
        """Skylight.Ext (double)"""
        return self._getProperty('Skylight.Ext')
    @skylight_Ext.setter
    def skylight_Ext(self, value):
        self._setProperty('Skylight.Ext', value)
    @property
    def skylight_Eyc(self):
        """Skylight.Eyc (double)"""
        return self._getProperty('Skylight.Eyc')
    @skylight_Eyc.setter
    def skylight_Eyc(self, value):
        self._setProperty('Skylight.Eyc', value)
    @property
    def skylight_Eyt(self):
        """Skylight.Eyt (double)"""
        return self._getProperty('Skylight.Eyt')
    @skylight_Eyt.setter
    def skylight_Eyt(self, value):
        self._setProperty('Skylight.Eyt', value)
    @property
    def skylight_T(self):
        """Skylight.T (double)"""
        return self._getProperty('Skylight.T')
    @skylight_T.setter
    def skylight_T(self, value):
        self._setProperty('Skylight.T', value)
    @property
    def skylight_flagGuiPublic(self):
        """Skylight.flagGuiPublic (bool)"""
        return self._getProperty('Skylight.flagGuiPublic')
    @skylight_flagGuiPublic.setter
    def skylight_flagGuiPublic(self, value):
        self._setProperty('Skylight.flagGuiPublic', value)
    @property
    def skylight_flagSchaefer(self):
        """Skylight.flagSchaefer (bool)"""
        return self._getProperty('Skylight.flagSchaefer')
    @skylight_flagSchaefer.setter
    def skylight_flagSchaefer(self, value):
        self._setProperty('Skylight.flagSchaefer', value)
    @property
    def skylight_zX11(self):
        """Skylight.zX11 (double)"""
        return self._getProperty('Skylight.zX11')
    @skylight_zX11.setter
    def skylight_zX11(self, value):
        self._setProperty('Skylight.zX11', value)
    @property
    def skylight_zX12(self):
        """Skylight.zX12 (double)"""
        return self._getProperty('Skylight.zX12')
    @skylight_zX12.setter
    def skylight_zX12(self, value):
        self._setProperty('Skylight.zX12', value)
    @property
    def skylight_zX13(self):
        """Skylight.zX13 (double)"""
        return self._getProperty('Skylight.zX13')
    @skylight_zX13.setter
    def skylight_zX13(self, value):
        self._setProperty('Skylight.zX13', value)
    @property
    def skylight_zX21(self):
        """Skylight.zX21 (double)"""
        return self._getProperty('Skylight.zX21')
    @skylight_zX21.setter
    def skylight_zX21(self, value):
        self._setProperty('Skylight.zX21', value)
    @property
    def skylight_zX22(self):
        """Skylight.zX22 (double)"""
        return self._getProperty('Skylight.zX22')
    @skylight_zX22.setter
    def skylight_zX22(self, value):
        self._setProperty('Skylight.zX22', value)
    @property
    def skylight_zX23(self):
        """Skylight.zX23 (double)"""
        return self._getProperty('Skylight.zX23')
    @skylight_zX23.setter
    def skylight_zX23(self, value):
        self._setProperty('Skylight.zX23', value)
    @property
    def skylight_zX24(self):
        """Skylight.zX24 (double)"""
        return self._getProperty('Skylight.zX24')
    @skylight_zX24.setter
    def skylight_zX24(self, value):
        self._setProperty('Skylight.zX24', value)
    @property
    def skylight_zX31(self):
        """Skylight.zX31 (double)"""
        return self._getProperty('Skylight.zX31')
    @skylight_zX31.setter
    def skylight_zX31(self, value):
        self._setProperty('Skylight.zX31', value)
    @property
    def skylight_zX32(self):
        """Skylight.zX32 (double)"""
        return self._getProperty('Skylight.zX32')
    @skylight_zX32.setter
    def skylight_zX32(self, value):
        self._setProperty('Skylight.zX32', value)
    @property
    def skylight_zX33(self):
        """Skylight.zX33 (double)"""
        return self._getProperty('Skylight.zX33')
    @skylight_zX33.setter
    def skylight_zX33(self, value):
        self._setProperty('Skylight.zX33', value)
    @property
    def skylight_zX34(self):
        """Skylight.zX34 (double)"""
        return self._getProperty('Skylight.zX34')
    @skylight_zX34.setter
    def skylight_zX34(self, value):
        self._setProperty('Skylight.zX34', value)
    @property
    def skylight_zY11(self):
        """Skylight.zY11 (double)"""
        return self._getProperty('Skylight.zY11')
    @skylight_zY11.setter
    def skylight_zY11(self, value):
        self._setProperty('Skylight.zY11', value)
    @property
    def skylight_zY12(self):
        """Skylight.zY12 (double)"""
        return self._getProperty('Skylight.zY12')
    @skylight_zY12.setter
    def skylight_zY12(self, value):
        self._setProperty('Skylight.zY12', value)
    @property
    def skylight_zY13(self):
        """Skylight.zY13 (double)"""
        return self._getProperty('Skylight.zY13')
    @skylight_zY13.setter
    def skylight_zY13(self, value):
        self._setProperty('Skylight.zY13', value)
    @property
    def skylight_zY21(self):
        """Skylight.zY21 (double)"""
        return self._getProperty('Skylight.zY21')
    @skylight_zY21.setter
    def skylight_zY21(self, value):
        self._setProperty('Skylight.zY21', value)
    @property
    def skylight_zY22(self):
        """Skylight.zY22 (double)"""
        return self._getProperty('Skylight.zY22')
    @skylight_zY22.setter
    def skylight_zY22(self, value):
        self._setProperty('Skylight.zY22', value)
    @property
    def skylight_zY23(self):
        """Skylight.zY23 (double)"""
        return self._getProperty('Skylight.zY23')
    @skylight_zY23.setter
    def skylight_zY23(self, value):
        self._setProperty('Skylight.zY23', value)
    @property
    def skylight_zY24(self):
        """Skylight.zY24 (double)"""
        return self._getProperty('Skylight.zY24')
    @skylight_zY24.setter
    def skylight_zY24(self, value):
        self._setProperty('Skylight.zY24', value)
    @property
    def skylight_zY31(self):
        """Skylight.zY31 (double)"""
        return self._getProperty('Skylight.zY31')
    @skylight_zY31.setter
    def skylight_zY31(self, value):
        self._setProperty('Skylight.zY31', value)
    @property
    def skylight_zY32(self):
        """Skylight.zY32 (double)"""
        return self._getProperty('Skylight.zY32')
    @skylight_zY32.setter
    def skylight_zY32(self, value):
        self._setProperty('Skylight.zY32', value)
    @property
    def skylight_zY33(self):
        """Skylight.zY33 (double)"""
        return self._getProperty('Skylight.zY33')
    @skylight_zY33.setter
    def skylight_zY33(self, value):
        self._setProperty('Skylight.zY33', value)
    @property
    def skylight_zY34(self):
        """Skylight.zY34 (double)"""
        return self._getProperty('Skylight.zY34')
    @skylight_zY34.setter
    def skylight_zY34(self, value):
        self._setProperty('Skylight.zY34', value)
    @property
    def solarSystem_apparentMagnitudeAlgorithmOnEarth(self):
        """SolarSystem.apparentMagnitudeAlgorithmOnEarth (QString)"""
        return self._getProperty('SolarSystem.apparentMagnitudeAlgorithmOnEarth')
    @solarSystem_apparentMagnitudeAlgorithmOnEarth.setter
    def solarSystem_apparentMagnitudeAlgorithmOnEarth(self, value):
        self._setProperty('SolarSystem.apparentMagnitudeAlgorithmOnEarth', value)
    @property
    def solarSystem_cometsOrbitsColor(self):
        """SolarSystem.cometsOrbitsColor (Vector3<float>)"""
        return self._getProperty('SolarSystem.cometsOrbitsColor')
    @solarSystem_cometsOrbitsColor.setter
    def solarSystem_cometsOrbitsColor(self, value):
        self._setProperty('SolarSystem.cometsOrbitsColor', value)
    @property
    def solarSystem_cubewanosOrbitsColor(self):
        """SolarSystem.cubewanosOrbitsColor (Vector3<float>)"""
        return self._getProperty('SolarSystem.cubewanosOrbitsColor')
    @solarSystem_cubewanosOrbitsColor.setter
    def solarSystem_cubewanosOrbitsColor(self, value):
        self._setProperty('SolarSystem.cubewanosOrbitsColor', value)
    @property
    def solarSystem_dwarfPlanetsOrbitsColor(self):
        """SolarSystem.dwarfPlanetsOrbitsColor (Vector3<float>)"""
        return self._getProperty('SolarSystem.dwarfPlanetsOrbitsColor')
    @solarSystem_dwarfPlanetsOrbitsColor.setter
    def solarSystem_dwarfPlanetsOrbitsColor(self, value):
        self._setProperty('SolarSystem.dwarfPlanetsOrbitsColor', value)
    @property
    def solarSystem_earthOrbitColor(self):
        """SolarSystem.earthOrbitColor (Vector3<float>)"""
        return self._getProperty('SolarSystem.earthOrbitColor')
    @solarSystem_earthOrbitColor.setter
    def solarSystem_earthOrbitColor(self, value):
        self._setProperty('SolarSystem.earthOrbitColor', value)
    @property
    def solarSystem_earthShadowEnlargementDanjon(self):
        """SolarSystem.earthShadowEnlargementDanjon (bool)"""
        return self._getProperty('SolarSystem.earthShadowEnlargementDanjon')
    @solarSystem_earthShadowEnlargementDanjon.setter
    def solarSystem_earthShadowEnlargementDanjon(self, value):
        self._setProperty('SolarSystem.earthShadowEnlargementDanjon', value)
    @property
    def solarSystem_ephemerisAlwaysOn(self):
        """SolarSystem.ephemerisAlwaysOn (bool)"""
        return self._getProperty('SolarSystem.ephemerisAlwaysOn')
    @solarSystem_ephemerisAlwaysOn.setter
    def solarSystem_ephemerisAlwaysOn(self, value):
        self._setProperty('SolarSystem.ephemerisAlwaysOn', value)
    @property
    def solarSystem_ephemerisDataLimit(self):
        """SolarSystem.ephemerisDataLimit (int)"""
        return self._getProperty('SolarSystem.ephemerisDataLimit')
    @solarSystem_ephemerisDataLimit.setter
    def solarSystem_ephemerisDataLimit(self, value):
        self._setProperty('SolarSystem.ephemerisDataLimit', value)
    @property
    def solarSystem_ephemerisDataStep(self):
        """SolarSystem.ephemerisDataStep (int)"""
        return self._getProperty('SolarSystem.ephemerisDataStep')
    @solarSystem_ephemerisDataStep.setter
    def solarSystem_ephemerisDataStep(self, value):
        self._setProperty('SolarSystem.ephemerisDataStep', value)
    @property
    def solarSystem_ephemerisDatesDisplayed(self):
        """SolarSystem.ephemerisDatesDisplayed (bool)"""
        return self._getProperty('SolarSystem.ephemerisDatesDisplayed')
    @solarSystem_ephemerisDatesDisplayed.setter
    def solarSystem_ephemerisDatesDisplayed(self, value):
        self._setProperty('SolarSystem.ephemerisDatesDisplayed', value)
    @property
    def solarSystem_ephemerisGenericMarkerColor(self):
        """SolarSystem.ephemerisGenericMarkerColor (Vector3<float>)"""
        return self._getProperty('SolarSystem.ephemerisGenericMarkerColor')
    @solarSystem_ephemerisGenericMarkerColor.setter
    def solarSystem_ephemerisGenericMarkerColor(self, value):
        self._setProperty('SolarSystem.ephemerisGenericMarkerColor', value)
    @property
    def solarSystem_ephemerisHorizontalCoordinates(self):
        """SolarSystem.ephemerisHorizontalCoordinates (bool)"""
        return self._getProperty('SolarSystem.ephemerisHorizontalCoordinates')
    @solarSystem_ephemerisHorizontalCoordinates.setter
    def solarSystem_ephemerisHorizontalCoordinates(self, value):
        self._setProperty('SolarSystem.ephemerisHorizontalCoordinates', value)
    @property
    def solarSystem_ephemerisJupiterMarkerColor(self):
        """SolarSystem.ephemerisJupiterMarkerColor (Vector3<float>)"""
        return self._getProperty('SolarSystem.ephemerisJupiterMarkerColor')
    @solarSystem_ephemerisJupiterMarkerColor.setter
    def solarSystem_ephemerisJupiterMarkerColor(self, value):
        self._setProperty('SolarSystem.ephemerisJupiterMarkerColor', value)
    @property
    def solarSystem_ephemerisLineDisplayed(self):
        """SolarSystem.ephemerisLineDisplayed (bool)"""
        return self._getProperty('SolarSystem.ephemerisLineDisplayed')
    @solarSystem_ephemerisLineDisplayed.setter
    def solarSystem_ephemerisLineDisplayed(self, value):
        self._setProperty('SolarSystem.ephemerisLineDisplayed', value)
    @property
    def solarSystem_ephemerisLineThickness(self):
        """SolarSystem.ephemerisLineThickness (int)"""
        return self._getProperty('SolarSystem.ephemerisLineThickness')
    @solarSystem_ephemerisLineThickness.setter
    def solarSystem_ephemerisLineThickness(self, value):
        self._setProperty('SolarSystem.ephemerisLineThickness', value)
    @property
    def solarSystem_ephemerisMagnitudesDisplayed(self):
        """SolarSystem.ephemerisMagnitudesDisplayed (bool)"""
        return self._getProperty('SolarSystem.ephemerisMagnitudesDisplayed')
    @solarSystem_ephemerisMagnitudesDisplayed.setter
    def solarSystem_ephemerisMagnitudesDisplayed(self, value):
        self._setProperty('SolarSystem.ephemerisMagnitudesDisplayed', value)
    @property
    def solarSystem_ephemerisMarkersDisplayed(self):
        """SolarSystem.ephemerisMarkersDisplayed (bool)"""
        return self._getProperty('SolarSystem.ephemerisMarkersDisplayed')
    @solarSystem_ephemerisMarkersDisplayed.setter
    def solarSystem_ephemerisMarkersDisplayed(self, value):
        self._setProperty('SolarSystem.ephemerisMarkersDisplayed', value)
    @property
    def solarSystem_ephemerisMarsMarkerColor(self):
        """SolarSystem.ephemerisMarsMarkerColor (Vector3<float>)"""
        return self._getProperty('SolarSystem.ephemerisMarsMarkerColor')
    @solarSystem_ephemerisMarsMarkerColor.setter
    def solarSystem_ephemerisMarsMarkerColor(self, value):
        self._setProperty('SolarSystem.ephemerisMarsMarkerColor', value)
    @property
    def solarSystem_ephemerisMercuryMarkerColor(self):
        """SolarSystem.ephemerisMercuryMarkerColor (Vector3<float>)"""
        return self._getProperty('SolarSystem.ephemerisMercuryMarkerColor')
    @solarSystem_ephemerisMercuryMarkerColor.setter
    def solarSystem_ephemerisMercuryMarkerColor(self, value):
        self._setProperty('SolarSystem.ephemerisMercuryMarkerColor', value)
    @property
    def solarSystem_ephemerisSaturnMarkerColor(self):
        """SolarSystem.ephemerisSaturnMarkerColor (Vector3<float>)"""
        return self._getProperty('SolarSystem.ephemerisSaturnMarkerColor')
    @solarSystem_ephemerisSaturnMarkerColor.setter
    def solarSystem_ephemerisSaturnMarkerColor(self, value):
        self._setProperty('SolarSystem.ephemerisSaturnMarkerColor', value)
    @property
    def solarSystem_ephemerisScaleMarkersDisplayed(self):
        """SolarSystem.ephemerisScaleMarkersDisplayed (bool)"""
        return self._getProperty('SolarSystem.ephemerisScaleMarkersDisplayed')
    @solarSystem_ephemerisScaleMarkersDisplayed.setter
    def solarSystem_ephemerisScaleMarkersDisplayed(self, value):
        self._setProperty('SolarSystem.ephemerisScaleMarkersDisplayed', value)
    @property
    def solarSystem_ephemerisSecondaryMarkerColor(self):
        """SolarSystem.ephemerisSecondaryMarkerColor (Vector3<float>)"""
        return self._getProperty('SolarSystem.ephemerisSecondaryMarkerColor')
    @solarSystem_ephemerisSecondaryMarkerColor.setter
    def solarSystem_ephemerisSecondaryMarkerColor(self, value):
        self._setProperty('SolarSystem.ephemerisSecondaryMarkerColor', value)
    @property
    def solarSystem_ephemerisSelectedMarkerColor(self):
        """SolarSystem.ephemerisSelectedMarkerColor (Vector3<float>)"""
        return self._getProperty('SolarSystem.ephemerisSelectedMarkerColor')
    @solarSystem_ephemerisSelectedMarkerColor.setter
    def solarSystem_ephemerisSelectedMarkerColor(self, value):
        self._setProperty('SolarSystem.ephemerisSelectedMarkerColor', value)
    @property
    def solarSystem_ephemerisSkippedData(self):
        """SolarSystem.ephemerisSkippedData (bool)"""
        return self._getProperty('SolarSystem.ephemerisSkippedData')
    @solarSystem_ephemerisSkippedData.setter
    def solarSystem_ephemerisSkippedData(self, value):
        self._setProperty('SolarSystem.ephemerisSkippedData', value)
    @property
    def solarSystem_ephemerisSkippedMarkers(self):
        """SolarSystem.ephemerisSkippedMarkers (bool)"""
        return self._getProperty('SolarSystem.ephemerisSkippedMarkers')
    @solarSystem_ephemerisSkippedMarkers.setter
    def solarSystem_ephemerisSkippedMarkers(self, value):
        self._setProperty('SolarSystem.ephemerisSkippedMarkers', value)
    @property
    def solarSystem_ephemerisSmartDates(self):
        """SolarSystem.ephemerisSmartDates (bool)"""
        return self._getProperty('SolarSystem.ephemerisSmartDates')
    @solarSystem_ephemerisSmartDates.setter
    def solarSystem_ephemerisSmartDates(self, value):
        self._setProperty('SolarSystem.ephemerisSmartDates', value)
    @property
    def solarSystem_ephemerisVenusMarkerColor(self):
        """SolarSystem.ephemerisVenusMarkerColor (Vector3<float>)"""
        return self._getProperty('SolarSystem.ephemerisVenusMarkerColor')
    @solarSystem_ephemerisVenusMarkerColor.setter
    def solarSystem_ephemerisVenusMarkerColor(self, value):
        self._setProperty('SolarSystem.ephemerisVenusMarkerColor', value)
    @property
    def solarSystem_flagDrawMoonHalo(self):
        """SolarSystem.flagDrawMoonHalo (bool)"""
        return self._getProperty('SolarSystem.flagDrawMoonHalo')
    @solarSystem_flagDrawMoonHalo.setter
    def solarSystem_flagDrawMoonHalo(self, value):
        self._setProperty('SolarSystem.flagDrawMoonHalo', value)
    @property
    def solarSystem_flagDrawSunHalo(self):
        """SolarSystem.flagDrawSunHalo (bool)"""
        return self._getProperty('SolarSystem.flagDrawSunHalo')
    @solarSystem_flagDrawSunHalo.setter
    def solarSystem_flagDrawSunHalo(self, value):
        self._setProperty('SolarSystem.flagDrawSunHalo', value)
    @property
    def solarSystem_flagHints(self):
        """SolarSystem.flagHints (bool)"""
        return self._getProperty('SolarSystem.flagHints')
    @solarSystem_flagHints.setter
    def solarSystem_flagHints(self, value):
        self._setProperty('SolarSystem.flagHints', value)
    @property
    def solarSystem_flagIsolatedOrbits(self):
        """SolarSystem.flagIsolatedOrbits (bool)"""
        return self._getProperty('SolarSystem.flagIsolatedOrbits')
    @solarSystem_flagIsolatedOrbits.setter
    def solarSystem_flagIsolatedOrbits(self, value):
        self._setProperty('SolarSystem.flagIsolatedOrbits', value)
    @property
    def solarSystem_flagIsolatedTrails(self):
        """SolarSystem.flagIsolatedTrails (bool)"""
        return self._getProperty('SolarSystem.flagIsolatedTrails')
    @solarSystem_flagIsolatedTrails.setter
    def solarSystem_flagIsolatedTrails(self, value):
        self._setProperty('SolarSystem.flagIsolatedTrails', value)
    @property
    def solarSystem_flagLightTravelTime(self):
        """SolarSystem.flagLightTravelTime (bool)"""
        return self._getProperty('SolarSystem.flagLightTravelTime')
    @solarSystem_flagLightTravelTime.setter
    def solarSystem_flagLightTravelTime(self, value):
        self._setProperty('SolarSystem.flagLightTravelTime', value)
    @property
    def solarSystem_flagMinorBodyScale(self):
        """SolarSystem.flagMinorBodyScale (bool)"""
        return self._getProperty('SolarSystem.flagMinorBodyScale')
    @solarSystem_flagMinorBodyScale.setter
    def solarSystem_flagMinorBodyScale(self, value):
        self._setProperty('SolarSystem.flagMinorBodyScale', value)
    @property
    def solarSystem_flagMoonScale(self):
        """SolarSystem.flagMoonScale (bool)"""
        return self._getProperty('SolarSystem.flagMoonScale')
    @solarSystem_flagMoonScale.setter
    def solarSystem_flagMoonScale(self, value):
        self._setProperty('SolarSystem.flagMoonScale', value)
    @property
    def solarSystem_flagNativePlanetNames(self):
        """SolarSystem.flagNativePlanetNames (bool)"""
        return self._getProperty('SolarSystem.flagNativePlanetNames')
    @solarSystem_flagNativePlanetNames.setter
    def solarSystem_flagNativePlanetNames(self, value):
        self._setProperty('SolarSystem.flagNativePlanetNames', value)
    @property
    def solarSystem_flagOrbits(self):
        """SolarSystem.flagOrbits (bool)"""
        return self._getProperty('SolarSystem.flagOrbits')
    @solarSystem_flagOrbits.setter
    def solarSystem_flagOrbits(self, value):
        self._setProperty('SolarSystem.flagOrbits', value)
    @property
    def solarSystem_flagPermanentOrbits(self):
        """SolarSystem.flagPermanentOrbits (bool)"""
        return self._getProperty('SolarSystem.flagPermanentOrbits')
    @solarSystem_flagPermanentOrbits.setter
    def solarSystem_flagPermanentOrbits(self, value):
        self._setProperty('SolarSystem.flagPermanentOrbits', value)
    @property
    def solarSystem_flagPermanentSolarCorona(self):
        """SolarSystem.flagPermanentSolarCorona (bool)"""
        return self._getProperty('SolarSystem.flagPermanentSolarCorona')
    @solarSystem_flagPermanentSolarCorona.setter
    def solarSystem_flagPermanentSolarCorona(self, value):
        self._setProperty('SolarSystem.flagPermanentSolarCorona', value)
    @property
    def solarSystem_flagPlanetScale(self):
        """SolarSystem.flagPlanetScale (bool)"""
        return self._getProperty('SolarSystem.flagPlanetScale')
    @solarSystem_flagPlanetScale.setter
    def solarSystem_flagPlanetScale(self, value):
        self._setProperty('SolarSystem.flagPlanetScale', value)
    @property
    def solarSystem_flagPlanetsOrbitsOnly(self):
        """SolarSystem.flagPlanetsOrbitsOnly (bool)"""
        return self._getProperty('SolarSystem.flagPlanetsOrbitsOnly')
    @solarSystem_flagPlanetsOrbitsOnly.setter
    def solarSystem_flagPlanetsOrbitsOnly(self, value):
        self._setProperty('SolarSystem.flagPlanetsOrbitsOnly', value)
    @property
    def solarSystem_flagPointer(self):
        """SolarSystem.flagPointer (bool)"""
        return self._getProperty('SolarSystem.flagPointer')
    @solarSystem_flagPointer.setter
    def solarSystem_flagPointer(self, value):
        self._setProperty('SolarSystem.flagPointer', value)
    @property
    def solarSystem_flagShowObjSelfShadows(self):
        """SolarSystem.flagShowObjSelfShadows (bool)"""
        return self._getProperty('SolarSystem.flagShowObjSelfShadows')
    @solarSystem_flagShowObjSelfShadows.setter
    def solarSystem_flagShowObjSelfShadows(self, value):
        self._setProperty('SolarSystem.flagShowObjSelfShadows', value)
    @property
    def solarSystem_flagSunScale(self):
        """SolarSystem.flagSunScale (bool)"""
        return self._getProperty('SolarSystem.flagSunScale')
    @solarSystem_flagSunScale.setter
    def solarSystem_flagSunScale(self, value):
        self._setProperty('SolarSystem.flagSunScale', value)
    @property
    def solarSystem_flagUseObjModels(self):
        """SolarSystem.flagUseObjModels (bool)"""
        return self._getProperty('SolarSystem.flagUseObjModels')
    @solarSystem_flagUseObjModels.setter
    def solarSystem_flagUseObjModels(self, value):
        self._setProperty('SolarSystem.flagUseObjModels', value)
    @property
    def solarSystem_grsDrift(self):
        """SolarSystem.grsDrift (double)"""
        return self._getProperty('SolarSystem.grsDrift')
    @solarSystem_grsDrift.setter
    def solarSystem_grsDrift(self, value):
        self._setProperty('SolarSystem.grsDrift', value)
    @property
    def solarSystem_grsJD(self):
        """SolarSystem.grsJD (double)"""
        return self._getProperty('SolarSystem.grsJD')
    @solarSystem_grsJD.setter
    def solarSystem_grsJD(self, value):
        self._setProperty('SolarSystem.grsJD', value)
    @property
    def solarSystem_grsLongitude(self):
        """SolarSystem.grsLongitude (int)"""
        return self._getProperty('SolarSystem.grsLongitude')
    @solarSystem_grsLongitude.setter
    def solarSystem_grsLongitude(self, value):
        self._setProperty('SolarSystem.grsLongitude', value)
    @property
    def solarSystem_interstellarOrbitsColor(self):
        """SolarSystem.interstellarOrbitsColor (Vector3<float>)"""
        return self._getProperty('SolarSystem.interstellarOrbitsColor')
    @solarSystem_interstellarOrbitsColor.setter
    def solarSystem_interstellarOrbitsColor(self, value):
        self._setProperty('SolarSystem.interstellarOrbitsColor', value)
    @property
    def solarSystem_jupiterOrbitColor(self):
        """SolarSystem.jupiterOrbitColor (Vector3<float>)"""
        return self._getProperty('SolarSystem.jupiterOrbitColor')
    @solarSystem_jupiterOrbitColor.setter
    def solarSystem_jupiterOrbitColor(self, value):
        self._setProperty('SolarSystem.jupiterOrbitColor', value)
    @property
    def solarSystem_labelsAmount(self):
        """SolarSystem.labelsAmount (double)"""
        return self._getProperty('SolarSystem.labelsAmount')
    @solarSystem_labelsAmount.setter
    def solarSystem_labelsAmount(self, value):
        self._setProperty('SolarSystem.labelsAmount', value)
    @property
    def solarSystem_labelsColor(self):
        """SolarSystem.labelsColor (Vector3<float>)"""
        return self._getProperty('SolarSystem.labelsColor')
    @solarSystem_labelsColor.setter
    def solarSystem_labelsColor(self, value):
        self._setProperty('SolarSystem.labelsColor', value)
    @property
    def solarSystem_labelsDisplayed(self):
        """SolarSystem.labelsDisplayed (bool)"""
        return self._getProperty('SolarSystem.labelsDisplayed')
    @solarSystem_labelsDisplayed.setter
    def solarSystem_labelsDisplayed(self, value):
        self._setProperty('SolarSystem.labelsDisplayed', value)
    @property
    def solarSystem_majorPlanetsOrbitsColor(self):
        """SolarSystem.majorPlanetsOrbitsColor (Vector3<float>)"""
        return self._getProperty('SolarSystem.majorPlanetsOrbitsColor')
    @solarSystem_majorPlanetsOrbitsColor.setter
    def solarSystem_majorPlanetsOrbitsColor(self, value):
        self._setProperty('SolarSystem.majorPlanetsOrbitsColor', value)
    @property
    def solarSystem_marsOrbitColor(self):
        """SolarSystem.marsOrbitColor (Vector3<float>)"""
        return self._getProperty('SolarSystem.marsOrbitColor')
    @solarSystem_marsOrbitColor.setter
    def solarSystem_marsOrbitColor(self, value):
        self._setProperty('SolarSystem.marsOrbitColor', value)
    @property
    def solarSystem_maxTrailPoints(self):
        """SolarSystem.maxTrailPoints (int)"""
        return self._getProperty('SolarSystem.maxTrailPoints')
    @solarSystem_maxTrailPoints.setter
    def solarSystem_maxTrailPoints(self, value):
        self._setProperty('SolarSystem.maxTrailPoints', value)
    @property
    def solarSystem_maxTrailTimeExtent(self):
        """SolarSystem.maxTrailTimeExtent (int)"""
        return self._getProperty('SolarSystem.maxTrailTimeExtent')
    @solarSystem_maxTrailTimeExtent.setter
    def solarSystem_maxTrailTimeExtent(self, value):
        self._setProperty('SolarSystem.maxTrailTimeExtent', value)
    @property
    def solarSystem_mercuryOrbitColor(self):
        """SolarSystem.mercuryOrbitColor (Vector3<float>)"""
        return self._getProperty('SolarSystem.mercuryOrbitColor')
    @solarSystem_mercuryOrbitColor.setter
    def solarSystem_mercuryOrbitColor(self, value):
        self._setProperty('SolarSystem.mercuryOrbitColor', value)
    @property
    def solarSystem_minorBodyScale(self):
        """SolarSystem.minorBodyScale (double)"""
        return self._getProperty('SolarSystem.minorBodyScale')
    @solarSystem_minorBodyScale.setter
    def solarSystem_minorBodyScale(self, value):
        self._setProperty('SolarSystem.minorBodyScale', value)
    @property
    def solarSystem_minorPlanetsOrbitsColor(self):
        """SolarSystem.minorPlanetsOrbitsColor (Vector3<float>)"""
        return self._getProperty('SolarSystem.minorPlanetsOrbitsColor')
    @solarSystem_minorPlanetsOrbitsColor.setter
    def solarSystem_minorPlanetsOrbitsColor(self, value):
        self._setProperty('SolarSystem.minorPlanetsOrbitsColor', value)
    @property
    def solarSystem_moonScale(self):
        """SolarSystem.moonScale (double)"""
        return self._getProperty('SolarSystem.moonScale')
    @solarSystem_moonScale.setter
    def solarSystem_moonScale(self, value):
        self._setProperty('SolarSystem.moonScale', value)
    @property
    def solarSystem_moonsOrbitsColor(self):
        """SolarSystem.moonsOrbitsColor (Vector3<float>)"""
        return self._getProperty('SolarSystem.moonsOrbitsColor')
    @solarSystem_moonsOrbitsColor.setter
    def solarSystem_moonsOrbitsColor(self, value):
        self._setProperty('SolarSystem.moonsOrbitsColor', value)
    @property
    def solarSystem_neptuneOrbitColor(self):
        """SolarSystem.neptuneOrbitColor (Vector3<float>)"""
        return self._getProperty('SolarSystem.neptuneOrbitColor')
    @solarSystem_neptuneOrbitColor.setter
    def solarSystem_neptuneOrbitColor(self, value):
        self._setProperty('SolarSystem.neptuneOrbitColor', value)
    @property
    def solarSystem_numberIsolatedTrails(self):
        """SolarSystem.numberIsolatedTrails (int)"""
        return self._getProperty('SolarSystem.numberIsolatedTrails')
    @solarSystem_numberIsolatedTrails.setter
    def solarSystem_numberIsolatedTrails(self, value):
        self._setProperty('SolarSystem.numberIsolatedTrails', value)
    @property
    def solarSystem_oortCloudObjectsOrbitsColor(self):
        """SolarSystem.oortCloudObjectsOrbitsColor (Vector3<float>)"""
        return self._getProperty('SolarSystem.oortCloudObjectsOrbitsColor')
    @solarSystem_oortCloudObjectsOrbitsColor.setter
    def solarSystem_oortCloudObjectsOrbitsColor(self, value):
        self._setProperty('SolarSystem.oortCloudObjectsOrbitsColor', value)
    @property
    def solarSystem_orbitColorStyle(self):
        """SolarSystem.orbitColorStyle (QString)"""
        return self._getProperty('SolarSystem.orbitColorStyle')
    @solarSystem_orbitColorStyle.setter
    def solarSystem_orbitColorStyle(self, value):
        self._setProperty('SolarSystem.orbitColorStyle', value)
    @property
    def solarSystem_orbitsColor(self):
        """SolarSystem.orbitsColor (Vector3<float>)"""
        return self._getProperty('SolarSystem.orbitsColor')
    @solarSystem_orbitsColor.setter
    def solarSystem_orbitsColor(self, value):
        self._setProperty('SolarSystem.orbitsColor', value)
    @property
    def solarSystem_orbitsThickness(self):
        """SolarSystem.orbitsThickness (int)"""
        return self._getProperty('SolarSystem.orbitsThickness')
    @solarSystem_orbitsThickness.setter
    def solarSystem_orbitsThickness(self, value):
        self._setProperty('SolarSystem.orbitsThickness', value)
    @property
    def solarSystem_planetScale(self):
        """SolarSystem.planetScale (double)"""
        return self._getProperty('SolarSystem.planetScale')
    @solarSystem_planetScale.setter
    def solarSystem_planetScale(self, value):
        self._setProperty('SolarSystem.planetScale', value)
    @property
    def solarSystem_planetsDisplayed(self):
        """SolarSystem.planetsDisplayed (bool)"""
        return self._getProperty('SolarSystem.planetsDisplayed')
    @solarSystem_planetsDisplayed.setter
    def solarSystem_planetsDisplayed(self, value):
        self._setProperty('SolarSystem.planetsDisplayed', value)
    @property
    def solarSystem_plutinosOrbitsColor(self):
        """SolarSystem.plutinosOrbitsColor (Vector3<float>)"""
        return self._getProperty('SolarSystem.plutinosOrbitsColor')
    @solarSystem_plutinosOrbitsColor.setter
    def solarSystem_plutinosOrbitsColor(self, value):
        self._setProperty('SolarSystem.plutinosOrbitsColor', value)
    @property
    def solarSystem_pointerColor(self):
        """SolarSystem.pointerColor (Vector3<float>)"""
        return self._getProperty('SolarSystem.pointerColor')
    @solarSystem_pointerColor.setter
    def solarSystem_pointerColor(self, value):
        self._setProperty('SolarSystem.pointerColor', value)
    @property
    def solarSystem_saturnOrbitColor(self):
        """SolarSystem.saturnOrbitColor (Vector3<float>)"""
        return self._getProperty('SolarSystem.saturnOrbitColor')
    @solarSystem_saturnOrbitColor.setter
    def solarSystem_saturnOrbitColor(self, value):
        self._setProperty('SolarSystem.saturnOrbitColor', value)
    @property
    def solarSystem_scatteredDiskObjectsOrbitsColor(self):
        """SolarSystem.scatteredDiskObjectsOrbitsColor (Vector3<float>)"""
        return self._getProperty('SolarSystem.scatteredDiskObjectsOrbitsColor')
    @solarSystem_scatteredDiskObjectsOrbitsColor.setter
    def solarSystem_scatteredDiskObjectsOrbitsColor(self, value):
        self._setProperty('SolarSystem.scatteredDiskObjectsOrbitsColor', value)
    @property
    def solarSystem_sednoidsOrbitsColor(self):
        """SolarSystem.sednoidsOrbitsColor (Vector3<float>)"""
        return self._getProperty('SolarSystem.sednoidsOrbitsColor')
    @solarSystem_sednoidsOrbitsColor.setter
    def solarSystem_sednoidsOrbitsColor(self, value):
        self._setProperty('SolarSystem.sednoidsOrbitsColor', value)
    @property
    def solarSystem_sunScale(self):
        """SolarSystem.sunScale (double)"""
        return self._getProperty('SolarSystem.sunScale')
    @solarSystem_sunScale.setter
    def solarSystem_sunScale(self, value):
        self._setProperty('SolarSystem.sunScale', value)
    @property
    def solarSystem_trailsColor(self):
        """SolarSystem.trailsColor (Vector3<float>)"""
        return self._getProperty('SolarSystem.trailsColor')
    @solarSystem_trailsColor.setter
    def solarSystem_trailsColor(self, value):
        self._setProperty('SolarSystem.trailsColor', value)
    @property
    def solarSystem_trailsDisplayed(self):
        """SolarSystem.trailsDisplayed (bool)"""
        return self._getProperty('SolarSystem.trailsDisplayed')
    @solarSystem_trailsDisplayed.setter
    def solarSystem_trailsDisplayed(self, value):
        self._setProperty('SolarSystem.trailsDisplayed', value)
    @property
    def solarSystem_trailsThickness(self):
        """SolarSystem.trailsThickness (int)"""
        return self._getProperty('SolarSystem.trailsThickness')
    @solarSystem_trailsThickness.setter
    def solarSystem_trailsThickness(self, value):
        self._setProperty('SolarSystem.trailsThickness', value)
    @property
    def solarSystem_uranusOrbitColor(self):
        """SolarSystem.uranusOrbitColor (Vector3<float>)"""
        return self._getProperty('SolarSystem.uranusOrbitColor')
    @solarSystem_uranusOrbitColor.setter
    def solarSystem_uranusOrbitColor(self, value):
        self._setProperty('SolarSystem.uranusOrbitColor', value)
    @property
    def solarSystem_venusOrbitColor(self):
        """SolarSystem.venusOrbitColor (Vector3<float>)"""
        return self._getProperty('SolarSystem.venusOrbitColor')
    @solarSystem_venusOrbitColor.setter
    def solarSystem_venusOrbitColor(self, value):
        self._setProperty('SolarSystem.venusOrbitColor', value)
    @property
    def specialMarkersMgr_compassMarksColor(self):
        """SpecialMarkersMgr.compassMarksColor (Vector3<float>)"""
        return self._getProperty('SpecialMarkersMgr.compassMarksColor')
    @specialMarkersMgr_compassMarksColor.setter
    def specialMarkersMgr_compassMarksColor(self, value):
        self._setProperty('SpecialMarkersMgr.compassMarksColor', value)
    @property
    def specialMarkersMgr_compassMarksDisplayed(self):
        """SpecialMarkersMgr.compassMarksDisplayed (bool)"""
        return self._getProperty('SpecialMarkersMgr.compassMarksDisplayed')
    @specialMarkersMgr_compassMarksDisplayed.setter
    def specialMarkersMgr_compassMarksDisplayed(self, value):
        self._setProperty('SpecialMarkersMgr.compassMarksDisplayed', value)
    @property
    def specialMarkersMgr_fovCenterMarkerColor(self):
        """SpecialMarkersMgr.fovCenterMarkerColor (Vector3<float>)"""
        return self._getProperty('SpecialMarkersMgr.fovCenterMarkerColor')
    @specialMarkersMgr_fovCenterMarkerColor.setter
    def specialMarkersMgr_fovCenterMarkerColor(self, value):
        self._setProperty('SpecialMarkersMgr.fovCenterMarkerColor', value)
    @property
    def specialMarkersMgr_fovCenterMarkerDisplayed(self):
        """SpecialMarkersMgr.fovCenterMarkerDisplayed (bool)"""
        return self._getProperty('SpecialMarkersMgr.fovCenterMarkerDisplayed')
    @specialMarkersMgr_fovCenterMarkerDisplayed.setter
    def specialMarkersMgr_fovCenterMarkerDisplayed(self, value):
        self._setProperty('SpecialMarkersMgr.fovCenterMarkerDisplayed', value)
    @property
    def specialMarkersMgr_fovCircularMarkerColor(self):
        """SpecialMarkersMgr.fovCircularMarkerColor (Vector3<float>)"""
        return self._getProperty('SpecialMarkersMgr.fovCircularMarkerColor')
    @specialMarkersMgr_fovCircularMarkerColor.setter
    def specialMarkersMgr_fovCircularMarkerColor(self, value):
        self._setProperty('SpecialMarkersMgr.fovCircularMarkerColor', value)
    @property
    def specialMarkersMgr_fovCircularMarkerDisplayed(self):
        """SpecialMarkersMgr.fovCircularMarkerDisplayed (bool)"""
        return self._getProperty('SpecialMarkersMgr.fovCircularMarkerDisplayed')
    @specialMarkersMgr_fovCircularMarkerDisplayed.setter
    def specialMarkersMgr_fovCircularMarkerDisplayed(self, value):
        self._setProperty('SpecialMarkersMgr.fovCircularMarkerDisplayed', value)
    @property
    def specialMarkersMgr_fovCircularMarkerSize(self):
        """SpecialMarkersMgr.fovCircularMarkerSize (double)"""
        return self._getProperty('SpecialMarkersMgr.fovCircularMarkerSize')
    @specialMarkersMgr_fovCircularMarkerSize.setter
    def specialMarkersMgr_fovCircularMarkerSize(self, value):
        self._setProperty('SpecialMarkersMgr.fovCircularMarkerSize', value)
    @property
    def specialMarkersMgr_fovRectangularMarkerColor(self):
        """SpecialMarkersMgr.fovRectangularMarkerColor (Vector3<float>)"""
        return self._getProperty('SpecialMarkersMgr.fovRectangularMarkerColor')
    @specialMarkersMgr_fovRectangularMarkerColor.setter
    def specialMarkersMgr_fovRectangularMarkerColor(self, value):
        self._setProperty('SpecialMarkersMgr.fovRectangularMarkerColor', value)
    @property
    def specialMarkersMgr_fovRectangularMarkerDisplayed(self):
        """SpecialMarkersMgr.fovRectangularMarkerDisplayed (bool)"""
        return self._getProperty('SpecialMarkersMgr.fovRectangularMarkerDisplayed')
    @specialMarkersMgr_fovRectangularMarkerDisplayed.setter
    def specialMarkersMgr_fovRectangularMarkerDisplayed(self, value):
        self._setProperty('SpecialMarkersMgr.fovRectangularMarkerDisplayed', value)
    @property
    def specialMarkersMgr_fovRectangularMarkerHeight(self):
        """SpecialMarkersMgr.fovRectangularMarkerHeight (double)"""
        return self._getProperty('SpecialMarkersMgr.fovRectangularMarkerHeight')
    @specialMarkersMgr_fovRectangularMarkerHeight.setter
    def specialMarkersMgr_fovRectangularMarkerHeight(self, value):
        self._setProperty('SpecialMarkersMgr.fovRectangularMarkerHeight', value)
    @property
    def specialMarkersMgr_fovRectangularMarkerRotationAngle(self):
        """SpecialMarkersMgr.fovRectangularMarkerRotationAngle (double)"""
        return self._getProperty('SpecialMarkersMgr.fovRectangularMarkerRotationAngle')
    @specialMarkersMgr_fovRectangularMarkerRotationAngle.setter
    def specialMarkersMgr_fovRectangularMarkerRotationAngle(self, value):
        self._setProperty('SpecialMarkersMgr.fovRectangularMarkerRotationAngle', value)
    @property
    def specialMarkersMgr_fovRectangularMarkerWidth(self):
        """SpecialMarkersMgr.fovRectangularMarkerWidth (double)"""
        return self._getProperty('SpecialMarkersMgr.fovRectangularMarkerWidth')
    @specialMarkersMgr_fovRectangularMarkerWidth.setter
    def specialMarkersMgr_fovRectangularMarkerWidth(self, value):
        self._setProperty('SpecialMarkersMgr.fovRectangularMarkerWidth', value)
    @property
    def specificTimeMgr_twilightAltitude(self):
        """SpecificTimeMgr.twilightAltitude (double)"""
        return self._getProperty('SpecificTimeMgr.twilightAltitude')
    @specificTimeMgr_twilightAltitude.setter
    def specificTimeMgr_twilightAltitude(self, value):
        self._setProperty('SpecificTimeMgr.twilightAltitude', value)
    @property
    def sporadicMeteorMgr_zhr(self):
        """SporadicMeteorMgr.zhr (int)"""
        return self._getProperty('SporadicMeteorMgr.zhr')
    @sporadicMeteorMgr_zhr.setter
    def sporadicMeteorMgr_zhr(self, value):
        self._setProperty('SporadicMeteorMgr.zhr', value)
    @property
    def starMgr_flagAdditionalNamesDisplayed(self):
        """StarMgr.flagAdditionalNamesDisplayed (bool)"""
        return self._getProperty('StarMgr.flagAdditionalNamesDisplayed')
    @starMgr_flagAdditionalNamesDisplayed.setter
    def starMgr_flagAdditionalNamesDisplayed(self, value):
        self._setProperty('StarMgr.flagAdditionalNamesDisplayed', value)
    @property
    def starMgr_flagDblStarsDesignation(self):
        """StarMgr.flagDblStarsDesignation (bool)"""
        return self._getProperty('StarMgr.flagDblStarsDesignation')
    @starMgr_flagDblStarsDesignation.setter
    def starMgr_flagDblStarsDesignation(self, value):
        self._setProperty('StarMgr.flagDblStarsDesignation', value)
    @property
    def starMgr_flagDesignationLabels(self):
        """StarMgr.flagDesignationLabels (bool)"""
        return self._getProperty('StarMgr.flagDesignationLabels')
    @starMgr_flagDesignationLabels.setter
    def starMgr_flagDesignationLabels(self, value):
        self._setProperty('StarMgr.flagDesignationLabels', value)
    @property
    def starMgr_flagHIPDesignation(self):
        """StarMgr.flagHIPDesignation (bool)"""
        return self._getProperty('StarMgr.flagHIPDesignation')
    @starMgr_flagHIPDesignation.setter
    def starMgr_flagHIPDesignation(self, value):
        self._setProperty('StarMgr.flagHIPDesignation', value)
    @property
    def starMgr_flagLabelsDisplayed(self):
        """StarMgr.flagLabelsDisplayed (bool)"""
        return self._getProperty('StarMgr.flagLabelsDisplayed')
    @starMgr_flagLabelsDisplayed.setter
    def starMgr_flagLabelsDisplayed(self, value):
        self._setProperty('StarMgr.flagLabelsDisplayed', value)
    @property
    def starMgr_flagStarsDisplayed(self):
        """StarMgr.flagStarsDisplayed (bool)"""
        return self._getProperty('StarMgr.flagStarsDisplayed')
    @starMgr_flagStarsDisplayed.setter
    def starMgr_flagStarsDisplayed(self, value):
        self._setProperty('StarMgr.flagStarsDisplayed', value)
    @property
    def starMgr_flagVarStarsDesignation(self):
        """StarMgr.flagVarStarsDesignation (bool)"""
        return self._getProperty('StarMgr.flagVarStarsDesignation')
    @starMgr_flagVarStarsDesignation.setter
    def starMgr_flagVarStarsDesignation(self, value):
        self._setProperty('StarMgr.flagVarStarsDesignation', value)
    @property
    def starMgr_labelsAmount(self):
        """StarMgr.labelsAmount (double)"""
        return self._getProperty('StarMgr.labelsAmount')
    @starMgr_labelsAmount.setter
    def starMgr_labelsAmount(self, value):
        self._setProperty('StarMgr.labelsAmount', value)
    @property
    def stelApp_daylightInfoColor(self):
        """StelApp.daylightInfoColor (Vector3<float>)"""
        return self._getProperty('StelApp.daylightInfoColor')
    @stelApp_daylightInfoColor.setter
    def stelApp_daylightInfoColor(self, value):
        self._setProperty('StelApp.daylightInfoColor', value)
    @property
    def stelApp_flagOverwriteInfoColor(self):
        """StelApp.flagOverwriteInfoColor (bool)"""
        return self._getProperty('StelApp.flagOverwriteInfoColor')
    @stelApp_flagOverwriteInfoColor.setter
    def stelApp_flagOverwriteInfoColor(self, value):
        self._setProperty('StelApp.flagOverwriteInfoColor', value)
    @property
    def stelApp_flagShowDecimalDegrees(self):
        """StelApp.flagShowDecimalDegrees (bool)"""
        return self._getProperty('StelApp.flagShowDecimalDegrees')
    @stelApp_flagShowDecimalDegrees.setter
    def stelApp_flagShowDecimalDegrees(self, value):
        self._setProperty('StelApp.flagShowDecimalDegrees', value)
    @property
    def stelApp_flagUseAzimuthFromSouth(self):
        """StelApp.flagUseAzimuthFromSouth (bool)"""
        return self._getProperty('StelApp.flagUseAzimuthFromSouth')
    @stelApp_flagUseAzimuthFromSouth.setter
    def stelApp_flagUseAzimuthFromSouth(self, value):
        self._setProperty('StelApp.flagUseAzimuthFromSouth', value)
    @property
    def stelApp_flagUseCCSDesignation(self):
        """StelApp.flagUseCCSDesignation (bool)"""
        return self._getProperty('StelApp.flagUseCCSDesignation')
    @stelApp_flagUseCCSDesignation.setter
    def stelApp_flagUseCCSDesignation(self, value):
        self._setProperty('StelApp.flagUseCCSDesignation', value)
    @property
    def stelApp_flagUseFormattingOutput(self):
        """StelApp.flagUseFormattingOutput (bool)"""
        return self._getProperty('StelApp.flagUseFormattingOutput')
    @stelApp_flagUseFormattingOutput.setter
    def stelApp_flagUseFormattingOutput(self, value):
        self._setProperty('StelApp.flagUseFormattingOutput', value)
    @property
    def stelApp_guiFontSize(self):
        """StelApp.guiFontSize (int)"""
        return self._getProperty('StelApp.guiFontSize')
    @stelApp_guiFontSize.setter
    def stelApp_guiFontSize(self, value):
        self._setProperty('StelApp.guiFontSize', value)
    @property
    def stelApp_nightMode(self):
        """StelApp.nightMode (bool)"""
        return self._getProperty('StelApp.nightMode')
    @stelApp_nightMode.setter
    def stelApp_nightMode(self, value):
        self._setProperty('StelApp.nightMode', value)
    @property
    def stelApp_overwriteInfoColor(self):
        """StelApp.overwriteInfoColor (Vector3<float>)"""
        return self._getProperty('StelApp.overwriteInfoColor')
    @stelApp_overwriteInfoColor.setter
    def stelApp_overwriteInfoColor(self, value):
        self._setProperty('StelApp.overwriteInfoColor', value)
    @property
    def stelApp_screenFontSize(self):
        """StelApp.screenFontSize (int)"""
        return self._getProperty('StelApp.screenFontSize')
    @stelApp_screenFontSize.setter
    def stelApp_screenFontSize(self, value):
        self._setProperty('StelApp.screenFontSize', value)
    @property
    def stelApp_version(self):
        """StelApp.version (QString)"""
        return self._getProperty('StelApp.version')
    @stelApp_version.setter
    def stelApp_version(self, value):
        self._setProperty('StelApp.version', value)
    @property
    def stelCore_aberrationFactor(self):
        """StelCore.aberrationFactor (double)"""
        return self._getProperty('StelCore.aberrationFactor')
    @stelCore_aberrationFactor.setter
    def stelCore_aberrationFactor(self, value):
        self._setProperty('StelCore.aberrationFactor', value)
    @property
    def stelCore_currentProjectionNameI18n(self):
        """StelCore.currentProjectionNameI18n (QString)"""
        return self._getProperty('StelCore.currentProjectionNameI18n')
    @stelCore_currentProjectionNameI18n.setter
    def stelCore_currentProjectionNameI18n(self, value):
        self._setProperty('StelCore.currentProjectionNameI18n', value)
    @property
    def stelCore_currentProjectionType(self):
        """StelCore.currentProjectionType (StelCore::ProjectionType)"""
        return self._getProperty('StelCore.currentProjectionType')
    @stelCore_currentProjectionType.setter
    def stelCore_currentProjectionType(self, value):
        self._setProperty('StelCore.currentProjectionType', value)
    @property
    def stelCore_currentProjectionTypeKey(self):
        """StelCore.currentProjectionTypeKey (QString)"""
        return self._getProperty('StelCore.currentProjectionTypeKey')
    @stelCore_currentProjectionTypeKey.setter
    def stelCore_currentProjectionTypeKey(self, value):
        self._setProperty('StelCore.currentProjectionTypeKey', value)
    @property
    def stelCore_currentTimeZone(self):
        """StelCore.currentTimeZone (QString)"""
        return self._getProperty('StelCore.currentTimeZone')
    @stelCore_currentTimeZone.setter
    def stelCore_currentTimeZone(self, value):
        self._setProperty('StelCore.currentTimeZone', value)
    @property
    def stelCore_ditheringMode(self):
        """StelCore.ditheringMode (DitheringMode)"""
        return self._getProperty('StelCore.ditheringMode')
    @stelCore_ditheringMode.setter
    def stelCore_ditheringMode(self, value):
        self._setProperty('StelCore.ditheringMode', value)
    @property
    def stelCore_flagGravityLabels(self):
        """StelCore.flagGravityLabels (bool)"""
        return self._getProperty('StelCore.flagGravityLabels')
    @stelCore_flagGravityLabels.setter
    def stelCore_flagGravityLabels(self, value):
        self._setProperty('StelCore.flagGravityLabels', value)
    @property
    def stelCore_flagUseAberration(self):
        """StelCore.flagUseAberration (bool)"""
        return self._getProperty('StelCore.flagUseAberration')
    @stelCore_flagUseAberration.setter
    def stelCore_flagUseAberration(self, value):
        self._setProperty('StelCore.flagUseAberration', value)
    @property
    def stelCore_flagUseCTZ(self):
        """StelCore.flagUseCTZ (bool)"""
        return self._getProperty('StelCore.flagUseCTZ')
    @stelCore_flagUseCTZ.setter
    def stelCore_flagUseCTZ(self, value):
        self._setProperty('StelCore.flagUseCTZ', value)
    @property
    def stelCore_flagUseDST(self):
        """StelCore.flagUseDST (bool)"""
        return self._getProperty('StelCore.flagUseDST')
    @stelCore_flagUseDST.setter
    def stelCore_flagUseDST(self, value):
        self._setProperty('StelCore.flagUseDST', value)
    @property
    def stelCore_flagUseNutation(self):
        """StelCore.flagUseNutation (bool)"""
        return self._getProperty('StelCore.flagUseNutation')
    @stelCore_flagUseNutation.setter
    def stelCore_flagUseNutation(self, value):
        self._setProperty('StelCore.flagUseNutation', value)
    @property
    def stelCore_flagUseTopocentricCoordinates(self):
        """StelCore.flagUseTopocentricCoordinates (bool)"""
        return self._getProperty('StelCore.flagUseTopocentricCoordinates')
    @stelCore_flagUseTopocentricCoordinates.setter
    def stelCore_flagUseTopocentricCoordinates(self, value):
        self._setProperty('StelCore.flagUseTopocentricCoordinates', value)
    @property
    def stelCore_flipHorz(self):
        """StelCore.flipHorz (bool)"""
        return self._getProperty('StelCore.flipHorz')
    @stelCore_flipHorz.setter
    def stelCore_flipHorz(self, value):
        self._setProperty('StelCore.flipHorz', value)
    @property
    def stelCore_flipVert(self):
        """StelCore.flipVert (bool)"""
        return self._getProperty('StelCore.flipVert')
    @stelCore_flipVert.setter
    def stelCore_flipVert(self, value):
        self._setProperty('StelCore.flipVert', value)
    @property
    def stelGui_autoHideHorizontalButtonBar(self):
        """StelGui.autoHideHorizontalButtonBar (bool)"""
        return self._getProperty('StelGui.autoHideHorizontalButtonBar')
    @stelGui_autoHideHorizontalButtonBar.setter
    def stelGui_autoHideHorizontalButtonBar(self, value):
        self._setProperty('StelGui.autoHideHorizontalButtonBar', value)
    @property
    def stelGui_autoHideVerticalButtonBar(self):
        """StelGui.autoHideVerticalButtonBar (bool)"""
        return self._getProperty('StelGui.autoHideVerticalButtonBar')
    @stelGui_autoHideVerticalButtonBar.setter
    def stelGui_autoHideVerticalButtonBar(self, value):
        self._setProperty('StelGui.autoHideVerticalButtonBar', value)
    @property
    def stelGui_flagEnableFocusOnDaySpinner(self):
        """StelGui.flagEnableFocusOnDaySpinner (bool)"""
        return self._getProperty('StelGui.flagEnableFocusOnDaySpinner')
    @stelGui_flagEnableFocusOnDaySpinner.setter
    def stelGui_flagEnableFocusOnDaySpinner(self, value):
        self._setProperty('StelGui.flagEnableFocusOnDaySpinner', value)
    @property
    def stelGui_flagShowAsterismLabelsButton(self):
        """StelGui.flagShowAsterismLabelsButton (bool)"""
        return self._getProperty('StelGui.flagShowAsterismLabelsButton')
    @stelGui_flagShowAsterismLabelsButton.setter
    def stelGui_flagShowAsterismLabelsButton(self, value):
        self._setProperty('StelGui.flagShowAsterismLabelsButton', value)
    @property
    def stelGui_flagShowAsterismLinesButton(self):
        """StelGui.flagShowAsterismLinesButton (bool)"""
        return self._getProperty('StelGui.flagShowAsterismLinesButton')
    @stelGui_flagShowAsterismLinesButton.setter
    def stelGui_flagShowAsterismLinesButton(self, value):
        self._setProperty('StelGui.flagShowAsterismLinesButton', value)
    @property
    def stelGui_flagShowCardinalButton(self):
        """StelGui.flagShowCardinalButton (bool)"""
        return self._getProperty('StelGui.flagShowCardinalButton')
    @stelGui_flagShowCardinalButton.setter
    def stelGui_flagShowCardinalButton(self, value):
        self._setProperty('StelGui.flagShowCardinalButton', value)
    @property
    def stelGui_flagShowCompassButton(self):
        """StelGui.flagShowCompassButton (bool)"""
        return self._getProperty('StelGui.flagShowCompassButton')
    @stelGui_flagShowCompassButton.setter
    def stelGui_flagShowCompassButton(self, value):
        self._setProperty('StelGui.flagShowCompassButton', value)
    @property
    def stelGui_flagShowConstellationBoundariesButton(self):
        """StelGui.flagShowConstellationBoundariesButton (bool)"""
        return self._getProperty('StelGui.flagShowConstellationBoundariesButton')
    @stelGui_flagShowConstellationBoundariesButton.setter
    def stelGui_flagShowConstellationBoundariesButton(self, value):
        self._setProperty('StelGui.flagShowConstellationBoundariesButton', value)
    @property
    def stelGui_flagShowDSSButton(self):
        """StelGui.flagShowDSSButton (bool)"""
        return self._getProperty('StelGui.flagShowDSSButton')
    @stelGui_flagShowDSSButton.setter
    def stelGui_flagShowDSSButton(self, value):
        self._setProperty('StelGui.flagShowDSSButton', value)
    @property
    def stelGui_flagShowEclipticGridButton(self):
        """StelGui.flagShowEclipticGridButton (bool)"""
        return self._getProperty('StelGui.flagShowEclipticGridButton')
    @stelGui_flagShowEclipticGridButton.setter
    def stelGui_flagShowEclipticGridButton(self, value):
        self._setProperty('StelGui.flagShowEclipticGridButton', value)
    @property
    def stelGui_flagShowFlipButtons(self):
        """StelGui.flagShowFlipButtons (bool)"""
        return self._getProperty('StelGui.flagShowFlipButtons')
    @stelGui_flagShowFlipButtons.setter
    def stelGui_flagShowFlipButtons(self, value):
        self._setProperty('StelGui.flagShowFlipButtons', value)
    @property
    def stelGui_flagShowFullscreenButton(self):
        """StelGui.flagShowFullscreenButton (bool)"""
        return self._getProperty('StelGui.flagShowFullscreenButton')
    @stelGui_flagShowFullscreenButton.setter
    def stelGui_flagShowFullscreenButton(self, value):
        self._setProperty('StelGui.flagShowFullscreenButton', value)
    @property
    def stelGui_flagShowGalacticGridButton(self):
        """StelGui.flagShowGalacticGridButton (bool)"""
        return self._getProperty('StelGui.flagShowGalacticGridButton')
    @stelGui_flagShowGalacticGridButton.setter
    def stelGui_flagShowGalacticGridButton(self, value):
        self._setProperty('StelGui.flagShowGalacticGridButton', value)
    @property
    def stelGui_flagShowGotoSelectedObjectButton(self):
        """StelGui.flagShowGotoSelectedObjectButton (bool)"""
        return self._getProperty('StelGui.flagShowGotoSelectedObjectButton')
    @stelGui_flagShowGotoSelectedObjectButton.setter
    def stelGui_flagShowGotoSelectedObjectButton(self, value):
        self._setProperty('StelGui.flagShowGotoSelectedObjectButton', value)
    @property
    def stelGui_flagShowHiPSButton(self):
        """StelGui.flagShowHiPSButton (bool)"""
        return self._getProperty('StelGui.flagShowHiPSButton')
    @stelGui_flagShowHiPSButton.setter
    def stelGui_flagShowHiPSButton(self, value):
        self._setProperty('StelGui.flagShowHiPSButton', value)
    @property
    def stelGui_flagShowICRSGridButton(self):
        """StelGui.flagShowICRSGridButton (bool)"""
        return self._getProperty('StelGui.flagShowICRSGridButton')
    @stelGui_flagShowICRSGridButton.setter
    def stelGui_flagShowICRSGridButton(self, value):
        self._setProperty('StelGui.flagShowICRSGridButton', value)
    @property
    def stelGui_flagShowNebulaBackgroundButton(self):
        """StelGui.flagShowNebulaBackgroundButton (bool)"""
        return self._getProperty('StelGui.flagShowNebulaBackgroundButton')
    @stelGui_flagShowNebulaBackgroundButton.setter
    def stelGui_flagShowNebulaBackgroundButton(self, value):
        self._setProperty('StelGui.flagShowNebulaBackgroundButton', value)
    @property
    def stelGui_flagShowNightmodeButton(self):
        """StelGui.flagShowNightmodeButton (bool)"""
        return self._getProperty('StelGui.flagShowNightmodeButton')
    @stelGui_flagShowNightmodeButton.setter
    def stelGui_flagShowNightmodeButton(self, value):
        self._setProperty('StelGui.flagShowNightmodeButton', value)
    @property
    def stelGui_flagShowObsListButton(self):
        """StelGui.flagShowObsListButton (bool)"""
        return self._getProperty('StelGui.flagShowObsListButton')
    @stelGui_flagShowObsListButton.setter
    def stelGui_flagShowObsListButton(self, value):
        self._setProperty('StelGui.flagShowObsListButton', value)
    @property
    def stelGui_flagShowQuitButton(self):
        """StelGui.flagShowQuitButton (bool)"""
        return self._getProperty('StelGui.flagShowQuitButton')
    @stelGui_flagShowQuitButton.setter
    def stelGui_flagShowQuitButton(self, value):
        self._setProperty('StelGui.flagShowQuitButton', value)
    @property
    def stelGui_flagUseButtonsBackground(self):
        """StelGui.flagUseButtonsBackground (bool)"""
        return self._getProperty('StelGui.flagUseButtonsBackground')
    @stelGui_flagUseButtonsBackground.setter
    def stelGui_flagUseButtonsBackground(self, value):
        self._setProperty('StelGui.flagUseButtonsBackground', value)
    @property
    def stelGui_flagUseKineticScrolling(self):
        """StelGui.flagUseKineticScrolling (bool)"""
        return self._getProperty('StelGui.flagUseKineticScrolling')
    @stelGui_flagUseKineticScrolling.setter
    def stelGui_flagUseKineticScrolling(self, value):
        self._setProperty('StelGui.flagUseKineticScrolling', value)
    @property
    def stelGui_visible(self):
        """StelGui.visible (bool)"""
        return self._getProperty('StelGui.visible')
    @stelGui_visible.setter
    def stelGui_visible(self, value):
        self._setProperty('StelGui.visible', value)
    @property
    def stelMovementMgr_equatorialMount(self):
        """StelMovementMgr.equatorialMount (bool)"""
        return self._getProperty('StelMovementMgr.equatorialMount')
    @stelMovementMgr_equatorialMount.setter
    def stelMovementMgr_equatorialMount(self, value):
        self._setProperty('StelMovementMgr.equatorialMount', value)
    @property
    def stelMovementMgr_flagAutoZoomOutResetsDirection(self):
        """StelMovementMgr.flagAutoZoomOutResetsDirection (bool)"""
        return self._getProperty('StelMovementMgr.flagAutoZoomOutResetsDirection')
    @stelMovementMgr_flagAutoZoomOutResetsDirection.setter
    def stelMovementMgr_flagAutoZoomOutResetsDirection(self, value):
        self._setProperty('StelMovementMgr.flagAutoZoomOutResetsDirection', value)
    @property
    def stelMovementMgr_flagEnableMouseNavigation(self):
        """StelMovementMgr.flagEnableMouseNavigation (bool)"""
        return self._getProperty('StelMovementMgr.flagEnableMouseNavigation')
    @stelMovementMgr_flagEnableMouseNavigation.setter
    def stelMovementMgr_flagEnableMouseNavigation(self, value):
        self._setProperty('StelMovementMgr.flagEnableMouseNavigation', value)
    @property
    def stelMovementMgr_flagEnableMouseZooming(self):
        """StelMovementMgr.flagEnableMouseZooming (bool)"""
        return self._getProperty('StelMovementMgr.flagEnableMouseZooming')
    @stelMovementMgr_flagEnableMouseZooming.setter
    def stelMovementMgr_flagEnableMouseZooming(self, value):
        self._setProperty('StelMovementMgr.flagEnableMouseZooming', value)
    @property
    def stelMovementMgr_flagEnableMoveKeys(self):
        """StelMovementMgr.flagEnableMoveKeys (bool)"""
        return self._getProperty('StelMovementMgr.flagEnableMoveKeys')
    @stelMovementMgr_flagEnableMoveKeys.setter
    def stelMovementMgr_flagEnableMoveKeys(self, value):
        self._setProperty('StelMovementMgr.flagEnableMoveKeys', value)
    @property
    def stelMovementMgr_flagEnableZoomKeys(self):
        """StelMovementMgr.flagEnableZoomKeys (bool)"""
        return self._getProperty('StelMovementMgr.flagEnableZoomKeys')
    @stelMovementMgr_flagEnableZoomKeys.setter
    def stelMovementMgr_flagEnableZoomKeys(self, value):
        self._setProperty('StelMovementMgr.flagEnableZoomKeys', value)
    @property
    def stelMovementMgr_flagIndicationMountMode(self):
        """StelMovementMgr.flagIndicationMountMode (bool)"""
        return self._getProperty('StelMovementMgr.flagIndicationMountMode')
    @stelMovementMgr_flagIndicationMountMode.setter
    def stelMovementMgr_flagIndicationMountMode(self, value):
        self._setProperty('StelMovementMgr.flagIndicationMountMode', value)
    @property
    def stelMovementMgr_tracking(self):
        """StelMovementMgr.tracking (bool)"""
        return self._getProperty('StelMovementMgr.tracking')
    @stelMovementMgr_tracking.setter
    def stelMovementMgr_tracking(self, value):
        self._setProperty('StelMovementMgr.tracking', value)
    @property
    def stelMovementMgr_userMaxFov(self):
        """StelMovementMgr.userMaxFov (double)"""
        return self._getProperty('StelMovementMgr.userMaxFov')
    @stelMovementMgr_userMaxFov.setter
    def stelMovementMgr_userMaxFov(self, value):
        self._setProperty('StelMovementMgr.userMaxFov', value)
    @property
    def stelMovementMgr_viewportHorizontalOffsetTarget(self):
        """StelMovementMgr.viewportHorizontalOffsetTarget (double)"""
        return self._getProperty('StelMovementMgr.viewportHorizontalOffsetTarget')
    @stelMovementMgr_viewportHorizontalOffsetTarget.setter
    def stelMovementMgr_viewportHorizontalOffsetTarget(self, value):
        self._setProperty('StelMovementMgr.viewportHorizontalOffsetTarget', value)
    @property
    def stelMovementMgr_viewportVerticalOffsetTarget(self):
        """StelMovementMgr.viewportVerticalOffsetTarget (double)"""
        return self._getProperty('StelMovementMgr.viewportVerticalOffsetTarget')
    @stelMovementMgr_viewportVerticalOffsetTarget.setter
    def stelMovementMgr_viewportVerticalOffsetTarget(self, value):
        self._setProperty('StelMovementMgr.viewportVerticalOffsetTarget', value)
    @property
    def stelSkyCultureMgr_currentSkyCultureID(self):
        """StelSkyCultureMgr.currentSkyCultureID (QString)"""
        return self._getProperty('StelSkyCultureMgr.currentSkyCultureID')
    @stelSkyCultureMgr_currentSkyCultureID.setter
    def stelSkyCultureMgr_currentSkyCultureID(self, value):
        self._setProperty('StelSkyCultureMgr.currentSkyCultureID', value)
    @property
    def stelSkyCultureMgr_defaultSkyCultureID(self):
        """StelSkyCultureMgr.defaultSkyCultureID (QString)"""
        return self._getProperty('StelSkyCultureMgr.defaultSkyCultureID')
    @stelSkyCultureMgr_defaultSkyCultureID.setter
    def stelSkyCultureMgr_defaultSkyCultureID(self, value):
        self._setProperty('StelSkyCultureMgr.defaultSkyCultureID', value)
    @property
    def stelSkyDrawer_absoluteStarScale(self):
        """StelSkyDrawer.absoluteStarScale (double)"""
        return self._getProperty('StelSkyDrawer.absoluteStarScale')
    @stelSkyDrawer_absoluteStarScale.setter
    def stelSkyDrawer_absoluteStarScale(self, value):
        self._setProperty('StelSkyDrawer.absoluteStarScale', value)
    @property
    def stelSkyDrawer_atmospherePressure(self):
        """StelSkyDrawer.atmospherePressure (double)"""
        return self._getProperty('StelSkyDrawer.atmospherePressure')
    @stelSkyDrawer_atmospherePressure.setter
    def stelSkyDrawer_atmospherePressure(self, value):
        self._setProperty('StelSkyDrawer.atmospherePressure', value)
    @property
    def stelSkyDrawer_atmosphereTemperature(self):
        """StelSkyDrawer.atmosphereTemperature (double)"""
        return self._getProperty('StelSkyDrawer.atmosphereTemperature')
    @stelSkyDrawer_atmosphereTemperature.setter
    def stelSkyDrawer_atmosphereTemperature(self, value):
        self._setProperty('StelSkyDrawer.atmosphereTemperature', value)
    @property
    def stelSkyDrawer_customNebulaMagLimit(self):
        """StelSkyDrawer.customNebulaMagLimit (double)"""
        return self._getProperty('StelSkyDrawer.customNebulaMagLimit')
    @stelSkyDrawer_customNebulaMagLimit.setter
    def stelSkyDrawer_customNebulaMagLimit(self, value):
        self._setProperty('StelSkyDrawer.customNebulaMagLimit', value)
    @property
    def stelSkyDrawer_customPlanetMagLimit(self):
        """StelSkyDrawer.customPlanetMagLimit (double)"""
        return self._getProperty('StelSkyDrawer.customPlanetMagLimit')
    @stelSkyDrawer_customPlanetMagLimit.setter
    def stelSkyDrawer_customPlanetMagLimit(self, value):
        self._setProperty('StelSkyDrawer.customPlanetMagLimit', value)
    @property
    def stelSkyDrawer_customStarMagLimit(self):
        """StelSkyDrawer.customStarMagLimit (double)"""
        return self._getProperty('StelSkyDrawer.customStarMagLimit')
    @stelSkyDrawer_customStarMagLimit.setter
    def stelSkyDrawer_customStarMagLimit(self, value):
        self._setProperty('StelSkyDrawer.customStarMagLimit', value)
    @property
    def stelSkyDrawer_daylightLabelThreshold(self):
        """StelSkyDrawer.daylightLabelThreshold (double)"""
        return self._getProperty('StelSkyDrawer.daylightLabelThreshold')
    @stelSkyDrawer_daylightLabelThreshold.setter
    def stelSkyDrawer_daylightLabelThreshold(self, value):
        self._setProperty('StelSkyDrawer.daylightLabelThreshold', value)
    @property
    def stelSkyDrawer_extinctionCoefficient(self):
        """StelSkyDrawer.extinctionCoefficient (double)"""
        return self._getProperty('StelSkyDrawer.extinctionCoefficient')
    @stelSkyDrawer_extinctionCoefficient.setter
    def stelSkyDrawer_extinctionCoefficient(self, value):
        self._setProperty('StelSkyDrawer.extinctionCoefficient', value)
    @property
    def stelSkyDrawer_flagDrawBigStarHalo(self):
        """StelSkyDrawer.flagDrawBigStarHalo (bool)"""
        return self._getProperty('StelSkyDrawer.flagDrawBigStarHalo')
    @stelSkyDrawer_flagDrawBigStarHalo.setter
    def stelSkyDrawer_flagDrawBigStarHalo(self, value):
        self._setProperty('StelSkyDrawer.flagDrawBigStarHalo', value)
    @property
    def stelSkyDrawer_flagDrawSunAfterAtmosphere(self):
        """StelSkyDrawer.flagDrawSunAfterAtmosphere (bool)"""
        return self._getProperty('StelSkyDrawer.flagDrawSunAfterAtmosphere')
    @stelSkyDrawer_flagDrawSunAfterAtmosphere.setter
    def stelSkyDrawer_flagDrawSunAfterAtmosphere(self, value):
        self._setProperty('StelSkyDrawer.flagDrawSunAfterAtmosphere', value)
    @property
    def stelSkyDrawer_flagEarlySunHalo(self):
        """StelSkyDrawer.flagEarlySunHalo (bool)"""
        return self._getProperty('StelSkyDrawer.flagEarlySunHalo')
    @stelSkyDrawer_flagEarlySunHalo.setter
    def stelSkyDrawer_flagEarlySunHalo(self, value):
        self._setProperty('StelSkyDrawer.flagEarlySunHalo', value)
    @property
    def stelSkyDrawer_flagLuminanceAdaptation(self):
        """StelSkyDrawer.flagLuminanceAdaptation (bool)"""
        return self._getProperty('StelSkyDrawer.flagLuminanceAdaptation')
    @stelSkyDrawer_flagLuminanceAdaptation.setter
    def stelSkyDrawer_flagLuminanceAdaptation(self, value):
        self._setProperty('StelSkyDrawer.flagLuminanceAdaptation', value)
    @property
    def stelSkyDrawer_flagNebulaMagnitudeLimit(self):
        """StelSkyDrawer.flagNebulaMagnitudeLimit (bool)"""
        return self._getProperty('StelSkyDrawer.flagNebulaMagnitudeLimit')
    @stelSkyDrawer_flagNebulaMagnitudeLimit.setter
    def stelSkyDrawer_flagNebulaMagnitudeLimit(self, value):
        self._setProperty('StelSkyDrawer.flagNebulaMagnitudeLimit', value)
    @property
    def stelSkyDrawer_flagPlanetMagnitudeLimit(self):
        """StelSkyDrawer.flagPlanetMagnitudeLimit (bool)"""
        return self._getProperty('StelSkyDrawer.flagPlanetMagnitudeLimit')
    @stelSkyDrawer_flagPlanetMagnitudeLimit.setter
    def stelSkyDrawer_flagPlanetMagnitudeLimit(self, value):
        self._setProperty('StelSkyDrawer.flagPlanetMagnitudeLimit', value)
    @property
    def stelSkyDrawer_flagStarMagnitudeLimit(self):
        """StelSkyDrawer.flagStarMagnitudeLimit (bool)"""
        return self._getProperty('StelSkyDrawer.flagStarMagnitudeLimit')
    @stelSkyDrawer_flagStarMagnitudeLimit.setter
    def stelSkyDrawer_flagStarMagnitudeLimit(self, value):
        self._setProperty('StelSkyDrawer.flagStarMagnitudeLimit', value)
    @property
    def stelSkyDrawer_flagStarSpiky(self):
        """StelSkyDrawer.flagStarSpiky (bool)"""
        return self._getProperty('StelSkyDrawer.flagStarSpiky')
    @stelSkyDrawer_flagStarSpiky.setter
    def stelSkyDrawer_flagStarSpiky(self, value):
        self._setProperty('StelSkyDrawer.flagStarSpiky', value)
    @property
    def stelSkyDrawer_flagStarTwinkle(self):
        """StelSkyDrawer.flagStarTwinkle (bool)"""
        return self._getProperty('StelSkyDrawer.flagStarTwinkle')
    @stelSkyDrawer_flagStarTwinkle.setter
    def stelSkyDrawer_flagStarTwinkle(self, value):
        self._setProperty('StelSkyDrawer.flagStarTwinkle', value)
    @property
    def stelSkyDrawer_flagTfromK(self):
        """StelSkyDrawer.flagTfromK (bool)"""
        return self._getProperty('StelSkyDrawer.flagTfromK')
    @stelSkyDrawer_flagTfromK.setter
    def stelSkyDrawer_flagTfromK(self, value):
        self._setProperty('StelSkyDrawer.flagTfromK', value)
    @property
    def stelSkyDrawer_lightPollutionLuminance(self):
        """StelSkyDrawer.lightPollutionLuminance (double)"""
        return self._getProperty('StelSkyDrawer.lightPollutionLuminance')
    @stelSkyDrawer_lightPollutionLuminance.setter
    def stelSkyDrawer_lightPollutionLuminance(self, value):
        self._setProperty('StelSkyDrawer.lightPollutionLuminance', value)
    @property
    def stelSkyDrawer_relativeStarScale(self):
        """StelSkyDrawer.relativeStarScale (double)"""
        return self._getProperty('StelSkyDrawer.relativeStarScale')
    @stelSkyDrawer_relativeStarScale.setter
    def stelSkyDrawer_relativeStarScale(self, value):
        self._setProperty('StelSkyDrawer.relativeStarScale', value)
    @property
    def stelSkyDrawer_turbidity(self):
        """StelSkyDrawer.turbidity (double)"""
        return self._getProperty('StelSkyDrawer.turbidity')
    @stelSkyDrawer_turbidity.setter
    def stelSkyDrawer_turbidity(self, value):
        self._setProperty('StelSkyDrawer.turbidity', value)
    @property
    def stelSkyDrawer_twinkleAmount(self):
        """StelSkyDrawer.twinkleAmount (double)"""
        return self._getProperty('StelSkyDrawer.twinkleAmount')
    @stelSkyDrawer_twinkleAmount.setter
    def stelSkyDrawer_twinkleAmount(self, value):
        self._setProperty('StelSkyDrawer.twinkleAmount', value)
    @property
    def stelSkyLayerMgr_flagShow(self):
        """StelSkyLayerMgr.flagShow (bool)"""
        return self._getProperty('StelSkyLayerMgr.flagShow')
    @stelSkyLayerMgr_flagShow.setter
    def stelSkyLayerMgr_flagShow(self, value):
        self._setProperty('StelSkyLayerMgr.flagShow', value)
    @property
    def stelToneReproducer_displayAdaptationLuminance(self):
        """StelToneReproducer.displayAdaptationLuminance (double)"""
        return self._getProperty('StelToneReproducer.displayAdaptationLuminance')
    @stelToneReproducer_displayAdaptationLuminance.setter
    def stelToneReproducer_displayAdaptationLuminance(self, value):
        self._setProperty('StelToneReproducer.displayAdaptationLuminance', value)
    @property
    def stelToneReproducer_displayGamma(self):
        """StelToneReproducer.displayGamma (double)"""
        return self._getProperty('StelToneReproducer.displayGamma')
    @stelToneReproducer_displayGamma.setter
    def stelToneReproducer_displayGamma(self, value):
        self._setProperty('StelToneReproducer.displayGamma', value)
    @property
    def stelToneReproducer_flagSRGB(self):
        """StelToneReproducer.flagSRGB (bool)"""
        return self._getProperty('StelToneReproducer.flagSRGB')
    @stelToneReproducer_flagSRGB.setter
    def stelToneReproducer_flagSRGB(self, value):
        self._setProperty('StelToneReproducer.flagSRGB', value)
    @property
    def stelToneReproducer_flagUseTmGamma(self):
        """StelToneReproducer.flagUseTmGamma (bool)"""
        return self._getProperty('StelToneReproducer.flagUseTmGamma')
    @stelToneReproducer_flagUseTmGamma.setter
    def stelToneReproducer_flagUseTmGamma(self, value):
        self._setProperty('StelToneReproducer.flagUseTmGamma', value)
    @property
    def stelToneReproducer_inputScale(self):
        """StelToneReproducer.inputScale (double)"""
        return self._getProperty('StelToneReproducer.inputScale')
    @stelToneReproducer_inputScale.setter
    def stelToneReproducer_inputScale(self, value):
        self._setProperty('StelToneReproducer.inputScale', value)
    @property
    def stelToneReproducer_maxDisplayLuminance(self):
        """StelToneReproducer.maxDisplayLuminance (double)"""
        return self._getProperty('StelToneReproducer.maxDisplayLuminance')
    @stelToneReproducer_maxDisplayLuminance.setter
    def stelToneReproducer_maxDisplayLuminance(self, value):
        self._setProperty('StelToneReproducer.maxDisplayLuminance', value)
    @property
    def stelToneReproducer_worldAdaptationLuminance(self):
        """StelToneReproducer.worldAdaptationLuminance (double)"""
        return self._getProperty('StelToneReproducer.worldAdaptationLuminance')
    @stelToneReproducer_worldAdaptationLuminance.setter
    def stelToneReproducer_worldAdaptationLuminance(self, value):
        self._setProperty('StelToneReproducer.worldAdaptationLuminance', value)
    @property
    def telescopeControl_circleColor(self):
        """TelescopeControl.circleColor (Vector3<float>)"""
        return self._getProperty('TelescopeControl.circleColor')
    @telescopeControl_circleColor.setter
    def telescopeControl_circleColor(self, value):
        self._setProperty('TelescopeControl.circleColor', value)
    @property
    def telescopeControl_flagTelescopeCircles(self):
        """TelescopeControl.flagTelescopeCircles (bool)"""
        return self._getProperty('TelescopeControl.flagTelescopeCircles')
    @telescopeControl_flagTelescopeCircles.setter
    def telescopeControl_flagTelescopeCircles(self, value):
        self._setProperty('TelescopeControl.flagTelescopeCircles', value)
    @property
    def telescopeControl_flagTelescopeLabels(self):
        """TelescopeControl.flagTelescopeLabels (bool)"""
        return self._getProperty('TelescopeControl.flagTelescopeLabels')
    @telescopeControl_flagTelescopeLabels.setter
    def telescopeControl_flagTelescopeLabels(self, value):
        self._setProperty('TelescopeControl.flagTelescopeLabels', value)
    @property
    def telescopeControl_flagTelescopeReticles(self):
        """TelescopeControl.flagTelescopeReticles (bool)"""
        return self._getProperty('TelescopeControl.flagTelescopeReticles')
    @telescopeControl_flagTelescopeReticles.setter
    def telescopeControl_flagTelescopeReticles(self, value):
        self._setProperty('TelescopeControl.flagTelescopeReticles', value)
    @property
    def telescopeControl_labelColor(self):
        """TelescopeControl.labelColor (Vector3<float>)"""
        return self._getProperty('TelescopeControl.labelColor')
    @telescopeControl_labelColor.setter
    def telescopeControl_labelColor(self, value):
        self._setProperty('TelescopeControl.labelColor', value)
    @property
    def telescopeControl_reticleColor(self):
        """TelescopeControl.reticleColor (Vector3<float>)"""
        return self._getProperty('TelescopeControl.reticleColor')
    @telescopeControl_reticleColor.setter
    def telescopeControl_reticleColor(self, value):
        self._setProperty('TelescopeControl.reticleColor', value)
    @property
    def telescopeControl_serverExecutablesDirectoryPath(self):
        """TelescopeControl.serverExecutablesDirectoryPath (QString)"""
        return self._getProperty('TelescopeControl.serverExecutablesDirectoryPath')
    @telescopeControl_serverExecutablesDirectoryPath.setter
    def telescopeControl_serverExecutablesDirectoryPath(self, value):
        self._setProperty('TelescopeControl.serverExecutablesDirectoryPath', value)
    @property
    def telescopeControl_useTelescopeServerExecutables(self):
        """TelescopeControl.useTelescopeServerExecutables (bool)"""
        return self._getProperty('TelescopeControl.useTelescopeServerExecutables')
    @telescopeControl_useTelescopeServerExecutables.setter
    def telescopeControl_useTelescopeServerExecutables(self, value):
        self._setProperty('TelescopeControl.useTelescopeServerExecutables', value)
    @property
    def telescopeControl_useTelescopeServerLogs(self):
        """TelescopeControl.useTelescopeServerLogs (bool)"""
        return self._getProperty('TelescopeControl.useTelescopeServerLogs')
    @telescopeControl_useTelescopeServerLogs.setter
    def telescopeControl_useTelescopeServerLogs(self, value):
        self._setProperty('TelescopeControl.useTelescopeServerLogs', value)
    @property
    def toastMgr_surveyDisplayed(self):
        """ToastMgr.surveyDisplayed (bool)"""
        return self._getProperty('ToastMgr.surveyDisplayed')
    @toastMgr_surveyDisplayed.setter
    def toastMgr_surveyDisplayed(self, value):
        self._setProperty('ToastMgr.surveyDisplayed', value)
    @property
    def zodiacalLight_color(self):
        """ZodiacalLight.color (Vector3<float>)"""
        return self._getProperty('ZodiacalLight.color')
    @zodiacalLight_color.setter
    def zodiacalLight_color(self, value):
        self._setProperty('ZodiacalLight.color', value)
    @property
    def zodiacalLight_flagZodiacalLightDisplayed(self):
        """ZodiacalLight.flagZodiacalLightDisplayed (bool)"""
        return self._getProperty('ZodiacalLight.flagZodiacalLightDisplayed')
    @zodiacalLight_flagZodiacalLightDisplayed.setter
    def zodiacalLight_flagZodiacalLightDisplayed(self, value):
        self._setProperty('ZodiacalLight.flagZodiacalLightDisplayed', value)
    @property
    def zodiacalLight_intensity(self):
        """ZodiacalLight.intensity (double)"""
        return self._getProperty('ZodiacalLight.intensity')
    @zodiacalLight_intensity.setter
    def zodiacalLight_intensity(self, value):
        self._setProperty('ZodiacalLight.intensity', value)
    @property
    def autoHideHorizontalButtonBar(self):
        """actionAutoHideHorizontalButtonBar (bool)"""
        return self._getProperty('actionAutoHideHorizontalButtonBar')
    @autoHideHorizontalButtonBar.setter
    def autoHideHorizontalButtonBar(self, value):
        self._setProperty('actionAutoHideHorizontalButtonBar', value)
    @property
    def autoHideVerticalButtonBar(self):
        """actionAutoHideVerticalButtonBar (bool)"""
        return self._getProperty('actionAutoHideVerticalButtonBar')
    @autoHideVerticalButtonBar.setter
    def autoHideVerticalButtonBar(self, value):
        self._setProperty('actionAutoHideVerticalButtonBar', value)
    @property
    def gotoSelectedObject(self):
        """actionGoto_Selected_Object (bool)"""
        return self._getProperty('actionGoto_Selected_Object')
    @gotoSelectedObject.setter
    def gotoSelectedObject(self, value):
        self._setProperty('actionGoto_Selected_Object', value)
    @property
    def horizontalFlip(self):
        """actionHorizontal_Flip (bool)"""
        return self._getProperty('actionHorizontal_Flip')
    @horizontalFlip.setter
    def horizontalFlip(self, value):
        self._setProperty('actionHorizontal_Flip', value)
    @property
    def setFullScreenGlobal(self):
        """actionSet_Full_Screen_Global (bool)"""
        return self._getProperty('actionSet_Full_Screen_Global')
    @setFullScreenGlobal.setter
    def setFullScreenGlobal(self, value):
        self._setProperty('actionSet_Full_Screen_Global', value)
    @property
    def setNebulaTypeFilterUsage(self):
        """actionSet_Nebula_TypeFilterUsage (bool)"""
        return self._getProperty('actionSet_Nebula_TypeFilterUsage')
    @setNebulaTypeFilterUsage.setter
    def setNebulaTypeFilterUsage(self, value):
        self._setProperty('actionSet_Nebula_TypeFilterUsage', value)
    @property
    def setTracking(self):
        """actionSet_Tracking (bool)"""
        return self._getProperty('actionSet_Tracking')
    @setTracking.setter
    def setTracking(self, value):
        self._setProperty('actionSet_Tracking', value)
    @property
    def showAntisolarPoint(self):
        """actionShow_Antisolar_Point (bool)"""
        return self._getProperty('actionShow_Antisolar_Point')
    @showAntisolarPoint.setter
    def showAntisolarPoint(self, value):
        self._setProperty('actionShow_Antisolar_Point', value)
    @property
    def showApexPoints(self):
        """actionShow_Apex_Points (bool)"""
        return self._getProperty('actionShow_Apex_Points')
    @showApexPoints.setter
    def showApexPoints(self, value):
        self._setProperty('actionShow_Apex_Points', value)
    @property
    def showAsterismLabels(self):
        """actionShow_Asterism_Labels (bool)"""
        return self._getProperty('actionShow_Asterism_Labels')
    @showAsterismLabels.setter
    def showAsterismLabels(self, value):
        self._setProperty('actionShow_Asterism_Labels', value)
    @property
    def showAsterismLines(self):
        """actionShow_Asterism_Lines (bool)"""
        return self._getProperty('actionShow_Asterism_Lines')
    @showAsterismLines.setter
    def showAsterismLines(self, value):
        self._setProperty('actionShow_Asterism_Lines', value)
    @property
    def showAstroCalcWindowGlobal(self):
        """actionShow_AstroCalc_Window_Global (bool)"""
        return self._getProperty('actionShow_AstroCalc_Window_Global')
    @showAstroCalcWindowGlobal.setter
    def showAstroCalcWindowGlobal(self, value):
        self._setProperty('actionShow_AstroCalc_Window_Global', value)
    @property
    def showAtmosphere(self):
        """actionShow_Atmosphere (bool)"""
        return self._getProperty('actionShow_Atmosphere')
    @showAtmosphere.setter
    def showAtmosphere(self, value):
        self._setProperty('actionShow_Atmosphere', value)
    @property
    def showAzimuthalGrid(self):
        """actionShow_Azimuthal_Grid (bool)"""
        return self._getProperty('actionShow_Azimuthal_Grid')
    @showAzimuthalGrid.setter
    def showAzimuthalGrid(self, value):
        self._setProperty('actionShow_Azimuthal_Grid', value)
    @property
    def showCardinalPoints(self):
        """actionShow_Cardinal_Points (bool)"""
        return self._getProperty('actionShow_Cardinal_Points')
    @showCardinalPoints.setter
    def showCardinalPoints(self, value):
        self._setProperty('actionShow_Cardinal_Points', value)
    @property
    def showCelestialJ2000Poles(self):
        """actionShow_Celestial_J2000_Poles (bool)"""
        return self._getProperty('actionShow_Celestial_J2000_Poles')
    @showCelestialJ2000Poles.setter
    def showCelestialJ2000Poles(self, value):
        self._setProperty('actionShow_Celestial_J2000_Poles', value)
    @property
    def showCelestialPoles(self):
        """actionShow_Celestial_Poles (bool)"""
        return self._getProperty('actionShow_Celestial_Poles')
    @showCelestialPoles.setter
    def showCelestialPoles(self, value):
        self._setProperty('actionShow_Celestial_Poles', value)
    @property
    def showCircumpolarCircles(self):
        """actionShow_Circumpolar_Circles (bool)"""
        return self._getProperty('actionShow_Circumpolar_Circles')
    @showCircumpolarCircles.setter
    def showCircumpolarCircles(self, value):
        self._setProperty('actionShow_Circumpolar_Circles', value)
    @property
    def showColureLines(self):
        """actionShow_Colure_Lines (bool)"""
        return self._getProperty('actionShow_Colure_Lines')
    @showColureLines.setter
    def showColureLines(self, value):
        self._setProperty('actionShow_Colure_Lines', value)
    @property
    def showCompassMarks(self):
        """actionShow_Compass_Marks (bool)"""
        return self._getProperty('actionShow_Compass_Marks')
    @showCompassMarks.setter
    def showCompassMarks(self, value):
        self._setProperty('actionShow_Compass_Marks', value)
    @property
    def showConfigurationWindowGlobal(self):
        """actionShow_Configuration_Window_Global (bool)"""
        return self._getProperty('actionShow_Configuration_Window_Global')
    @showConfigurationWindowGlobal.setter
    def showConfigurationWindowGlobal(self, value):
        self._setProperty('actionShow_Configuration_Window_Global', value)
    @property
    def showConstellationArt(self):
        """actionShow_Constellation_Art (bool)"""
        return self._getProperty('actionShow_Constellation_Art')
    @showConstellationArt.setter
    def showConstellationArt(self, value):
        self._setProperty('actionShow_Constellation_Art', value)
    @property
    def showConstellationBoundaries(self):
        """actionShow_Constellation_Boundaries (bool)"""
        return self._getProperty('actionShow_Constellation_Boundaries')
    @showConstellationBoundaries.setter
    def showConstellationBoundaries(self, value):
        self._setProperty('actionShow_Constellation_Boundaries', value)
    @property
    def showConstellationIsolated(self):
        """actionShow_Constellation_Isolated (bool)"""
        return self._getProperty('actionShow_Constellation_Isolated')
    @showConstellationIsolated.setter
    def showConstellationIsolated(self, value):
        self._setProperty('actionShow_Constellation_Isolated', value)
    @property
    def showConstellationLabels(self):
        """actionShow_Constellation_Labels (bool)"""
        return self._getProperty('actionShow_Constellation_Labels')
    @showConstellationLabels.setter
    def showConstellationLabels(self, value):
        self._setProperty('actionShow_Constellation_Labels', value)
    @property
    def showConstellationLines(self):
        """actionShow_Constellation_Lines (bool)"""
        return self._getProperty('actionShow_Constellation_Lines')
    @showConstellationLines.setter
    def showConstellationLines(self, value):
        self._setProperty('actionShow_Constellation_Lines', value)
    @property
    def showCurrentVerticalLine(self):
        """actionShow_Current_Vertical_Line (bool)"""
        return self._getProperty('actionShow_Current_Vertical_Line')
    @showCurrentVerticalLine.setter
    def showCurrentVerticalLine(self, value):
        self._setProperty('actionShow_Current_Vertical_Line', value)
    @property
    def showDSOTextures(self):
        """actionShow_DSO_Textures (bool)"""
        return self._getProperty('actionShow_DSO_Textures')
    @showDSOTextures.setter
    def showDSOTextures(self, value):
        self._setProperty('actionShow_DSO_Textures', value)
    @property
    def showDateTimeWindowGlobal(self):
        """actionShow_DateTime_Window_Global (bool)"""
        return self._getProperty('actionShow_DateTime_Window_Global')
    @showDateTimeWindowGlobal.setter
    def showDateTimeWindowGlobal(self, value):
        self._setProperty('actionShow_DateTime_Window_Global', value)
    @property
    def showEclipticGrid(self):
        """actionShow_Ecliptic_Grid (bool)"""
        return self._getProperty('actionShow_Ecliptic_Grid')
    @showEclipticGrid.setter
    def showEclipticGrid(self, value):
        self._setProperty('actionShow_Ecliptic_Grid', value)
    @property
    def showEclipticJ2000Grid(self):
        """actionShow_Ecliptic_J2000_Grid (bool)"""
        return self._getProperty('actionShow_Ecliptic_J2000_Grid')
    @showEclipticJ2000Grid.setter
    def showEclipticJ2000Grid(self, value):
        self._setProperty('actionShow_Ecliptic_J2000_Grid', value)
    @property
    def showEclipticJ2000Line(self):
        """actionShow_Ecliptic_J2000_Line (bool)"""
        return self._getProperty('actionShow_Ecliptic_J2000_Line')
    @showEclipticJ2000Line.setter
    def showEclipticJ2000Line(self, value):
        self._setProperty('actionShow_Ecliptic_J2000_Line', value)
    @property
    def showEclipticJ2000Poles(self):
        """actionShow_Ecliptic_J2000_Poles (bool)"""
        return self._getProperty('actionShow_Ecliptic_J2000_Poles')
    @showEclipticJ2000Poles.setter
    def showEclipticJ2000Poles(self, value):
        self._setProperty('actionShow_Ecliptic_J2000_Poles', value)
    @property
    def showEclipticLine(self):
        """actionShow_Ecliptic_Line (bool)"""
        return self._getProperty('actionShow_Ecliptic_Line')
    @showEclipticLine.setter
    def showEclipticLine(self, value):
        self._setProperty('actionShow_Ecliptic_Line', value)
    @property
    def showEclipticPoles(self):
        """actionShow_Ecliptic_Poles (bool)"""
        return self._getProperty('actionShow_Ecliptic_Poles')
    @showEclipticPoles.setter
    def showEclipticPoles(self, value):
        self._setProperty('actionShow_Ecliptic_Poles', value)
    @property
    def showEquatorJ2000Line(self):
        """actionShow_Equator_J2000_Line (bool)"""
        return self._getProperty('actionShow_Equator_J2000_Line')
    @showEquatorJ2000Line.setter
    def showEquatorJ2000Line(self, value):
        self._setProperty('actionShow_Equator_J2000_Line', value)
    @property
    def showEquatorLine(self):
        """actionShow_Equator_Line (bool)"""
        return self._getProperty('actionShow_Equator_Line')
    @showEquatorLine.setter
    def showEquatorLine(self, value):
        self._setProperty('actionShow_Equator_Line', value)
    @property
    def showEquatorialGrid(self):
        """actionShow_Equatorial_Grid (bool)"""
        return self._getProperty('actionShow_Equatorial_Grid')
    @showEquatorialGrid.setter
    def showEquatorialGrid(self, value):
        self._setProperty('actionShow_Equatorial_Grid', value)
    @property
    def showEquatorialJ2000Grid(self):
        """actionShow_Equatorial_J2000_Grid (bool)"""
        return self._getProperty('actionShow_Equatorial_J2000_Grid')
    @showEquatorialJ2000Grid.setter
    def showEquatorialJ2000Grid(self, value):
        self._setProperty('actionShow_Equatorial_J2000_Grid', value)
    @property
    def showEquinoxJ2000Points(self):
        """actionShow_Equinox_J2000_Points (bool)"""
        return self._getProperty('actionShow_Equinox_J2000_Points')
    @showEquinoxJ2000Points.setter
    def showEquinoxJ2000Points(self, value):
        self._setProperty('actionShow_Equinox_J2000_Points', value)
    @property
    def showEquinoxPoints(self):
        """actionShow_Equinox_Points (bool)"""
        return self._getProperty('actionShow_Equinox_Points')
    @showEquinoxPoints.setter
    def showEquinoxPoints(self, value):
        self._setProperty('actionShow_Equinox_Points', value)
    @property
    def showExoplanets(self):
        """actionShow_Exoplanets (bool)"""
        return self._getProperty('actionShow_Exoplanets')
    @showExoplanets.setter
    def showExoplanets(self, value):
        self._setProperty('actionShow_Exoplanets', value)
    @property
    def showExoplanetsConfigDialog(self):
        """actionShow_Exoplanets_ConfigDialog (bool)"""
        return self._getProperty('actionShow_Exoplanets_ConfigDialog')
    @showExoplanetsConfigDialog.setter
    def showExoplanetsConfigDialog(self, value):
        self._setProperty('actionShow_Exoplanets_ConfigDialog', value)
    @property
    def showFOVCenterMarker(self):
        """actionShow_FOV_Center_Marker (bool)"""
        return self._getProperty('actionShow_FOV_Center_Marker')
    @showFOVCenterMarker.setter
    def showFOVCenterMarker(self, value):
        self._setProperty('actionShow_FOV_Center_Marker', value)
    @property
    def showFOVCircularMarker(self):
        """actionShow_FOV_Circular_Marker (bool)"""
        return self._getProperty('actionShow_FOV_Circular_Marker')
    @showFOVCircularMarker.setter
    def showFOVCircularMarker(self, value):
        self._setProperty('actionShow_FOV_Circular_Marker', value)
    @property
    def showFOVRectangularMarker(self):
        """actionShow_FOV_Rectangular_Marker (bool)"""
        return self._getProperty('actionShow_FOV_Rectangular_Marker')
    @showFOVRectangularMarker.setter
    def showFOVRectangularMarker(self, value):
        self._setProperty('actionShow_FOV_Rectangular_Marker', value)
    @property
    def showFixedEquatorLine(self):
        """actionShow_Fixed_Equator_Line (bool)"""
        return self._getProperty('actionShow_Fixed_Equator_Line')
    @showFixedEquatorLine.setter
    def showFixedEquatorLine(self, value):
        self._setProperty('actionShow_Fixed_Equator_Line', value)
    @property
    def showFixedEquatorialGrid(self):
        """actionShow_Fixed_Equatorial_Grid (bool)"""
        return self._getProperty('actionShow_Fixed_Equatorial_Grid')
    @showFixedEquatorialGrid.setter
    def showFixedEquatorialGrid(self, value):
        self._setProperty('actionShow_Fixed_Equatorial_Grid', value)
    @property
    def showFog(self):
        """actionShow_Fog (bool)"""
        return self._getProperty('actionShow_Fog')
    @showFog.setter
    def showFog(self, value):
        self._setProperty('actionShow_Fog', value)
    @property
    def showGalacticCenter(self):
        """actionShow_Galactic_Center (bool)"""
        return self._getProperty('actionShow_Galactic_Center')
    @showGalacticCenter.setter
    def showGalacticCenter(self, value):
        self._setProperty('actionShow_Galactic_Center', value)
    @property
    def showGalacticEquatorLine(self):
        """actionShow_Galactic_Equator_Line (bool)"""
        return self._getProperty('actionShow_Galactic_Equator_Line')
    @showGalacticEquatorLine.setter
    def showGalacticEquatorLine(self, value):
        self._setProperty('actionShow_Galactic_Equator_Line', value)
    @property
    def showGalacticGrid(self):
        """actionShow_Galactic_Grid (bool)"""
        return self._getProperty('actionShow_Galactic_Grid')
    @showGalacticGrid.setter
    def showGalacticGrid(self, value):
        self._setProperty('actionShow_Galactic_Grid', value)
    @property
    def showGalacticPoles(self):
        """actionShow_Galactic_Poles (bool)"""
        return self._getProperty('actionShow_Galactic_Poles')
    @showGalacticPoles.setter
    def showGalacticPoles(self, value):
        self._setProperty('actionShow_Galactic_Poles', value)
    @property
    def showGridlines(self):
        """actionShow_Gridlines (bool)"""
        return self._getProperty('actionShow_Gridlines')
    @showGridlines.setter
    def showGridlines(self, value):
        self._setProperty('actionShow_Gridlines', value)
    @property
    def showGround(self):
        """actionShow_Ground (bool)"""
        return self._getProperty('actionShow_Ground')
    @showGround.setter
    def showGround(self, value):
        self._setProperty('actionShow_Ground', value)
    @property
    def showHelpWindowGlobal(self):
        """actionShow_Help_Window_Global (bool)"""
        return self._getProperty('actionShow_Help_Window_Global')
    @showHelpWindowGlobal.setter
    def showHelpWindowGlobal(self, value):
        self._setProperty('actionShow_Help_Window_Global', value)
    @property
    def showHipsSurveys(self):
        """actionShow_Hips_Surveys (bool)"""
        return self._getProperty('actionShow_Hips_Surveys')
    @showHipsSurveys.setter
    def showHipsSurveys(self, value):
        self._setProperty('actionShow_Hips_Surveys', value)
    @property
    def showHorizonLine(self):
        """actionShow_Horizon_Line (bool)"""
        return self._getProperty('actionShow_Horizon_Line')
    @showHorizonLine.setter
    def showHorizonLine(self, value):
        self._setProperty('actionShow_Horizon_Line', value)
    @property
    def showIntercardinalPoints(self):
        """actionShow_Intercardinal_Points (bool)"""
        return self._getProperty('actionShow_Intercardinal_Points')
    @showIntercardinalPoints.setter
    def showIntercardinalPoints(self, value):
        self._setProperty('actionShow_Intercardinal_Points', value)
    @property
    def showInvariablePlaneLine(self):
        """actionShow_Invariable_Plane_Line (bool)"""
        return self._getProperty('actionShow_Invariable_Plane_Line')
    @showInvariablePlaneLine.setter
    def showInvariablePlaneLine(self, value):
        self._setProperty('actionShow_Invariable_Plane_Line', value)
    @property
    def showLandscapeIllumination(self):
        """actionShow_LandscapeIllumination (bool)"""
        return self._getProperty('actionShow_LandscapeIllumination')
    @showLandscapeIllumination.setter
    def showLandscapeIllumination(self, value):
        self._setProperty('actionShow_LandscapeIllumination', value)
    @property
    def showLandscapeLabels(self):
        """actionShow_LandscapeLabels (bool)"""
        return self._getProperty('actionShow_LandscapeLabels')
    @showLandscapeLabels.setter
    def showLandscapeLabels(self, value):
        self._setProperty('actionShow_LandscapeLabels', value)
    @property
    def showLightPollutionFromDatabase(self):
        """actionShow_LightPollutionFromDatabase (bool)"""
        return self._getProperty('actionShow_LightPollutionFromDatabase')
    @showLightPollutionFromDatabase.setter
    def showLightPollutionFromDatabase(self, value):
        self._setProperty('actionShow_LightPollutionFromDatabase', value)
    @property
    def showLocationWindowGlobal(self):
        """actionShow_Location_Window_Global (bool)"""
        return self._getProperty('actionShow_Location_Window_Global')
    @showLocationWindowGlobal.setter
    def showLocationWindowGlobal(self, value):
        self._setProperty('actionShow_Location_Window_Global', value)
    @property
    def showLongitudeLine(self):
        """actionShow_Longitude_Line (bool)"""
        return self._getProperty('actionShow_Longitude_Line')
    @showLongitudeLine.setter
    def showLongitudeLine(self, value):
        self._setProperty('actionShow_Longitude_Line', value)
    @property
    def showMeridianLine(self):
        """actionShow_Meridian_Line (bool)"""
        return self._getProperty('actionShow_Meridian_Line')
    @showMeridianLine.setter
    def showMeridianLine(self, value):
        self._setProperty('actionShow_Meridian_Line', value)
    @property
    def showMeteorShowers(self):
        """actionShow_MeteorShowers (bool)"""
        return self._getProperty('actionShow_MeteorShowers')
    @showMeteorShowers.setter
    def showMeteorShowers(self, value):
        self._setProperty('actionShow_MeteorShowers', value)
    @property
    def showMeteorShowersconfigdialog(self):
        """actionShow_MeteorShowers_config_dialog (bool)"""
        return self._getProperty('actionShow_MeteorShowers_config_dialog')
    @showMeteorShowersconfigdialog.setter
    def showMeteorShowersconfigdialog(self, value):
        self._setProperty('actionShow_MeteorShowers_config_dialog', value)
    @property
    def showMeteorShowerslabels(self):
        """actionShow_MeteorShowers_labels (bool)"""
        return self._getProperty('actionShow_MeteorShowers_labels')
    @showMeteorShowerslabels.setter
    def showMeteorShowerslabels(self, value):
        self._setProperty('actionShow_MeteorShowers_labels', value)
    @property
    def showMeteorShowerssearchdialog(self):
        """actionShow_MeteorShowers_search_dialog (bool)"""
        return self._getProperty('actionShow_MeteorShowers_search_dialog')
    @showMeteorShowerssearchdialog.setter
    def showMeteorShowerssearchdialog(self, value):
        self._setProperty('actionShow_MeteorShowers_search_dialog', value)
    @property
    def showMilkyWay(self):
        """actionShow_MilkyWay (bool)"""
        return self._getProperty('actionShow_MilkyWay')
    @showMilkyWay.setter
    def showMilkyWay(self, value):
        self._setProperty('actionShow_MilkyWay', value)
    @property
    def showNebulas(self):
        """actionShow_Nebulas (bool)"""
        return self._getProperty('actionShow_Nebulas')
    @showNebulas.setter
    def showNebulas(self, value):
        self._setProperty('actionShow_Nebulas', value)
    @property
    def showNightMode(self):
        """actionShow_Night_Mode (bool)"""
        return self._getProperty('actionShow_Night_Mode')
    @showNightMode.setter
    def showNightMode(self, value):
        self._setProperty('actionShow_Night_Mode', value)
    @property
    def showNovaeConfigDialog(self):
        """actionShow_Novae_ConfigDialog (bool)"""
        return self._getProperty('actionShow_Novae_ConfigDialog')
    @showNovaeConfigDialog.setter
    def showNovaeConfigDialog(self, value):
        self._setProperty('actionShow_Novae_ConfigDialog', value)
    @property
    def showObsListWindowGlobal(self):
        """actionShow_ObsList_Window_Global (bool)"""
        return self._getProperty('actionShow_ObsList_Window_Global')
    @showObsListWindowGlobal.setter
    def showObsListWindowGlobal(self, value):
        self._setProperty('actionShow_ObsList_Window_Global', value)
    @property
    def showOcularCrosshairs(self):
        """actionShow_Ocular_Crosshairs (bool)"""
        return self._getProperty('actionShow_Ocular_Crosshairs')
    @showOcularCrosshairs.setter
    def showOcularCrosshairs(self, value):
        self._setProperty('actionShow_Ocular_Crosshairs', value)
    @property
    def showOculars(self):
        """actionShow_Oculars (bool)"""
        return self._getProperty('actionShow_Oculars')
    @showOculars.setter
    def showOculars(self, value):
        self._setProperty('actionShow_Oculars', value)
    @property
    def showOcularsGUI(self):
        """actionShow_Oculars_GUI (bool)"""
        return self._getProperty('actionShow_Oculars_GUI')
    @showOcularsGUI.setter
    def showOcularsGUI(self, value):
        self._setProperty('actionShow_Oculars_GUI', value)
    @property
    def showOcularsdialog(self):
        """actionShow_Oculars_dialog (bool)"""
        return self._getProperty('actionShow_Oculars_dialog')
    @showOcularsdialog.setter
    def showOcularsdialog(self, value):
        self._setProperty('actionShow_Oculars_dialog', value)
    @property
    def showPenumbraCircle(self):
        """actionShow_Penumbra_Circle (bool)"""
        return self._getProperty('actionShow_Penumbra_Circle')
    @showPenumbraCircle.setter
    def showPenumbraCircle(self, value):
        self._setProperty('actionShow_Penumbra_Circle', value)
    @property
    def showPlanets(self):
        """actionShow_Planets (bool)"""
        return self._getProperty('actionShow_Planets')
    @showPlanets.setter
    def showPlanets(self, value):
        self._setProperty('actionShow_Planets', value)
    @property
    def showPlanetsEnlargeMinor(self):
        """actionShow_Planets_EnlargeMinor (bool)"""
        return self._getProperty('actionShow_Planets_EnlargeMinor')
    @showPlanetsEnlargeMinor.setter
    def showPlanetsEnlargeMinor(self, value):
        self._setProperty('actionShow_Planets_EnlargeMinor', value)
    @property
    def showPlanetsEnlargeMoon(self):
        """actionShow_Planets_EnlargeMoon (bool)"""
        return self._getProperty('actionShow_Planets_EnlargeMoon')
    @showPlanetsEnlargeMoon.setter
    def showPlanetsEnlargeMoon(self, value):
        self._setProperty('actionShow_Planets_EnlargeMoon', value)
    @property
    def showPlanetsEnlargePlanets(self):
        """actionShow_Planets_EnlargePlanets (bool)"""
        return self._getProperty('actionShow_Planets_EnlargePlanets')
    @showPlanetsEnlargePlanets.setter
    def showPlanetsEnlargePlanets(self, value):
        self._setProperty('actionShow_Planets_EnlargePlanets', value)
    @property
    def showPlanetsEnlargeSun(self):
        """actionShow_Planets_EnlargeSun (bool)"""
        return self._getProperty('actionShow_Planets_EnlargeSun')
    @showPlanetsEnlargeSun.setter
    def showPlanetsEnlargeSun(self, value):
        self._setProperty('actionShow_Planets_EnlargeSun', value)
    @property
    def showPlanetsHints(self):
        """actionShow_Planets_Hints (bool)"""
        return self._getProperty('actionShow_Planets_Hints')
    @showPlanetsHints.setter
    def showPlanetsHints(self, value):
        self._setProperty('actionShow_Planets_Hints', value)
    @property
    def showPlanetsLabels(self):
        """actionShow_Planets_Labels (bool)"""
        return self._getProperty('actionShow_Planets_Labels')
    @showPlanetsLabels.setter
    def showPlanetsLabels(self, value):
        self._setProperty('actionShow_Planets_Labels', value)
    @property
    def showPlanetsNomenclature(self):
        """actionShow_Planets_Nomenclature (bool)"""
        return self._getProperty('actionShow_Planets_Nomenclature')
    @showPlanetsNomenclature.setter
    def showPlanetsNomenclature(self, value):
        self._setProperty('actionShow_Planets_Nomenclature', value)
    @property
    def showPlanetsNomenclatureSpecialPointsOnly(self):
        """actionShow_Planets_Nomenclature_SpecialPoints_Only (bool)"""
        return self._getProperty('actionShow_Planets_Nomenclature_SpecialPoints_Only')
    @showPlanetsNomenclatureSpecialPointsOnly.setter
    def showPlanetsNomenclatureSpecialPointsOnly(self, value):
        self._setProperty('actionShow_Planets_Nomenclature_SpecialPoints_Only', value)
    @property
    def showPlanetsOrbits(self):
        """actionShow_Planets_Orbits (bool)"""
        return self._getProperty('actionShow_Planets_Orbits')
    @showPlanetsOrbits.setter
    def showPlanetsOrbits(self, value):
        self._setProperty('actionShow_Planets_Orbits', value)
    @property
    def showPlanetsPointers(self):
        """actionShow_Planets_Pointers (bool)"""
        return self._getProperty('actionShow_Planets_Pointers')
    @showPlanetsPointers.setter
    def showPlanetsPointers(self, value):
        self._setProperty('actionShow_Planets_Pointers', value)
    @property
    def showPlanetsTrails(self):
        """actionShow_Planets_Trails (bool)"""
        return self._getProperty('actionShow_Planets_Trails')
    @showPlanetsTrails.setter
    def showPlanetsTrails(self, value):
        self._setProperty('actionShow_Planets_Trails', value)
    @property
    def showPrecessionCircles(self):
        """actionShow_Precession_Circles (bool)"""
        return self._getProperty('actionShow_Precession_Circles')
    @showPrecessionCircles.setter
    def showPrecessionCircles(self, value):
        self._setProperty('actionShow_Precession_Circles', value)
    @property
    def showPrimeVerticalLine(self):
        """actionShow_Prime_Vertical_Line (bool)"""
        return self._getProperty('actionShow_Prime_Vertical_Line')
    @showPrimeVerticalLine.setter
    def showPrimeVerticalLine(self, value):
        self._setProperty('actionShow_Prime_Vertical_Line', value)
    @property
    def showQuadratureLine(self):
        """actionShow_Quadrature_Line (bool)"""
        return self._getProperty('actionShow_Quadrature_Line')
    @showQuadratureLine.setter
    def showQuadratureLine(self, value):
        self._setProperty('actionShow_Quadrature_Line', value)
    @property
    def showRayHelpers(self):
        """actionShow_Ray_Helpers (bool)"""
        return self._getProperty('actionShow_Ray_Helpers')
    @showRayHelpers.setter
    def showRayHelpers(self, value):
        self._setProperty('actionShow_Ray_Helpers', value)
    @property
    def showRemoteControl(self):
        """actionShow_Remote_Control (bool)"""
        return self._getProperty('actionShow_Remote_Control')
    @showRemoteControl.setter
    def showRemoteControl(self, value):
        self._setProperty('actionShow_Remote_Control', value)
    @property
    def showRemoteControldialog(self):
        """actionShow_Remote_Control_dialog (bool)"""
        return self._getProperty('actionShow_Remote_Control_dialog')
    @showRemoteControldialog.setter
    def showRemoteControldialog(self, value):
        self._setProperty('actionShow_Remote_Control_dialog', value)
    @property
    def showSatelliteConfigDialogGlobal(self):
        """actionShow_Satellite_ConfigDialog_Global (bool)"""
        return self._getProperty('actionShow_Satellite_ConfigDialog_Global')
    @showSatelliteConfigDialogGlobal.setter
    def showSatelliteConfigDialogGlobal(self, value):
        self._setProperty('actionShow_Satellite_ConfigDialog_Global', value)
    @property
    def showSatelliteHints(self):
        """actionShow_Satellite_Hints (bool)"""
        return self._getProperty('actionShow_Satellite_Hints')
    @showSatelliteHints.setter
    def showSatelliteHints(self, value):
        self._setProperty('actionShow_Satellite_Hints', value)
    @property
    def showSatelliteLabels(self):
        """actionShow_Satellite_Labels (bool)"""
        return self._getProperty('actionShow_Satellite_Labels')
    @showSatelliteLabels.setter
    def showSatelliteLabels(self, value):
        self._setProperty('actionShow_Satellite_Labels', value)
    @property
    def showScriptConsoleWindowGlobal(self):
        """actionShow_ScriptConsole_Window_Global (bool)"""
        return self._getProperty('actionShow_ScriptConsole_Window_Global')
    @showScriptConsoleWindowGlobal.setter
    def showScriptConsoleWindowGlobal(self, value):
        self._setProperty('actionShow_ScriptConsole_Window_Global', value)
    @property
    def showSearchWindowGlobal(self):
        """actionShow_Search_Window_Global (bool)"""
        return self._getProperty('actionShow_Search_Window_Global')
    @showSearchWindowGlobal.setter
    def showSearchWindowGlobal(self, value):
        self._setProperty('actionShow_Search_Window_Global', value)
    @property
    def showSecondaryIntercardinalPoints(self):
        """actionShow_Secondary_Intercardinal_Points (bool)"""
        return self._getProperty('actionShow_Secondary_Intercardinal_Points')
    @showSecondaryIntercardinalPoints.setter
    def showSecondaryIntercardinalPoints(self, value):
        self._setProperty('actionShow_Secondary_Intercardinal_Points', value)
    @property
    def showSensor(self):
        """actionShow_Sensor (bool)"""
        return self._getProperty('actionShow_Sensor')
    @showSensor.setter
    def showSensor(self, value):
        self._setProperty('actionShow_Sensor', value)
    @property
    def showShortcutsWindowGlobal(self):
        """actionShow_Shortcuts_Window_Global (bool)"""
        return self._getProperty('actionShow_Shortcuts_Window_Global')
    @showShortcutsWindowGlobal.setter
    def showShortcutsWindowGlobal(self, value):
        self._setProperty('actionShow_Shortcuts_Window_Global', value)
    @property
    def showSkyViewWindowGlobal(self):
        """actionShow_SkyView_Window_Global (bool)"""
        return self._getProperty('actionShow_SkyView_Window_Global')
    @showSkyViewWindowGlobal.setter
    def showSkyViewWindowGlobal(self, value):
        self._setProperty('actionShow_SkyView_Window_Global', value)
    @property
    def showSkycultureNativePlanetNames(self):
        """actionShow_Skyculture_NativePlanetNames (bool)"""
        return self._getProperty('actionShow_Skyculture_NativePlanetNames')
    @showSkycultureNativePlanetNames.setter
    def showSkycultureNativePlanetNames(self, value):
        self._setProperty('actionShow_Skyculture_NativePlanetNames', value)
    @property
    def showSlewWindow(self):
        """actionShow_Slew_Window (bool)"""
        return self._getProperty('actionShow_Slew_Window')
    @showSlewWindow.setter
    def showSlewWindow(self, value):
        self._setProperty('actionShow_Slew_Window', value)
    @property
    def showSolarEquatorLine(self):
        """actionShow_Solar_Equator_Line (bool)"""
        return self._getProperty('actionShow_Solar_Equator_Line')
    @showSolarEquatorLine.setter
    def showSolarEquatorLine(self, value):
        self._setProperty('actionShow_Solar_Equator_Line', value)
    @property
    def showSolsticeJ2000Points(self):
        """actionShow_Solstice_J2000_Points (bool)"""
        return self._getProperty('actionShow_Solstice_J2000_Points')
    @showSolsticeJ2000Points.setter
    def showSolsticeJ2000Points(self, value):
        self._setProperty('actionShow_Solstice_J2000_Points', value)
    @property
    def showSolsticePoints(self):
        """actionShow_Solstice_Points (bool)"""
        return self._getProperty('actionShow_Solstice_Points')
    @showSolsticePoints.setter
    def showSolsticePoints(self, value):
        self._setProperty('actionShow_Solstice_Points', value)
    @property
    def showStars(self):
        """actionShow_Stars (bool)"""
        return self._getProperty('actionShow_Stars')
    @showStars.setter
    def showStars(self, value):
        self._setProperty('actionShow_Stars', value)
    @property
    def showStarsLabels(self):
        """actionShow_Stars_Labels (bool)"""
        return self._getProperty('actionShow_Stars_Labels')
    @showStarsLabels.setter
    def showStarsLabels(self, value):
        self._setProperty('actionShow_Stars_Labels', value)
    @property
    def showSupergalacticEquatorLine(self):
        """actionShow_Supergalactic_Equator_Line (bool)"""
        return self._getProperty('actionShow_Supergalactic_Equator_Line')
    @showSupergalacticEquatorLine.setter
    def showSupergalacticEquatorLine(self, value):
        self._setProperty('actionShow_Supergalactic_Equator_Line', value)
    @property
    def showSupergalacticGrid(self):
        """actionShow_Supergalactic_Grid (bool)"""
        return self._getProperty('actionShow_Supergalactic_Grid')
    @showSupergalacticGrid.setter
    def showSupergalacticGrid(self, value):
        self._setProperty('actionShow_Supergalactic_Grid', value)
    @property
    def showSupergalacticPoles(self):
        """actionShow_Supergalactic_Poles (bool)"""
        return self._getProperty('actionShow_Supergalactic_Poles')
    @showSupergalacticPoles.setter
    def showSupergalacticPoles(self, value):
        self._setProperty('actionShow_Supergalactic_Poles', value)
    @property
    def showTelescopeControldialog(self):
        """actionShow_TelescopeControl_dialog (bool)"""
        return self._getProperty('actionShow_TelescopeControl_dialog')
    @showTelescopeControldialog.setter
    def showTelescopeControldialog(self, value):
        self._setProperty('actionShow_TelescopeControl_dialog', value)
    @property
    def showTelrad(self):
        """actionShow_Telrad (bool)"""
        return self._getProperty('actionShow_Telrad')
    @showTelrad.setter
    def showTelrad(self, value):
        self._setProperty('actionShow_Telrad', value)
    @property
    def showToastSurvey(self):
        """actionShow_Toast_Survey (bool)"""
        return self._getProperty('actionShow_Toast_Survey')
    @showToastSurvey.setter
    def showToastSurvey(self, value):
        self._setProperty('actionShow_Toast_Survey', value)
    @property
    def showUmbraCenterPoint(self):
        """actionShow_Umbra_Center_Point (bool)"""
        return self._getProperty('actionShow_Umbra_Center_Point')
    @showUmbraCenterPoint.setter
    def showUmbraCenterPoint(self, value):
        self._setProperty('actionShow_Umbra_Center_Point', value)
    @property
    def showUmbraCircle(self):
        """actionShow_Umbra_Circle (bool)"""
        return self._getProperty('actionShow_Umbra_Circle')
    @showUmbraCircle.setter
    def showUmbraCircle(self, value):
        self._setProperty('actionShow_Umbra_Circle', value)
    @property
    def showZenithNadir(self):
        """actionShow_Zenith_Nadir (bool)"""
        return self._getProperty('actionShow_Zenith_Nadir')
    @showZenithNadir.setter
    def showZenithNadir(self, value):
        self._setProperty('actionShow_Zenith_Nadir', value)
    @property
    def showZodiacalLight(self):
        """actionShow_ZodiacalLight (bool)"""
        return self._getProperty('actionShow_ZodiacalLight')
    @showZodiacalLight.setter
    def showZodiacalLight(self, value):
        self._setProperty('actionShow_ZodiacalLight', value)
    @property
    def switchEquatorialMount(self):
        """actionSwitch_Equatorial_Mount (bool)"""
        return self._getProperty('actionSwitch_Equatorial_Mount')
    @switchEquatorialMount.setter
    def switchEquatorialMount(self, value):
        self._setProperty('actionSwitch_Equatorial_Mount', value)
    @property
    def toggleGuiHiddenGlobal(self):
        """actionToggle_GuiHidden_Global (bool)"""
        return self._getProperty('actionToggle_GuiHidden_Global')
    @toggleGuiHiddenGlobal.setter
    def toggleGuiHiddenGlobal(self, value):
        self._setProperty('actionToggle_GuiHidden_Global', value)
    @property
    def verticalFlip(self):
        """actionVertical_Flip (bool)"""
        return self._getProperty('actionVertical_Flip')
    @verticalFlip.setter
    def verticalFlip(self, value):
        self._setProperty('actionVertical_Flip', value)
